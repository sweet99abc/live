%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: ai0021-14.eps
%%Creator: Adobe Illustrator(R) 22.0
%%For:  
%%CreationDate: 3/20/2018
%%BoundingBox: 0 0 1158 1005
%%HiResBoundingBox: 0 0 1158 1004.7049
%%CropBox: 0 0 1158 1004.7049
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 22.0.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 22.0.1 x249 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 112 8%%BeginData: 31617 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFF
%AFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFF
%AFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFD05FFAFFFAFFFAFFFAFFFAFFF
%AFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFF
%AFFFAFFFAFFFAFFFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8
%FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAF
%AFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFFD05FFA8FFAF
%AFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8
%FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFF
%AFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFF
%AFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFF
%AFFD05FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFF
%AFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFA8AFA8FFA8AFA8FFA8
%AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8
%FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8
%AFA8FFA8AFA8FFA8FFFFFFAFAFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8
%FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFFF
%AFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFF
%AFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFF
%AFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFFFFFAFFFAFFFAFFFAFFFAFFF
%AFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFF
%AFFFAFFFAFFFAFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8
%FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAF
%AFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFFFFFA8
%CAAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAF
%AFA8FFAFAFA8FFAFAFA8FFAFAFA8FFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFF
%AFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFF
%AFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFF
%AFFFAFFFAFCA9ABC94BDA8FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFF
%AFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFA8FFA8AFA8FFA8
%AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8
%FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8
%AFA8FFA8AFA8FFA8AFA8FFA8A8939A709493BCA8AFA8FFA8AFA8FFA8AFA8
%FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8
%AFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFF
%AFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFF
%AFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFA1BC702901BCBCFFAFFF
%AFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFF
%AFFFAFFFAFFFAFFFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8
%FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAF
%AFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFC493
%9A012893BCA8AFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAF
%AFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFFFAFFFAFFFAFFFAFFFAFFFAFFF
%AFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFF
%AFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFF
%AFFFAFFFAFFFA8BC949A70BC9AFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFF
%AFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFA8AFA8FFA8
%AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8
%FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8
%AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA1BC93BC94A8A8FFA8AFA8FFA8AFA8
%FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8
%AFA8FFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFF
%AFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFF
%AFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFCAFFA8FFAFFF
%AFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFF
%AFFFAFFFAFFFAFFFAFFFAFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8
%FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAF
%AFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8
%FFAFFFAFFFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAF
%AFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFFFAFFFAFFFAFFFAFFFAFFF
%AFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFAF858585FFAFFFAFFFAFFF
%AFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFF
%AFFFAFFFAFFFAFFFAFFFFFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFF
%AFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFA8FFA8
%AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8A97E855A5B36
%61A8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8
%AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8FFFFFFA8AFA8FFA8AFA8FFA8AFA8
%FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8
%AFA8FFA8AFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFA9AF
%85615B615B615B615BAFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFF
%AFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFA9FD05FFAFFFAFFF
%AFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFF
%AFFFAFFFAFFFAFFFAFFFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAF
%AFA8FFAF8536615A5B36AF8585846184AFA8FFAFAFA8FFAFAFA8FFAFAFA8
%FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8615A
%85A9FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8
%FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFFFAFFFAFFFAFFFAFFFAFFF
%AFFFAFFFAFFFAFFFAFFFAFFFA9615B85AF61A985FF855B85AFFFAFFFAFFF
%84FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFF
%AFFFAFFFAF855B615B615BAFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFF
%AFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFA8AFA8
%FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8AF5A61A9AF84A95A855A
%5B36AFA8AFA8FF29282FFFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8
%FFA8AFA8FFA8AFA8FFA8AFA8FF5A5B36615A5B84FFA8AFA8FFA8AFA8FFA8
%AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8
%FFA8AFA8FFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAF85
%5BFD0485615B615B6185FFAFFF7E53A1CFAFFFAFFFAFFFAFFFAFFFAFFFAF
%FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFF59612F615B615BFFAFFFAF
%FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAF
%FFAFFFAFFFAFFFAFFFAFFFAFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAF
%A8FFAFAFA8FF845B36615A5B36615A8584AFAFAFA82952C9A8FFAFAFA8FF
%AFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAF5329365A
%36303685A8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FF
%AFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFFFAFFFAFFFAFFFAFFFAF
%FFAFFFAFFFAFFFAFFFAFFFAFFFAFAF5B615B615B857EC3AFFFAFFFA89A01
%9A9AC3A8FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAF
%FFAFFF2929017E5B615A615AFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAF
%FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFA8FF
%A8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8615A8584FFA8AF
%9BBCA8A89ABC4C2893BC94BCA1FFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8FF
%A8AFA8FFA8AFA8FFA8AFA8280184A8AF845A0153A8AFA8FFA8AFA8FFA8AF
%A8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FF
%A8AFA8FFA8AFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAF
%FFAFFFAFFFAFFFAFFF9ABC9ABCBC4D28BCBCBC9ABCBCC39BCAA7AF85AF85
%AF85AF85AF85FFAFFFAFFFAFFFAFFFAFFFAFFF2853AFFFAFFF842928FFAF
%FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAF
%FFAFFFAFFFAFFFAFFFAFFFAFFFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAF
%A8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FF9BC39ABC289A93BC94AFA8C4
%A1CAA8AF848584AF848584AF848584FFAFAFA8FFAFAFA8FFAFAFA8534CCA
%A8FFAFAF0129A8AFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FF
%AFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFFFAFFFAFFFAFFFAF
%FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFBD94
%BC9ABC94BCAFFFAFFFAFFFA9AF85AF84AF85AF84AF85AFA9FFAFFFAFFFAF
%FFAFFFAFCA7D9A9ACAA1CA282906AFAFFFAFFFAFFFAFFFAFFF842F7EFFAF
%FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAF
%A8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AF
%A8FFA8AFA8CA94BC93BC94BC9AFFA8AFA8FFA8AF84AF848584AF848584AF
%84AFA8FFA8AFA8FFA8AFA8CA94BC9AC49A70222801A9A8FFA8AFA8FFA8AF
%A8FFA87E5277A8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FF
%A8AFA8FFA8AFA8FFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAF
%FFAFFFAFFFAFFFAFFFAFFFAFFFA1BC9ABCBCBC9AC3AFFFAFFFAFFFAFFF85
%AF85AF85AF85AF85AF85FFAFFFAFFFAFFFAFFFA8BCCAFFFFA8284D53FFAF
%FFAFFFAFFFAFFFAFFFAFFFA8C9A1FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAF
%FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFAFAFA8FFAFAFA8FFAFAFA8FFAFAF
%A8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8BC94BC93BC94BCA1FF
%AFAFA8FFAFAFA8AF848584AF848584AF848584855A855A8584AFA1C39BFF
%A853A9FF9ABCA1AFA8FFAFAFA8FFAFAFA8FFA9AFA1CA84AFA8FFAFAFA8FF
%AFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFFFAFFFAFFFAF
%FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFCA94
%BC9ABC94BC9ACAAFFFAFFFAFFFAFFFA9AF85AF84AF85AF84AF85AF5A615B
%615B615BA194CAFF29017EFFC3A1FFAFFFAFFFAFAFAFFFAFFFAF855B615A
%615BAFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAF
%FFAFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AF
%A8FFA8AFA8FF9BBC93BC94BC93BCA8AFA8FFA8AFA8FFA8AF84AF848584AF
%848584AF848536615A5B36615A9BA1FFA853A8FF9AC3A8FFA8AFA8FF53AF
%A8FFA8A936615A5B3661A8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FF
%A8AFA8FFA8AFA8FFA8AFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAF
%FFAFFFAFFFAFFFAFFFAFFFAFFFAFBD9ABCBCBC9ABCBCFFAFFFAFFFAFFFAF
%FF537E85AF85AF85AF85AF85AF85615B615B615B6177BDCAFFFFFFC3BC9A
%FFAFFFAFFFAF7EA8FFAFFF85615B615B615BFFAFFFAFFFAFFFAFFFAFFFAF
%FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFA8FFAFAFA8FFAFAFA8FFAFAF
%A8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FF9ABC93BC94BC93BD
%AFAFA8FFAFAFA885282806AF848584AF848584AF84855A615A5B36615A9B
%76BCA1C39ABCA1A9A8FFAFAFA8FF847EA8CF84615A615A5B3685AFAFA8FF
%AFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFFFAFFFAF
%FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAF
%FFC9C39ABC9ABCA1FFAFFFAFFFAF7E062906295AAF84A87EAF85A97EA885
%AF5B615B615B615B6177BC9B9B9A85AFFFAFFFAFFFAFFF2853535A5B615B
%615B6185FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAF
%FFAFFFAFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AF
%A8FFA8AFA8FFA8AFA8CAA0C9A0C3A1A8A8FFA8AFA8A9303029302F545A7E
%28285A85532822855A6136615A5B36615A5A53615A5A3685A8AFA8FFA8AF
%A8A860855A61845B36615AA9A8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FF
%A8AFA8FFA8AFA8FFA8AFA8FFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAF
%FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAEC9C9C9C3FFAFFFAFFFAFAF5B
%615B615B615B615B615B615B615B615B615B615B615B615B615B615B615B
%615B85AFFFAFFFAFFFAFFFAFFFAFAF5B615B61A9FFAFFFAFFFAFFFAFFFAF
%FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFAFAFA8FFAFAFA8FFAFAF
%A8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFA0CAA1C9
%AFAFA8FFAFA936615A5B36615A5B36615A5B36615A5B36615A5B36615A5B
%36615A5B36615A5B36615A61A8FFAFAFA8FFAFAFA8FF845B36615AA9A8FF
%AFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFFFAF
%FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAF
%FFAFFFA8C9A8CAA7FFAFFFAFAF5B615B615B615B615B615B615B615B615B
%615B615B615B615B615B615B615B615B615B615B85AFFFAFFFAFFFAFFFAF
%A9777E777EA8FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAF
%FFAFFFAFFFAFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AF
%A8FFA8AFA8FFA8AFA8FFA8CAA0FFA1CAA8FFA8AF5A615A5B36615A5B3661
%5A5B36615A5B36615A5B36615A5B36615A5B36615A5B36615A5B36615A85
%A8FFA8AFA8FFA8AFA8BC94BC93FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FF
%A8AFA8FFA8AFA8FFA8AFA8FFA8AFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAF
%FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFC9CAAFC9A8FFAFFF85615B
%615B615B615B615B615B615B615B615B615B615B615B615B615B615B615B
%615B615B615B615BFFAFFFAFFFAFFFAFCBBCC39ABCAFFFAFFFAFFFAFFFAF
%FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFA8FFAFAFA8FFAFAF
%A8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFC9A8FF
%A0CFA8FFA95B36615A5B36615A5B36615A5B36615A5B36615A5B36615A5B
%36615A5B36615A5B36615A5B36615A5B5AFFAFAFA8FFAFAFA8BC9ABC93FF
%AFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAF
%FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAF
%FFAFFFAFFFC3FFAFC9AFFFAF855B615B615B615B615B615B615B615B615B
%615B615B615B615B615B615B615B615B615B615B615B615B61A9FFAFFFAF
%FFAFCA94C39AC3AFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAF
%FFAFFFAFFFAFFFAFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AF
%A8FFA8AFA8FFA8AFA8FFA8AFA8CAA8AFA1FFA8AF36615A5B36615A5B3661
%5A5B36615A5B36615A5B36615A5B36615A5B36615A5B36615A5B36615A5B
%36615A85A8FFA8AFA8FFA1BC9BBC9AAFA8FFA8AFA8FFA8AFA8FFA8AFA8FF
%A8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFFFAFFFAFFFAFFFAFFFAFFFAFFFAF
%FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAF7E29A9AF537EFF85615B
%615B615B615B615B615B615B615B615B615B615B615B615B615B615B615B
%615B615B615B615B615B615BFFAFFFAFFFAFCA9AC3BCC3AFFFAFFFAFFFAF
%FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFAFAFA8FFAFAF
%A8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8AF84A984AF84A984AF
%84A984AF846136615A5B36615A5B36615A5B36615A5B36615A5B36615A5B
%36615A5B36615A5B36615A5B36615A5B36615A5B84FFAFAFA8FFA8BC94BC
%A1AFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAF
%A8FFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFA9
%AF85AF85AF85AF85AF85AF85AF5B615B615B615B615B5A2F2F2829012928
%2F2F5B5B615B615B615B615B615B615B615B615B615B615B615B615B85AF
%FFAFFFAFFFA1BC94CAAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAF
%FFAFFFAFFFAFFFAFFFAFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AF
%A8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AF84615A5B36615A5B2F29
%012801280128012801280129305B36615A5B36615A5B36615A5B36615A5B
%36615A5B36615AAFA8FFA8AFA8FF9ABCA1FFA8AFA8FFA8AFA8FFA8AFA8FF
%A8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFFFAFFFAFFFAFFFAFFFAFFFAF
%FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFFFFFAFFFAFFFAFFFAFFFAFAF5B
%615B615B5A2829062901290629012906290129062929615B615B615B615B
%615B615B615B615B615B615B615B61AFFFAFFFAFFFAFFF9AC3AFFFAFFFAF
%FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFA8FFAFAF
%A8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFFFA8FFAFAFA8FF
%AFAFA8FFAFAF5A615A5B3630012801290128012901280129012801290128
%015A5A5B36615A5B36615A5B36615A5B36615A5B36615AAFA8FFAFAFA8FF
%AFBC93CAAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAF
%A8FFAFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAF
%FFFFFFAFFFAFFFAFFFAFFFAFFFAF855B615B2F0129062901290629012906
%290129062901290629065B5B615B615B615B615B615B615B615B615B615B
%61A9FFAFFFAFFFAFFF9BC49AFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAF
%FFAFFFAFFFAFFFAFFFAFFFAFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AF
%A8FFA8AFA8FFA8AFA8FFA8FFA8FFA8AFA8FFA8AFA8FF5A5B363001280128
%01280128012801284C9A93BC947022280128015A5A5B36615A5B36615A5B
%36615A5B36615A5B3685A8AFA8FFA8AFA8C3A8C452FFA8AFA8FFA8AFA8FF
%A8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFFFAFFFAFFFAFFFAFFFAF
%FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFD05FFAFFFAFFFAFFFAFFFAF615B
%5B06290129062901290629014D9ABC9ABCBCBC9ABC7029012929615B615B
%615B615A5A365B365A365B365A365B7EFFAFFFAFFFAFA953A8A853A9FFAF
%FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFAFAFA8FF
%AFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFFFFFAFFFA8FFAFFF
%A8FFAFFFA8FF5A5B06290128012901280129014C93BC94BC93BC94BC93BC
%702801292F5B36615A5B292901280129012801290128015494BC93BC94BC
%709A949A94BC94BC93BC9AAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FF
%AFAFA8FFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFD10
%FF853029012906290129062901299ABC94BC9AC39AC39ABC94BC4C290129
%5A615B612F290129062901290629012906292FCAA8CAFD07A8CAA8CAA8CA
%A8FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFA8FFA8AFA8
%FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8
%AFA8FFA8AF5A29012801280128012801284CBC94BC9AFD04FFC394BC939A
%012801305A5B36290128012801280128012801280129A8AFA8A9A8FFA8AF
%A8AF84A9A8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FF
%A8AFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFFFFFAF
%FFFFFFAFFFAFFFAFFFAFFFAF8506290129292F01290629019ABCBC9AFFFF
%FFA8FFFFC39ABCBC29012929615B61062901290629012906290129062901
%A9A9AFAFFFAFFFAFFFAFFFAFAFA9AFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAF
%FFAFFFAFFFAFFFAFFFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAF
%A8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAF2F290128015A5A540129
%012870BC94BDFFFF5329A8FFA1BC93BC28280129365B3629012801290128
%01290128012901282FAFA9AFA8FFAFAFA8FFAFAF84AFA9AFA8FFAFAFA8FF
%AFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFFFAFFFAFFFAFFFAFFFAFFFAF
%FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAF8401
%2906297DC94C290129069A94BCBCFFA95328A9FFCA9ABC944D0629015A5B
%6101290629012906290129062901290629A9AFA9AFAFFFAFFFA9AFA9AFAF
%FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFA8AFA8FF
%A8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFFFAFA8FFA8FFA8FFA8AF
%A8FFA8AFA8FFAF280128017DA0280128012870BC939B7EFFA8FFFFFF9ABC
%94BC0128012829615A28012801280128012801280128012806A9A8AFA8A9
%A8AF84A9A8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FF
%A8AFA8FFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFFFFFAF
%FFAFFFFFFFAFFFAFFFAFFFAFFFAFFF292906769AC9944D012906709A7E5B
%85FD04FFC3BCBCBC94290629015A5B610129062901290629012906290129
%296185FFAFFFA9AFA9AFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFF
%AFFFAFFFAFFFAFFFAFFFAFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8
%FFAFAFA8FFAFAFA8FFAFFFA8FFAFAFA8FFAFAFA8FFAF5A014C94BC93BC70
%280129019A5A6177BC5AA29ABC93BC944C012901282F615A290129012801
%29012801290128065B5A61A8AF84A9A8FFA8A9A8FFAFAFA8FFAFAFA8FFAF
%AFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFFFAFFFAFFFAFFFAFFFAFFF
%AFFFAFFFAFFFAFFFAFFFAFFFFFFFAFFFAFFFFFFFAFFFAFFFAFFFAFFFFFFF
%AF2928BC9ABC94BC062901294C615B615A619ABC9ABC947606290129065A
%5B613029012906290129062901292F615B615B85A9FFAFFFAFFFAFAF85AF
%AFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFA8FFA8
%AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFAFFFA8FFAFFFA8FFAFFFA8
%FFAFFFA8FFAFFFA8FF537093BC94BC93280128015A5A5B36615ABC93BC94
%700128012801282F5B36613029062907290629072929615A5B36615AAFA8
%FFA8AFA8FFA8AF84AFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8
%AFA8FFA8AFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFF
%AFFFAFFFFFFFAFFFAFFFAFFFAFFFFFFFAFFF70BCBCBC9ABC9A764C5A5B61
%5A7E77BC9ABC704D012906290129065A5B615B615B615B615B615B615B61
%5B615B615B61A9FFAFFFAFFFAFFFA9AFA9FFAFFFAFFFAFFFAFFFAFFFAFFF
%AFFFAFFFAFFFAFFFAFFFAFFFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8
%FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFFFA8FFAF9B93BC94
%BC93BC947E36615A290129012801290128012901280129605B36615A5B36
%615A5B36615A5B36615A5B36615A8584FFAFAFA8AF84AFA8FFAFAFA8FFAF
%AFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFFFAFFFAFFFAFFFAFFF
%AFFFAFFFAFFFAFFFAFFFAFFFFFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFF
%AFFFAFFF9BBC94BC9ABC4C545B615A290629012906290129062901290629
%2F855B615B615B615B615B615B615B615B615B615B615BAF85AFAFAFA9FF
%AFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFA8
%AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8FFA8FFA8AFA8FFA8FFA8
%FFA8AFA8FFA8FFA8FFA8AFA87D70BC93BC94BC9A7E5A2901280128012801
%2801280128012801845A615A5B36615A5B36615A5B36615A5B36615A5B36
%6184AF84A9A8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8
%AFA8FFA8AFA8FFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFFFFF
%AFFFAFFFAFFFFFFFAFFFAFFFAFFFFFFFAFFFAFFF8429012930615A7EA17D
%0129062901290629012906290129065A85855B615B615B615B615B615B61
%5B615B615B615B615B85A9FFAFAF85AFAFFFAFFFAFFFAFFFAFFFAFFFAFFF
%AFFFAFFFAFFFAFFFAFFFAFFFAFFFAFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8
%FFAFAFA8FFFFFFA8AF297EA8FFAFFFA8FFAFAFA8FFAFFFA8FFAFAFA8A801
%2829615A5B36300128012901280129012801290128012F84855A615A5B36
%615A5B36615A5B36615A5B36615A5B366184AFA8FFAFAFA8AFA8AFA8FFAF
%AFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFFFAFFFAFFFAFFF
%AFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFF7777A1FFAFFFFFFFAFFFAFFFAFFF
%FFFFAFFFAFFFA829065A365A5B612929062901290629012906290129062F
%84AF85855B615B615B615B615B615B615B615B615B615B615BAFAFFFAFFF
%AFFFAFAF85AFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFF
%AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8FFA8FFA877A0FFA8AFA8
%FFA8AFA8FFA8AFA8FFA8AFA8FFA8AF01285A29015B5A2901280128012801
%28012801280153848584AF5A5B36615A5B36615A5B36615A5B36615A5B5A
%8584AFA8FFA8AFA8FFA8AF84AFA8AFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8
%AFA8FFA8AFA8FFA8AFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFD04FF
%CAC3C9C4FD0BFFAFFFAFFFAFFFAF2906FF28545B5B282906290129062901
%290629067E85AF85AF85855B615B615B615B615B615B615B615B6161FFAF
%AFA9AFAFFFAFFFAFAFA9FFAFFFAFFFAFFFAFFFAFFFA8CAA8FFAFFFAFFFAF
%FFAFFFAFFFAFFFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFFFAFBC
%94BC9ABC76A8AFFFAFFFAFFFAFFFAFFFAFAFA8FFAFAF2829AF5306847E28
%01290128012901280129015A84AF848584AF605B36615A5B36615A5B3661
%5A5B36615A85A8FFAFAFA8AF84AF84AFA9AFA8FFAFAFA8FFAFAFA8FFAFCA
%9AC3AFAFA8FFAFAFA8FFAFAFA8FFAFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAF
%FFAFFFAFFFFFC394BC9ABC94292FFFAF84A9FFAFFFFFFFAFFFAFFFAFFFAF
%5301FF59297EA906290129062901290629012954AF84AF85AF84855B615B
%615B615B615B615B615B615B6161FFAFFFAFFFA9AFA9AFA9FFAFFFAFFFAF
%FFAFFFAFFFAFFFA8C9A1FFAFFFAFFFAFFFAFFFAFFFAFFFAFA8AFA8FFA8AF
%A8FFA8AFA8FFA8AFA8FFA8AFAFCA94BC934C704C012828530153A8AFA8FF
%A8AFA8FFA8AFA8FF2829A88401847E2801280128012801280128015A8485
%84AF84855A615A5B36615A5B36615A5B36615A5B3685A8AFA8AF84AFA8FF
%A8A984AFA8AFA8FFA8AFA8FFA8AFA8AFA1C984AFA8AFA8FFA8AFA8FFA8AF
%A8FFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFBCBC9A770629297E84
%7E01297EFFAFFFFFFFAFFFAFFFAFFFA92953FF842984A906290129062901
%290629012954AF85AF85AF85855B615B615B615B615B615B615B615B6161
%FFA9AFAFFFAFFFAFFFAFFFA9AFA9FFAFFFAFFFAFFFA9855BA87D615B85AF
%FFAFFFAFFFAFFFAFFFAFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFFFA8BC
%9ABC94292FAFA8FFAF842829A8A9AFFFAFAFA8FFAFAFA88401A8A8FF017E
%7E2901280129012801290128015A848584AF84855A615A5B36615A5B3661
%5A5B36615A5B368584A9A8FFAFAFA8FFAFAFA8FFA9A984FFAFAFA8FFA961
%36615A5B36615AAFA8FFAFAFA8FFAFAFA8FFFFAFFFAFFFAFFFAFFFAFFFAF
%FFAFFFAFFFFFFF9ABC9A4C28FFAFFF85FFAFAF012929FFAFFFAFFFAFFFAF
%FF5353FFFFAF2959A80129062901290629012906292FAF85AF84AF85855B
%615B615B615B615B615B615B615B615BFFA9AFA9FFAFFFAFFFAFFFA9AFA9
%FFAFFFAFFFAF855B615B615B615B61A9FFAFFFAFFFAFFFAFFFAFA8FFA8AF
%A8FFA8AFA8FFA8AFA8FFA8AFA8FFA8AF93700153A8FF605B5AFFA82F015A
%AFAFA8FFA8AFA8FFA82953FFA8AF287E7E28012801280128012801280129
%84AF848584AF5A5B36615A5B36615A5B36615A5B36615A85A8FFA8AF84AF
%A8A8A2A87EA8A8CAA8C97D7E5A5A547E5A5A36615A5B36AFA8AFA8FFA8AF
%A8FFA8AFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFC49A4D59FFAF
%615B61AFFF5353FFFFAFFFAFFFAFFFAFAF01FFFFFFAF5359A90129062901
%29062901290629018585AF85AF85855B615B615B615B615B615B615B615B
%6161FFAFFFAFFFA9AF9ABCBCBC9ABCBCBC9ABCBCBC9ABCBCBC77615B615B
%61A9FFAFFFAFFFAFFFAFFFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFFFAFFF
%AFAFA87EA053A8FFA96184FFAF2929FFAFAFA8FFAFAFA8FF7E53A8FFAFAF
%537E7E28012901280128284C0129012806AF848584AF605B36615A5B3661
%5A5B36615A5B36615A85A8FFAFAFA8AF84BCA1CACACAA8CACACAA8CA9ABC
%93BC947D36615A5B36A9AFAFA8FFAFAFA8FFAFAFFFAFFFAFFFAFFFAFFFAF
%FFAFFFAFFD07FF5B5428A9AFFFAFFFAFA8062953FFAFFFAFFFAFFFAF537E
%FFAFFFAF7E53A906290129289A94BC9ABC4C2906292FAF85AF84855B615B
%615B615B615B615B615B615B6185FFAFFFA9AFA9FF9ABD9AC3BDC39AC3BD
%C39AC3BDC39ABC77615B615B6185FFAFFFAFFFAFFFAFFFAFA8AFA8FFA8AF
%A8FFA8AFA8FFA8AFA8FFA8AFA8FFA85A0128017EA8FFA85A065353A8A8FF
%A8AF84AFA8AF5A7E84AF84AF847E5A5A532F019A94BC9ABC94BC22280128
%298584855A615A5B36615A5B36615A5B36615A5B36FFA8A984AFA8AFA8BC
%9AC3A1CAA1C3A1CAA1C3A1CAA1C39A7E5A5B36615AAFA8FFA8AFA8FFA8AF
%A8FFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFFFFFAFFFAFFF5A54302F012F29
%290153AFFFAFFFAFFFAFAF85AF85AF85AF85AF85AF85AF85AF7E4DBCBCCA
%FFFFC39A9A06290129062F5A615B615B615B615B615B615B615B615B85AF
%AFA9FFAFFFAFFFBCCAFD0AFFCABC9AC37D5B365B5AFFAFFFAFFFAFFFAFFF
%AFFFAFAFAFA8FFAFAFA8FFAFAFA8FFAFAFAFFFAFAFA8FFAF8536615A2901
%54532828FFAFAFA8FFAFAF84A97E8484858484848584847E845A5A4CBC9A
%FF28A8CABC932901280129012801290129295A365B36615A5B36615A5BA8
%FFAFAF84AFA9AFA8BC9AC4A1CAA1C4A1CAA1C4A1CAA1C3937001280153AF
%AFA8FFAFAFA8FFAFAFA8FFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFF
%AFFF61615B612F30A9FF7EA8FFFFAFFFAFFFAFFF7E7EAFFFAFFFFFFFAFFF
%AFA80129067094C3FF53A8CA9ABC01290629012906290129062901290629
%858561615B85AFFFAFFFAFFFA9AFA9AF94C3BDC39AC3BDC39AC3BDC39AC3
%BCBC4C29062953FFAFFFAFFFAFFFAFFFAFFFAFA8FFA8AFA8FFA8AFA8FFA8
%AFA8FFAFAFA8FFA8AFA8AFA1A884A7A1AFA8FFA8FFA8FFA8AFA8FFA88453
%FFA8AFA8FFA8AFA8FF7E28012828BC93CAFFFF9ABC702801280128012801
%2801280128012801AFA8FFA8AFA8FFA8AFA8FFA8AFA8AF84BC93BC94BC93
%BC94BC93BC94BC93BC94702F28015AA8FFA8AFA8FFA8AFA8FFA8AFFFAFFF
%AFFFAFFFAFFFAFFFAFFFFFFFAFFFAFFFAFFFAFC9A7FFC3CAAFFD05FFAFFF
%AFFFAFFF847EAFFFAFFFFFFFAFFFAFA90129062970BCBCBC9ABCBC4D0129
%0629012906290129062901290629AFFFAFFFAFFFAFFFAFFFAFFFAFFFA9AF
%A9AFA9FFAFFFAFFFAFFFAFFFAFFFAF53017E06297EFFAFFFAFFFAFFFAFFF
%AFFFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFA0CAA8C9A7
%AFA8FFFFFFA8FFAFAFA8FFAF8453FFAFAFA8FFAFAFA8FF7E280129012870
%BC94BC944C0128012901280129012801290128012901AFA8FFAFAFA8FFAF
%AFA8FFA9A984FFAFAFA8AF84A9A8FFAFAFA8FFAFAFA8FF29287E290184A8
%FFAFAFA8FFAFAFA8FFAFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFF
%AFFFAFC9A8FFC3CFAFFFAFFFAFFFAFFFAFFFAFFF847EAFFFAFFFAFFFAFFF
%AFA9062901290629224D2829012906290129062901290629012906290129
%AFFFAFFFAFFFAFFFAFAF85AFAFFFAFFFAFFFAFFFAFAFA9FFAFFFAFFFAFFF
%AF5306A8012984FFAFFFAFFFAFFFAFFFAFFFAFA8AFA8FFA8AFA8FFA8AFA8
%FFFFAFA8FFA8AFA8FFA8AFA0CFA8C3A8FFA8FFA8FFA8AFA8FFA8AFA8A801
%280128012801280128012801280128012801280128012801280128012801
%2801280128012801FFA8AFA8FFA8AFA8AF84A9A8FFA8AFA8FFA8AFA8AFA8
%A984AFA8AFA8FFA8AF2828A82801FFA8AFA8FFA8AFA8FFA8AFA8FFFFAFFF
%AFFFAFFFAFFFAFFFFFFFAFFFAFFFAFFFAFFFA8C9AEFFC3FFAFFFFFFFAFFF
%AFFFAFFFAFFF847EAFFFAFFFAFFFAFFFAFA9062901290629012906290129
%06290129062901290629012906290129AFFFAFFFAFFFAFFFAFFFAFAFA9AF
%AFFFAFFFAFAFA9AFAFFFAFFFAFFFAFFFAF5306FF2929AFFFAFFFAFFFAFFF
%AFFFAFFFAFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFAFA8FFAFCFA0FFAF
%C9A8FFAFFFA8FFAFAFA8FFAFAFA8A853AFA8FFAFFFA8FFAFAF7E29012801
%290128012901280129012801290128012901280129012801FFAFAFA8FFAF
%AFA8FFAFAFA8FFA8A9A8FFA8A9A8FFAFAFA8FFAFAFA8FFAFAF2929AF5301
%FFAFAFA8FFAFAFA8FFAFAFA8FFFFAFFFAFFFAFFFAFFFAFFFFFFFAFFFAFFF
%AFFFAFFFA8C9AFFFC3FFAFFFFFFFAFFFAFFFAFFFAFFF7E7EAFFFAFFFFFFF
%AFFFAFA80129062901290629012906290129062901290629012906290129
%0629AFFFAFFFAFFFAFFFAFFFAF53012906290129062901FFAFFFAFFFAFFF
%AFFFAF5301FF5329AFFFAFFFAFFFAFFFAFFFAFFFAFA8FFA8AFA8FFA8AFA8
%FFAFFFA8FFA8AFA8FFA8AFA8CFA1AFA8C9A8AFA8FFA8AFA8FFA8AFA8FFA8
%8453FFA8AFA8FFA8AFA8FF7E280128012801280128012801280128012801
%28012801280128012801AFA8FFA8AFA8FFA8AFA8FF292801FF0128537E01
%28A8FFA8AFA8FFA8AFA8FF5328A87E01AFA8FFA8AFA8FFA8AFA8FFA8AFCA
%A1CAA1CAA1CAA1CAA1FFA1CAA1CAA1CAA1CAA1CAA15377CA2853A1FFA1CA
%A1CAA1CAA1CAA1CA7777A1CAA1CACACAA1CAA1A101532953285329532853
%295328532953285329532853295328532953A1CAA1CAA1CAA1CAA1CAA177
%2853535328534D5328CAA1CAA1CAA1CAA1CAA17728CA7729A1CAA1CAA1CA
%A1CAA1CAA1CAA193BC94BC93BC94BC93BC94BC93BC94BC93BC94BC93BC94
%BC93BC94BC93BC94BC93BC94BC93BC949422704C704C704C704C704C2893
%BC94BC93BC94BC93BC94BC93BC94BC93BC94BC93BC94BC93BC94BC93BC94
%BC93BC94BC93BC94BC93BC94BC93BC94BC93BC94BC93BC94BC93BC704C93
%9A01BC93BC94BC93BC94BC93BC94BCBC94BC9ABC94BC9ABC94BC9ABC94BC
%9ABC94BC9ABC94BC9ABC94BC9ABC94BC9ABC94BC9ABC94BC704C709A709A
%709A709A709A06BC94BC9ABC94BC9ABC94BC9ABC94BC9ABC94BC9ABC94BC
%9ABC94BC9ABC94BC9ABC94BC9ABC94BC9ABC94BC9ABC94BC9ABC94BC9ABC
%94BC9ABC949A28BC94299ABC94BC9ABC94BC9ABC94BC9A94BC93BC94BC93
%BC94BC93BC94BC93BC94BC93BC94BC93BC94BC93BC94BC93BC94BC93BC94
%BC939A4CBC93BC94BC93BC94BC932894BC93BC94BC93BC94BC93BC94BC93
%BC94BC93BC94BC93BC94BC93BC94BC93BC94BC93BC94BC93BC94BC93BC94
%BC93BC94BC93BC94BC93BC94BC934C94BC01BC94BC93BC94BC93BC94BC93
%BCBC9ABCBCBC9ABCBCBC9ABCBCBC9ABCBCBC9ABCBCBC9ABCBCBC9ABCBCBC
%9ABCBCBC9ABCBCBC9ABC70709ABCBCBC9ABCBCBC9ABC06BC9ABCBCBC9ABC
%BCBC9ABCBCBC9ABCBCBC9ABCBCBC9ABCBCBC9ABCBCBC9ABCBCBC9ABCBCBC
%9ABCBCBC9ABCBCBC9ABCBCBC9ABCBCBC9ABCBCBC944D28BC4C4DBCBC9ABC
%BCBC9ABCBCBC9ABCBC94BC93BC94BC93BC94BC93BC94BC93BC94BC93BC94
%BC93BC94BC93BC94BC93BC94BC93BC94BC939A4CBC93BC94BC93BC94BC93
%2994BC93BC94BC93BC94BC93BC94BC93BC94BC93BC94BC93BC94BC93BC94
%BC93BC94BC93BC94BC93BC94BC93BC94BC93BC94BC93BC94BC93BC94BC93
%BC94BC93BC94BC93BC94BC93BC94BC93BCBC9ABC94BC9ABC94BC9ABC94BC
%9ABC94BC9ABC94BC9ABC94BC9ABC94BC9ABC94BC9ABC94BC9ABC70779ABC
%94BC9ABC94BC9ABC01BC9ABC94BC9ABC94BC9ABC94BC9ABC94BC9ABC94BC
%9ABC94BC9ABC94BC9ABC94BC9ABC94BC9ABC94BC9ABC94BC9ABC94BC9ABC
%94BC9ABC94BC9ABC94BC9ABC94BC9ABC94BC9ABC94BC9ABC9493BC94BC93
%BC94BC93BC94BC93BC94BC93BC94BC93BC94BC93BC94BC93BC94BC93BC94
%BC93BC94944CBC94BC93BC94BC93BC942893BC94BC93BC94BC93BC94BC93
%BC94BC93BC94BC93BC94BC93BC94BC93BC94BC93BC94BC93BC94BC93BC94
%BC93BC94BC93BC94BC93BC94BC93BC94BC93BC94BC93BC94BC93BC94BC93
%BC94FD04BC9ABCBCBC9ABCBCBC9ABCBCBC9ABCBCBC9ABCBCBC9ABCBCBC9A
%BCBCBC9ABCBCBC9ABCBCBC949ABCBC9ABCBCBC9ABCBCBC4CBCBCBC9ABCBC
%BC9ABCBCBC9ABCBCBC9ABCBCBC9ABCBCBC9ABCBCBC9ABCBCBC9ABCBCBC9A
%BCBCBC9ABCBCBC9ABCBCBC9ABCBCBC9ABCBCBC9ABCBCBC9ABCBCBC9ABCBC
%BC9ABCBCBC9ABCBCBC9A93BC94BC93BC94BC93BC94BC93BC94BC93BC94BC
%93BC94BC93BC94BC93BC94BC93BC94BC93BC94BC93BC94BC93BC94BC93BC
%94BC93BC94BC93BC94BC93BC94BC93BC94BC93BC94BC93BC94BC93BC94BC
%93BC94BC93BC94BC93BC94BC93BC94BC93BC94BC93BC94BC93BC94BC93BC
%94BC93BC94BC93BC94BC93BC94BC93BC94BCBC94BC9ABC94BC9ABC94BC9A
%BC94BC9ABC94BC9ABC94BC9ABC94BC9ABC94BC9ABC94BC9ABC94BC9ABC94
%BC9ABC94BC9ABC94BC9ABC94BC9ABC94BC9ABC94BC9ABC94BC9ABC94BC9A
%BC94BC9ABC94BC9ABC94BC9ABC94BC9ABC94BC9ABC94BC9ABC94BC9ABC94
%BC9ABC94BC9ABC94BC9ABC94BC9ABC94BC9ABC94BC9ABC94BC9A94BC93BC
%94BC93BC94BC93BC94BC93BC94BC93BC94BC93BC94BC93BC94BC93BC94BC
%93BC94BC93BC94BC93BC94BC93BC94BC93BC94BC93BC94BC93BC94BC93BC
%94BC93BC94BC93BC94BC93BC94BC93BC94BC93BC94BC93BC94BC93BC94BC
%93BC94BC93BC94BC93BC94BC93BC94BC93BC94BC93BC94BC93BC94BC93BC
%94BC93BCBC9ABCBCBC9ABCBCBC9ABCBCBC9ABCBCBC9ABCBCBC9ABCBCBC9A
%BCBCBC9ABCBCBC9ABCBCBC9ABCBCBC9ABCBCBC9ABCBCBC9ABCBCBC9ABCBC
%BC9ABCBCBC9ABCBCBC9ABCBCBC9ABCBCBC9ABCBCBC9ABCBCBC9ABCBCBC9A
%BCBCBC9ABCBCBC9ABCBCBC9ABCBCBC9ABCBCBC9ABCBCBC9ABCBCBC9ABCBC
%BC9ABCBCBC9ABCBCBC9ABCBC94BC93BC94BC93BC94BC93BC94BC93BC94BC
%93BC94BC93BC94BC93BC94BC93BC94BC93BC94BC93BC94BC93BC94BC93BC
%94BC93BC94BC93BC94BC93BC94BC93BC94BC93BC94BC93BC94BC93BC94BC
%93BC94BC93BC94BC93BC94BC93BC94BC93BC94BC93BC94BC93BC94BC93BC
%94BC93BC94BC93BC94BC93BC94BC93BC94BC93BCBC9ABC94BC9ABC94BC9A
%BC94BC9ABC94BC9ABC94BC9ABC94BC9ABC94BC9ABC94BC9ABC94BC9ABC94
%BC9ABC94BC9ABC94BC9ABC94BC9ABC94BC9ABC94BC9ABC94BC9ABC94BC9A
%BC94BC9ABC94BC9ABC94BC9ABC94BC9ABC94BC9ABC94BC9ABC94BC9ABC94
%BC9ABC94BC9ABC94BC9ABC94BC9ABC94BC9ABC94BC9ABC94BC9ABC94A8CA
%A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CA
%A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CA
%A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CA
%A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CA
%A8CAA8CAA8CA
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 14 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c143 79.161210, 2017/08/11-10:28:36        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">15.03.2018</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:CreatorTool>Adobe Illustrator CC 22.0 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2018-03-20T16:18:38+03:00</xmp:CreateDate>
         <xmp:ModifyDate>2018-03-20T16:18:39+03:00</xmp:ModifyDate>
         <xmp:MetadataDate>2018-03-20T16:18:39+03:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>172</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+IMWElDQ19QUk9GSUxFAAEBAAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJ&#xA;AAYAMQAAYWNzcE1TRlQAAAAASUVDIHNSR0IAAAAAAAAAAAAAAAAAAPbWAAEAAAAA0y1IUCAgAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAz&#xA;ZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUYmtwdAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwA&#xA;AAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABwZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAA&#xA;A9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwAAAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RS&#xA;QwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAAAABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0dC1Q&#xA;YWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAAEnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAS&#xA;c1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#xA;AAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAAARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVogAAAA&#xA;AAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAAt4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9kZXNj&#xA;AAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3dy5p&#xA;ZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAALFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBp&#xA;biBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAACxSZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4g&#xA;SUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDP&#xA;FAAD7cwABBMLAANcngAAAAFYWVogAAAAAABMCVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAA&#xA;AAAAAAAAAAAAAAKPAAAAAnNpZyAAAAAAQ1JUIGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMA&#xA;KAAtADIANwA7AEAARQBKAE8AVABZAF4AYwBoAG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCy&#xA;ALcAvADBAMYAywDQANUA2wDgAOUA6wDwAPYA+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIB&#xA;WQFgAWcBbgF1AXwBgwGLAZIBmgGhAakBsQG5AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4&#xA;AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYCwQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oD&#xA;ZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQGBBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATT&#xA;BOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYFpgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowG&#xA;nQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeGB5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiq&#xA;CL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJzwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsL&#xA;Igs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxcDHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakNww3e&#xA;DfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EPXg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDXEPUR&#xA;ExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKjEsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSL&#xA;FK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkWbBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUY&#xA;ihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzM&#xA;HPUdHh1HHXAdmR3DHeweFh5AHmoelB6+HukfEx8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFIIXUh&#xA;oSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPwJB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3&#xA;JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgpaymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDks&#xA;biyiLNctDC1BLXYtqy3hLhYuTC6CLrcu7i8kL1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJj&#xA;Mpsy1DMNM0YzfzO4M/E0KzRlNJ402DUTNU01hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5&#xA;BTlCOX85vDn5OjY6dDqyOu87LTtrO6o76DwnPGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/i&#xA;QCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpDfUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVH&#xA;e0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsMS1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9J&#xA;T5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNTX1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX&#xA;4FgvWH1Yy1kaWWlZuFoHWlZaplr1W0VblVvlXDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2Cq&#xA;YPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZOllPWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFq&#xA;SGqfavdrT2una/9sV2yvbQhtYG25bhJua27Ebx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQU&#xA;dHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+&#xA;wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZ&#xA;if6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6PNo+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSV&#xA;X5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrVm0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFH&#xA;obaiJqKWowajdqPmpFakx6U4pammGqaLpv2nbqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1Erbiu&#xA;La6hrxavi7AAsHWw6rFgsdayS7LCszizrrQltJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6tbsu&#xA;u6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJ&#xA;Osm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+40DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc&#xA;1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hzeot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3m&#xA;lucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe&#xA;9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9uv5L/tz/bf///+4ADkFkb2JlAGTAAAAAAf/bAIQA&#xA;BgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoKDBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8f&#xA;Hx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f&#xA;Hx8fHx8fHx8fHx8fHx8f/8AAEQgArAEAAwERAAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQF&#xA;AwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAAAQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMB&#xA;AgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPBUtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdU&#xA;ZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eX&#xA;p7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZqbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUE&#xA;BQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEyobHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PS&#xA;NeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG&#xA;1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/a&#xA;AAwDAQACEQMRAD8A9PX5IKU98lFpypVHPq66nMsgt10po0FvIGb6wZiSXUqfh48RtTfDSkwENr4k&#xA;H5r8wR6D5ev9Tdh6lvBI9vGfiMkqoWRFTlGXJI+yGFctxYzOQAarQnl7ztpGpaLZ31zeQWlxPGGm&#xA;t5ZEidH6NVGcldxUAnpkRAnkOpb9RhOKfCe4H5gH9KcWmqafeMy2l5Dcsgq4ikVyAfHiTgMSOYaE&#xA;sm81PHrH6K/Rt48xlWNJ1QGAo3ElzJWgopZuPWinLBi2u9qXpfmyOzJ9cb9jlJZ4+anMT6r7/tH9&#xA;eIYy5rOR8cKEPDqEE13Pao1ZLcKX3FPirsKGu1N9sJiQLpb80N5i1qDRdCv9VuZBHFZwSTEtWlUU&#xA;kDap3IwAE7AWWzFASkATQ6nuHU/Bry3rY1rQ7PVEUol3GJE3qCp6MtOzdRgF9RRZajHGEzGMuMd6&#xA;d2JJlO/7P8Rgkxxc0skZvUfc9T+vK3cxGyjcXcNtEZbiZYYhSskjBVFdhuSBipoJXoXmBb6FFuJF&#xA;S7ckogqgcGrARhmLMUSnMjauRjK27Nh8M0SCnHJvE4WqkLJeXEt9Fb293Bwt+RvbZlLTkOv7viwY&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:OriginalDocumentID>uuid:65E6390686CF11DBA6E2D887CEACB407</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:0041f977-0ec8-5344-9d48-7d3ded63133b</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:0041f977-0ec8-5344-9d48-7d3ded63133b</xmpMM:InstanceID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:bc17805c-247b-c448-acb9-8dfb787c0f11</stRef:instanceID>
            <stRef:documentID>xmp.did:bc17805c-247b-c448-acb9-8dfb787c0f11</stRef:documentID>
            <stRef:originalDocumentID>uuid:65E6390686CF11DBA6E2D887CEACB407</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:beeb34af-6e49-cd49-8a92-f0b31cfe2d4a</stEvt:instanceID>
                  <stEvt:when>2018-02-19T12:37:06+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2017 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0041f977-0ec8-5344-9d48-7d3ded63133b</stEvt:instanceID>
                  <stEvt:when>2018-03-20T16:18:39+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Web</illustrator:StartupProfile>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>1064.375970</stDim:w>
            <stDim:h>1001.661097</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=255 B=255</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=22 G=29 B=114</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>22</xmpG:red>
                           <xmpG:green>29</xmpG:green>
                           <xmpG:blue>114</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=80 G=171 B=239</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>80</xmpG:red>
                           <xmpG:green>171</xmpG:green>
                           <xmpG:blue>239</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=166 G=223 B=237</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>166</xmpG:red>
                           <xmpG:green>223</xmpG:green>
                           <xmpG:blue>237</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=241 G=88 B=99</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>241</xmpG:red>
                           <xmpG:green>88</xmpG:green>
                           <xmpG:blue>99</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=222 G=244 B=244</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>222</xmpG:red>
                           <xmpG:green>244</xmpG:green>
                           <xmpG:blue>244</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=249 G=178 B=144</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>249</xmpG:red>
                           <xmpG:green>178</xmpG:green>
                           <xmpG:blue>144</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=199 G=228 B=239</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>199</xmpG:red>
                           <xmpG:green>228</xmpG:green>
                           <xmpG:blue>239</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=177 G=219 B=242</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>177</xmpG:red>
                           <xmpG:green>219</xmpG:green>
                           <xmpG:blue>242</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Color Group 1</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=52 G=60 B=82</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>52</xmpG:red>
                           <xmpG:green>60</xmpG:green>
                           <xmpG:blue>82</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=229 G=213 B=211</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>229</xmpG:red>
                           <xmpG:green>213</xmpG:green>
                           <xmpG:blue>211</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=224 G=114 B=112</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>224</xmpG:red>
                           <xmpG:green>114</xmpG:green>
                           <xmpG:blue>112</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=66 G=110 B=165</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>66</xmpG:red>
                           <xmpG:green>110</xmpG:green>
                           <xmpG:blue>165</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=248 G=245 B=232</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>248</xmpG:red>
                           <xmpG:green>245</xmpG:green>
                           <xmpG:blue>232</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Color Group 2</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=249 G=171 B=170</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>249</xmpG:red>
                           <xmpG:green>171</xmpG:green>
                           <xmpG:blue>170</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=23 G=54 B=75</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>23</xmpG:red>
                           <xmpG:green>54</xmpG:green>
                           <xmpG:blue>75</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=51 G=98 B=124 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>51</xmpG:red>
                           <xmpG:green>98</xmpG:green>
                           <xmpG:blue>124</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=179 B=197</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>179</xmpG:green>
                           <xmpG:blue>197</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=243 G=108 B=129</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>243</xmpG:red>
                           <xmpG:green>108</xmpG:green>
                           <xmpG:blue>129</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=249 G=178 B=189</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>249</xmpG:red>
                           <xmpG:green>178</xmpG:green>
                           <xmpG:blue>189</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=232 G=81 B=97</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>232</xmpG:red>
                           <xmpG:green>81</xmpG:green>
                           <xmpG:blue>97</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=234 G=117 B=125</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>234</xmpG:red>
                           <xmpG:green>117</xmpG:green>
                           <xmpG:blue>125</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=234 G=106 B=107</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>234</xmpG:red>
                           <xmpG:green>106</xmpG:green>
                           <xmpG:blue>107</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=255 B=255 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=217 B=224 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>217</xmpG:green>
                           <xmpG:blue>224</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Color Group 3</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=179 B=197 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>179</xmpG:green>
                           <xmpG:blue>197</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=255 B=255 2</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Color Group 6</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=212 G=78 B=84</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>212</xmpG:red>
                           <xmpG:green>78</xmpG:green>
                           <xmpG:blue>84</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=254 G=254 B=254</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>254</xmpG:red>
                           <xmpG:green>254</xmpG:green>
                           <xmpG:blue>254</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=255 B=255 3</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1004.7 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1004.7 li
1158 1004.7 li
1158 0 li
cp
clp
1158 1004.7 mo
0 1004.7 li
0 -.00012207 li
1158 -.00012207 li
1158 1004.7 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.110811 0 .0378729 0 cmyk
f
1158 1004.7 mo
0 1004.7 li
0 874.595 li
1158 874.595 li
1158 1004.7 li
cp
0 .806668 .525017 0 cmyk
f
804.574 824.265 mo
862.665 852.382 li
920.497 824.744 li
862.406 796.627 li
804.574 824.265 li
cp
862.651 857.931 mo
793.039 824.235 li
862.42 791.078 li
932.032 824.773 li
862.651 857.931 li
cp
.279759 .0314031 .0117494 0 cmyk
f
803.841 639.873 mo
861.932 667.99 li
919.764 640.352 li
861.673 612.235 li
803.841 639.873 li
cp
861.918 673.539 mo
792.306 639.844 li
861.687 606.686 li
931.299 640.382 li
861.918 673.539 li
cp
f
804.085 701.177 mo
862.176 729.293 li
920.009 701.655 li
861.918 673.539 li
804.085 701.177 li
cp
862.162 734.842 mo
792.55 701.147 li
861.932 667.99 li
931.544 701.684 li
862.162 734.842 li
cp
f
804.33 762.479 mo
862.421 790.597 li
920.253 762.959 li
862.162 734.842 li
804.33 762.479 li
cp
862.407 796.145 mo
792.795 762.45 li
862.176 729.293 li
931.788 762.988 li
862.407 796.145 li
cp
f
803.345 515.612 mo
861.436 543.729 li
919.268 516.092 li
861.178 487.974 li
803.345 515.612 li
cp
861.422 549.278 mo
791.81 515.583 li
861.191 482.426 li
930.803 516.121 li
861.422 549.278 li
cp
f
803.59 576.916 mo
861.681 605.033 li
919.513 577.395 li
861.422 549.278 li
803.59 576.916 li
cp
861.667 610.582 mo
792.055 576.887 li
861.436 543.729 li
931.048 577.425 li
861.667 610.582 li
cp
f
947.189 490.049 mo
775.322 490.049 li
775.322 481.571 li
947.189 481.571 li
947.189 490.049 li
cp
0 .806668 .525017 0 cmyk
f
904.515 874.595 mo
817.997 874.595 li
817.997 851.737 li
904.515 851.737 li
904.515 874.595 li
cp
1 .98233 .233127 .159335 cmyk
f
849.702 864.82 mo
849.702 867.171 847.796 869.076 845.445 869.076 cv
843.095 869.076 841.189 867.171 841.189 864.82 cv
841.189 862.47 843.095 860.563 845.445 860.563 cv
847.796 860.563 849.702 862.47 849.702 864.82 cv
cp
0 0 0 0 cmyk
f
881.958 864.82 mo
881.958 867.171 880.052 869.076 877.701 869.076 cv
875.351 869.076 873.445 867.171 873.445 864.82 cv
873.445 862.47 875.351 860.563 877.701 860.563 cv
880.052 860.563 881.958 862.47 881.958 864.82 cv
cp
f
794.404 320.188 mo
789.381 318.091 li
788.068 317.548 787.042 316.481 786.55 315.149 cv
785.009 310.975 li
784.909 310.705 785.225 310.473 785.452 310.648 cv
789.711 313.93 li
790.153 314.271 790.751 314.335 791.256 314.096 cv
791.256 314.096 li
792.39 313.558 793.716 313.618 794.796 314.256 cv
796.552 315.292 li
794.404 320.188 li
cp
.000946059 .356146 .41947 0 cmyk
f
854.74 252.323 mo
854.74 252.323 li
852.458 240.527 li
850.362 240.932 li
847.938 241.401 846.352 243.748 846.82 246.173 cv
846.998 247.091 li
847.691 250.674 851.157 253.016 854.74 252.323 cv
cp
1 .9823 .233127 .159335 cmyk
f
878.014 340.797 mo
873.103 409.746 li
868.641 475.706 li
863.521 475.706 li
859.109 409.745 li
860.22 359.932 li
857.451 359.932 li
852.914 407.619 li
891.971 466.98 li
888.454 470.696 li
842.057 413.994 li
839.815 411.255 838.643 407.797 838.755 404.26 cv
840.773 340.797 li
878.014 340.797 li
cp
0 .806668 .525017 0 cmyk
f
853.954 481.416 mo
858.738 481.416 li
863.522 479.872 li
863.522 475.706 li
858.738 478.02 li
853.954 479.149 li
853.954 481.416 li
cp
1 .9823 .233127 .159335 cmyk
f
865.011 481.416 mo
868.639 481.416 li
868.639 475.706 li
863.522 475.706 li
863.522 479.872 li
865.011 481.416 li
cp
f
886.023 481.571 mo
889.313 478.097 li
891.48 473.56 li
888.454 470.696 li
886.847 475.763 li
884.378 480.013 li
886.023 481.571 li
cp
f
893.624 473.541 mo
896.118 470.905 li
891.971 466.98 li
888.454 470.696 li
891.48 473.56 li
893.624 473.541 li
cp
f
878.014 346.872 mo
840.773 346.872 li
840.773 313.965 li
834.686 280.585 li
832.653 275.388 836.486 269.774 842.066 269.774 cv
880.291 269.774 li
885.871 269.774 889.703 275.388 887.671 280.585 cv
878.014 313.965 li
878.014 346.872 li
cp
.604822 .202914 0 0 cmyk
f
857.869 262.761 mo
862.062 261.95 li
863.91 261.593 865.119 259.804 864.762 257.955 cv
862.392 245.702 li
848.871 248.317 li
850.732 257.937 li
851.371 261.24 854.566 263.4 857.869 262.761 cv
cp
.000946059 .356146 .41947 0 cmyk
f
855.385 256.021 mo
861.828 257.494 li
865.19 269.854 li
857.201 272.603 li
853.953 269.854 li
855.385 256.021 li
cp
f
863.568 255.249 mo
863.952 255.176 li
864.835 255.004 865.413 254.149 865.242 253.266 cv
863.712 245.353 li
861.729 245.736 li
863.568 255.249 li
cp
1 .9823 .233127 .159335 cmyk
f
854.674 247.437 mo
863.774 245.678 li
863.021 241.786 li
862.538 239.284 860.117 237.648 857.615 238.133 cv
853.045 239.016 li
850.72 239.467 849.199 241.717 849.648 244.042 cv
849.648 244.042 li
850.099 246.367 852.349 247.888 854.674 247.437 cv
cp
f
862.684 249.682 mo
862.684 249.682 li
860.574 238.774 li
858.591 239.158 li
860.316 248.082 li
860.528 249.178 861.589 249.893 862.684 249.682 cv
cp
f
864.001 250.025 mo
864.13 250.691 863.694 251.336 863.028 251.465 cv
862.362 251.594 861.719 251.158 861.59 250.492 cv
861.461 249.826 861.896 249.182 862.563 249.053 cv
863.229 248.924 863.872 249.359 864.001 250.025 cv
cp
.000946059 .356146 .41947 0 cmyk
f
794.404 320.188 mo
826.725 324.716 li
830.188 324.716 833.186 322.309 833.935 318.929 cv
848.316 277.641 li
834.44 275.529 li
822.624 312.221 li
796.552 315.292 li
794.404 320.188 li
cp
.604822 .202914 0 0 cmyk
f
789.905 314.462 mo
822.372 314.462 li
823.268 314.462 823.994 313.735 823.994 312.839 cv
823.994 312.21 li
823.994 311.314 823.268 310.588 822.372 310.588 cv
789.905 310.588 li
789.009 310.588 788.283 311.314 788.283 312.21 cv
788.283 312.839 li
788.283 313.735 789.009 314.462 789.905 314.462 cv
cp
1 .98233 .233127 .159335 cmyk
f
791.747 313.019 mo
781.408 279.748 li
781.24 279.207 780.666 278.905 780.126 279.073 cv
780.126 279.073 li
779.586 279.241 779.284 279.815 779.452 280.355 cv
789.791 313.627 li
789.959 314.167 790.532 314.47 791.073 314.302 cv
791.073 314.302 li
791.613 314.134 791.915 313.559 791.747 313.019 cv
cp
f
866.263 317.223 mo
887.688 279.051 li
876.792 272.935 li
859.328 304.05 li
818.141 303.923 li
818.85 309.223 li
866.263 317.223 li
cp
.604822 .202914 0 0 cmyk
f
818.141 303.923 mo
812.732 304.55 li
811.32 304.708 810.04 305.449 809.198 306.594 cv
806.563 310.179 li
806.392 310.41 806.631 310.721 806.898 310.615 cv
811.898 308.64 li
812.419 308.433 813.01 308.537 813.43 308.907 cv
813.43 308.907 li
814.37 309.737 815.661 310.047 816.875 309.733 cv
818.85 309.223 li
818.141 303.923 li
cp
.000946059 .356146 .41947 0 cmyk
f
411.127 874.595 mo
406.127 874.595 li
406.127 424.503 li
411.127 424.503 li
411.127 874.595 li
cp
.0313115 .0104677 .00860609 0 cmyk
f
268.531 842.302 mo
263.531 842.302 li
263.531 424.503 li
268.531 424.503 li
268.531 842.302 li
cp
f
98.6016 876.223 mo
93.9063 874.502 li
265.212 407.318 li
417.127 407.318 li
416.001 410.624 li
257.495 876.168 li
252.763 874.557 li
410.143 412.318 li
268.704 412.318 li
98.6016 876.223 li
cp
0 0 0 0 cmyk
f
389.029 493.164 mo
237.368 493.164 li
237.368 488.164 li
389.029 488.164 li
389.029 493.164 li
cp
f
359.461 578 mo
207.8 578 li
207.8 573 li
359.461 573 li
359.461 578 li
cp
f
325.668 662.835 mo
174.007 662.835 li
174.007 657.835 li
325.668 657.835 li
325.668 662.835 li
cp
f
297.507 747.671 mo
145.846 747.671 li
145.846 742.671 li
297.507 742.671 li
297.507 747.671 li
cp
f
416.771 424.503 mo
252.809 424.503 li
250.763 424.503 249.104 422.845 249.104 420.798 cv
249.104 409.533 li
249.104 407.487 250.763 405.828 252.809 405.828 cv
416.771 405.828 li
418.816 405.828 420.476 407.487 420.476 409.533 cv
420.476 420.798 li
420.476 422.845 418.816 424.503 416.771 424.503 cv
cp
.279759 .0314031 .0117494 0 cmyk
f
998.481 768.155 mo
1045.98 768.155 li
1046.08 768.155 1046.16 768.088 1046.17 767.994 cv
1057.91 706.438 li
1059.79 696.58 1052.24 687.444 1042.2 687.444 cv
1008.5 687.444 li
999.184 687.444 991.866 695.437 992.688 704.723 cv
998.284 767.974 li
998.293 768.076 998.379 768.155 998.481 768.155 cv
cp
.604822 .202914 0 0 cmyk
f
1045.94 768.155 mo
1038.75 837.841 li
1039.7 907.526 li
1034.29 907.526 li
1024.94 837.84 li
1022.36 785.213 li
1018.41 785.213 li
1011.41 837.841 li
1010.57 907.526 li
1005.17 907.526 li
997.591 837.841 li
998.508 768.155 li
1045.94 768.155 li
cp
1 .98233 .233127 .159335 cmyk
f
1018.84 679.687 mo
1023.88 679.687 li
1026.11 679.687 1027.92 677.883 1027.92 675.657 cv
1027.92 660.908 li
1011.64 660.908 li
1011.64 672.488 li
1011.64 676.464 1014.86 679.687 1018.84 679.687 cv
cp
.000946059 .356146 .41947 0 cmyk
f
1009.57 656.461 mo
1024.05 658.403 li
1027.1 658.822 1028.65 660.459 1028.65 662.994 cv
1028.65 662.994 li
1028.65 668.81 li
1028.65 670.266 1027.47 671.445 1026.01 671.445 cv
1023.32 671.445 li
1023.32 665.531 li
1023.32 664.13 1022.19 662.994 1020.79 662.994 cv
1011.68 662.994 li
1009.57 656.461 li
cp
0 .806668 .525017 0 cmyk
f
1022.52 668.08 mo
1022.52 668.923 1023.2 669.606 1024.04 669.606 cv
1024.88 669.606 1025.57 668.923 1025.57 668.08 cv
1025.57 667.237 1024.88 666.555 1024.04 666.555 cv
1023.2 666.555 1022.52 667.237 1022.52 668.08 cv
cp
.000946059 .356146 .41947 0 cmyk
f
1024.18 913.558 mo
1029.23 913.558 li
1034.29 911.929 li
1034.29 907.526 li
1029.23 909.972 li
1024.18 911.164 li
1024.18 913.558 li
cp
1 .9823 .233127 .159335 cmyk
f
1035.86 913.558 mo
1039.69 913.558 li
1039.69 907.526 li
1034.29 907.526 li
1034.29 911.929 li
1035.86 913.558 li
cp
f
995.057 913.558 mo
1000.11 913.558 li
1005.17 911.929 li
1005.17 907.526 li
1000.11 909.972 li
995.057 911.164 li
995.057 913.558 li
cp
f
1006.74 913.558 mo
1010.57 913.558 li
1010.57 907.526 li
1005.17 907.526 li
1005.17 911.929 li
1006.74 913.558 li
cp
f
1020.02 671.93 mo
1026.11 671.93 li
1030.65 687.445 li
1030.65 690.461 1028.21 692.905 1025.19 692.905 cv
1020.61 692.905 li
1017.59 692.905 1015.15 690.461 1015.15 687.445 cv
1020.02 671.93 li
cp
.000946059 .356146 .41947 0 cmyk
f
981.877 731.963 mo
943.765 722.181 li
941.931 716.551 li
975.69 716.929 li
995.768 693.842 li
1008.56 703.73 li
981.877 731.963 li
cp
.604822 .202914 0 0 cmyk
f
860.614 794.408 mo
1007 794.408 li
1007 722.154 li
860.614 722.154 li
860.614 794.408 li
cp
0 .806668 .525017 0 cmyk
ef
1010.89 757.453 mo
1006.61 756.813 li
1005.1 756.59 1003.58 757.003 1002.39 757.953 cv
998.683 760.932 li
998.442 761.124 998.604 761.511 998.91 761.474 cv
1004.62 760.81 li
1005.21 760.741 1005.8 761.011 1006.13 761.509 cv
1006.13 761.509 li
1006.87 762.625 1008.12 763.3 1009.46 763.31 cv
1011.64 763.326 li
1010.89 757.453 li
cp
.000946059 .356146 .41947 0 cmyk
f
1011.58 763.326 mo
1051.55 758.982 li
1057.53 758.845 1062.17 753.713 1061.71 747.745 cv
1058.12 701.741 li
1042.92 698.16 li
1046.23 744.307 li
1046.31 744.935 1045.89 745.518 1045.28 745.653 cv
1010.89 757.453 li
1011.58 763.326 li
cp
.604822 .202914 0 0 cmyk
f
941.931 716.551 mo
937.605 716.719 li
936.088 716.778 934.664 717.469 933.678 718.623 cv
930.587 722.24 li
930.387 722.474 930.617 722.823 930.911 722.731 cv
936.397 721.016 li
936.968 720.837 937.591 720.994 938.009 721.422 cv
938.009 721.422 li
938.947 722.38 940.3 722.81 941.619 722.57 cv
943.765 722.181 li
941.931 716.551 li
cp
.000946059 .356146 .41947 0 cmyk
f
992.625 775.045 mo
874.993 775.045 li
874.993 780.229 li
992.625 780.229 li
992.625 775.045 li
cp
0 0 0 0 cmyk
f
972.776 762.141 mo
874.993 762.141 li
874.993 767.325 li
972.776 767.325 li
972.776 762.141 li
cp
f
992.625 749.236 mo
874.993 749.236 li
874.993 754.421 li
992.625 754.421 li
992.625 749.236 li
cp
f
959.313 736.332 mo
874.993 736.332 li
874.993 741.516 li
959.313 741.516 li
959.313 736.332 li
cp
f
270.474 720.109 mo
274.07 717.003 li
248.614 699.365 li
241.354 666.57 li
231.211 671.541 li
237.623 705.608 li
270.474 720.109 li
cp
0 .806668 .525017 0 cmyk
f
192.31 727.646 mo
199.574 798.11 li
198.619 868.574 li
204.088 868.574 li
212.615 798.109 li
214.29 744.893 li
218.286 744.893 li
227.226 798.11 li
228.067 868.574 li
233.535 868.574 li
240.267 798.11 li
240.267 727.646 li
192.31 727.646 li
cp
.000946059 .356146 .41947 0 cmyk
f
243.757 874.682 mo
238.646 874.682 li
231.206 872.276 li
233.535 868.582 li
243.757 873.499 li
243.757 874.682 li
cp
1 .98233 .233127 .159335 cmyk
f
231.945 874.682 mo
228.069 874.682 li
228.069 868.582 li
233.535 868.582 li
231.206 872.276 li
231.945 874.682 li
cp
f
214.31 874.682 mo
209.198 874.682 li
201.758 872.276 li
204.088 868.582 li
214.31 873.499 li
214.31 874.682 li
cp
f
202.498 874.682 mo
198.622 874.682 li
198.622 868.582 li
204.088 868.582 li
201.758 872.276 li
202.498 874.682 li
cp
f
184.589 727.646 mo
254.001 727.646 li
241.285 666.232 li
240.283 661.395 236.022 657.926 231.082 657.926 cv
204.264 657.926 li
199.116 657.926 194.738 661.682 193.956 666.769 cv
184.589 727.646 li
cp
0 .806668 .525017 0 cmyk
f
194.602 787.285 mo
243.988 787.285 li
248.238 727.646 li
190.352 727.646 li
194.602 787.285 li
cp
.604822 .202914 0 0 cmyk
f
274.07 717.003 mo
276.972 718.913 li
277.99 719.584 278.682 720.649 278.881 721.851 cv
279.503 725.619 li
279.544 725.863 279.24 726.008 279.076 725.822 cv
276.02 722.367 li
275.701 722.007 275.208 721.856 274.743 721.976 cv
274.743 721.976 li
273.701 722.246 272.593 721.98 271.786 721.267 cv
270.474 720.109 li
274.07 717.003 li
cp
.000946059 .356146 .41947 0 cmyk
f
208.095 644.697 mo
208.095 647.151 210.176 649.141 212.743 649.141 cv
215.312 649.141 217.393 647.151 217.393 644.697 cv
217.393 642.244 215.312 640.255 212.743 640.255 cv
210.176 640.255 208.095 642.244 208.095 644.697 cv
cp
1 .98233 .233127 .159335 cmyk
f
212.743 643.224 mo
218.519 643.224 li
218.519 636.521 li
212.743 636.521 li
212.743 643.224 li
cp
f
214.339 640.137 mo
214.339 640.85 214.917 641.429 215.631 641.429 cv
216.345 641.429 216.924 640.85 216.924 640.137 cv
216.924 639.423 216.345 638.845 215.631 638.845 cv
214.917 638.845 214.339 639.423 214.339 640.137 cv
cp
.000946059 .356146 .41947 0 cmyk
f
216.686 642.237 mo
221.917 642.237 li
226.104 657.926 li
226.104 664.206 li
226.104 665.657 224.457 666.494 223.285 665.64 cv
212.79 657.926 li
216.686 642.237 li
cp
f
223.147 648.208 mo
218.873 648.208 li
216.988 648.208 215.46 646.68 215.46 644.795 cv
215.46 632.302 li
229.245 632.302 li
229.245 642.11 li
229.245 645.478 226.516 648.208 223.147 648.208 cv
cp
f
212.743 636.521 mo
225.979 636.521 li
228.248 636.521 230.087 634.682 230.087 632.414 cv
230.087 632.414 li
230.087 630.145 228.248 628.306 225.979 628.306 cv
220.959 628.306 li
216.422 628.306 212.743 631.984 212.743 636.521 cv
212.743 636.521 li
cp
1 .98233 .233127 .159335 cmyk
f
288.983 726.58 mo
288.983 749.027 270.786 767.224 248.338 767.224 cv
225.89 767.224 207.692 749.027 207.692 726.58 cv
207.692 704.132 225.89 685.934 248.338 685.934 cv
270.786 685.934 288.983 704.132 288.983 726.58 cv
cp
.110811 0 .0378729 0 cmyk
f
263.066 726.58 mo
263.066 734.714 256.473 741.308 248.338 741.308 cv
240.203 741.308 233.609 734.714 233.609 726.58 cv
233.609 718.445 240.203 711.85 248.338 711.85 cv
256.473 711.85 263.066 718.445 263.066 726.58 cv
cp
.604822 .202914 0 0 cmyk
f
287.671 752.125 mo
291.311 753.76 295.035 755.264 298.837 756.633 cv
300.959 753.093 302.689 749.315 304.005 745.401 cv
300.494 743.403 296.931 741.553 293.323 739.851 cv
294.228 736.786 294.81 733.626 295.073 730.438 cv
285.618 729.657 li
285.232 734.017 284.139 738.275 282.327 742.226 cv
280.499 746.166 277.981 749.79 274.917 752.891 cv
281.655 759.57 li
283.905 757.301 285.935 754.808 287.671 752.125 cv
cp
1 .98233 .233127 .159335 cmyk
f
262.044 771.425 mo
263.793 775.037 265.685 778.587 267.714 782.052 cv
271.61 780.688 275.357 778.914 278.878 776.772 cv
277.488 773.012 275.931 769.275 274.257 765.646 cv
276.92 763.878 279.402 761.839 281.655 759.57 cv
274.917 752.891 li
268.781 759.095 260.454 763.082 251.792 763.82 cv
252.655 773.268 li
255.837 772.978 258.989 772.359 262.044 771.425 cv
cp
f
230.012 769.744 mo
229.026 773.641 228.199 777.562 227.523 781.528 cv
231.386 782.989 235.402 784.038 239.473 784.655 cv
240.825 780.877 242.028 777.035 243.083 773.164 cv
246.26 773.52 249.473 773.558 252.655 773.268 cv
251.792 763.82 li
249.628 764.016 247.443 764.026 245.26 763.859 cv
243.079 763.667 240.926 763.298 238.822 762.749 cv
234.611 761.667 230.613 759.817 227.044 757.327 cv
221.634 765.121 li
224.259 766.943 227.07 768.496 230.012 769.744 cv
cp
f
206.554 747.864 mo
203.319 750.205 200.155 752.685 197.069 755.3 cv
199.091 758.893 201.49 762.268 204.21 765.361 cv
207.699 763.319 211.059 761.187 214.364 758.892 cv
216.568 761.208 219.008 763.299 221.634 765.121 cv
227.044 757.327 li
223.479 754.842 220.306 751.749 217.804 748.176 cv
215.289 744.614 213.4 740.626 212.242 736.44 cv
203.091 738.941 li
203.928 742.025 205.099 745.018 206.554 747.864 cv
cp
f
202.648 716.026 mo
198.666 715.742 194.649 715.609 190.605 715.63 cv
189.839 719.682 189.5 723.789 189.592 727.912 cv
193.577 728.596 197.562 729.124 201.536 729.497 cv
201.729 732.687 202.251 735.857 203.091 738.941 cv
212.242 736.44 li
211.104 732.246 210.723 727.866 211.058 723.502 cv
211.443 719.141 212.537 714.884 214.349 710.932 cv
205.73 706.965 li
204.396 709.869 203.362 712.91 202.648 716.026 cv
cp
f
220.124 689.133 mo
217.238 686.327 214.274 683.672 211.168 681.086 cv
207.978 683.69 205.058 686.627 202.474 689.84 cv
205.089 692.925 207.803 695.891 210.61 698.73 cv
208.709 701.3 207.063 704.059 205.73 706.965 cv
214.349 710.932 li
216.177 706.994 218.694 703.369 221.759 700.267 cv
224.813 697.154 228.45 694.623 232.375 692.756 cv
228.316 684.181 li
225.427 685.548 222.678 687.21 220.124 689.133 cv
cp
f
250.794 679.765 mo
250.389 675.772 249.832 671.785 249.117 667.836 cv
245.001 667.778 240.866 668.153 236.817 668.962 cv
236.833 672.984 237.006 676.988 237.339 680.993 cv
234.232 681.743 231.205 682.813 228.316 684.181 cv
232.375 692.756 li
236.304 690.885 240.552 689.716 244.883 689.34 cv
247.048 689.143 249.232 689.133 251.416 689.3 cv
253.597 689.493 255.75 689.862 257.854 690.41 cv
260.253 681.231 li
257.162 680.423 253.986 679.933 250.794 679.765 cv
cp
f
280.313 692.293 mo
282.56 688.987 284.709 685.557 286.696 682.076 cv
283.574 679.386 280.169 677.02 276.55 675.036 cv
273.979 678.122 271.53 681.312 269.214 684.59 cv
266.353 683.166 263.345 682.039 260.253 681.231 cv
257.854 690.41 li
266.276 692.558 273.837 697.857 278.872 704.983 cv
286.614 699.5 li
284.765 696.892 282.649 694.474 280.313 692.293 cv
cp
f
294.891 720.865 mo
298.729 719.779 302.547 718.538 306.339 717.142 cv
305.682 713.065 304.595 709.056 303.082 705.216 cv
299.107 705.942 295.186 706.815 291.328 707.831 cv
290.055 704.899 288.462 702.107 286.614 699.5 cv
278.872 704.983 li
281.387 708.545 283.275 712.533 284.434 716.72 cv
285.572 720.914 285.952 725.294 285.618 729.657 cv
295.073 730.438 li
295.336 727.251 295.28 724.038 294.891 720.865 cv
cp
f
199.346 736.807 mo
202.94 733.764 li
183.735 702.866 li
183.44 702.474 183.51 701.919 183.891 701.61 cv
211.745 671.87 li
196.879 660.939 li
170.193 696.502 li
167.807 698.875 167.799 702.735 170.177 705.117 cv
199.346 736.807 li
cp
0 .806668 .525017 0 cmyk
f
202.942 733.699 mo
205.844 735.61 li
206.861 736.281 207.554 737.346 207.752 738.549 cv
208.375 742.316 li
208.415 742.559 208.111 742.704 207.947 742.519 cv
204.891 739.064 li
204.573 738.704 204.08 738.554 203.615 738.674 cv
203.615 738.674 li
202.572 738.943 201.465 738.678 200.657 737.965 cv
199.346 736.807 li
202.942 733.699 li
cp
.000946059 .356146 .41947 0 cmyk
f
789.919 478.167 mo
789.919 478.623 789.919 479.089 789.908 479.545 cv
789.897 480.922 li
789.836 486.028 789.587 491.104 789.173 496.117 cv
787.028 521.784 780.349 546.155 769.918 568.425 cv
754.133 602.129 729.792 631.027 699.682 652.312 cv
699.433 652.478 699.195 652.654 698.946 652.83 cv
664.352 677.067 622.227 691.289 576.786 691.289 cv
562.307 691.289 548.158 689.849 534.485 687.084 cv
507.534 681.667 482.428 671.153 460.199 656.59 cv
455.155 653.307 450.267 649.806 445.543 646.098 cv
444.787 645.517 444.041 644.928 443.306 644.327 cv
442.291 643.509 441.275 642.68 440.281 641.85 cv
439.494 641.198 438.718 640.535 437.94 639.862 cv
437.608 639.583 437.288 639.293 436.956 639.013 cv
436.438 638.567 435.932 638.122 435.434 637.667 cv
434.75 637.076 434.066 636.465 433.394 635.844 cv
431.197 633.845 429.054 631.804 426.94 629.722 cv
426.63 629.411 426.309 629.1 426.009 628.79 cv
425.418 628.199 424.827 627.599 424.247 626.998 cv
423.781 626.532 423.336 626.065 422.88 625.599 cv
422.311 624.999 421.73 624.388 421.161 623.776 cv
420.674 623.259 420.188 622.741 419.711 622.213 cv
418.985 621.426 418.261 620.628 417.546 619.82 cv
416.966 619.178 416.396 618.525 415.837 617.873 cv
414.895 616.796 413.973 615.708 413.051 614.61 cv
412.232 613.637 411.435 612.652 410.638 611.658 cv
409.746 610.55 408.866 609.432 407.996 608.303 cv
407.385 607.525 406.795 606.749 406.204 605.962 cv
406.069 605.775 405.935 605.599 405.8 605.423 cv
405.064 604.438 404.34 603.444 403.625 602.439 cv
403.045 601.642 402.486 600.845 401.927 600.037 cv
401.563 599.518 401.201 599.001 400.85 598.483 cv
400.165 597.499 399.503 596.505 398.851 595.511 cv
398.26 594.63 397.68 593.739 397.11 592.838 cv
397.048 592.734 396.976 592.641 396.913 592.538 cv
396.344 591.657 395.784 590.756 395.235 589.855 cv
394.562 588.757 393.899 587.659 393.246 586.561 cv
392.987 586.126 392.729 585.691 392.48 585.256 cv
390.771 582.314 389.124 579.342 387.561 576.317 cv
387.322 575.861 387.084 575.406 386.855 574.94 cv
384.888 571.107 383.044 567.202 381.325 563.246 cv
381.056 562.635 380.797 562.023 380.537 561.423 cv
380.227 560.698 379.927 559.963 379.626 559.237 cv
379.419 558.74 379.212 558.232 379.005 557.725 cv
378.693 556.959 378.394 556.192 378.093 555.415 cv
377.917 554.97 377.751 554.524 377.586 554.079 cv
377.265 553.251 376.943 552.422 376.643 551.583 cv
376.188 550.34 375.742 549.087 375.307 547.823 cv
375.151 547.367 374.996 546.922 374.841 546.466 cv
373.618 542.861 372.5 539.216 371.475 535.528 cv
371.164 534.42 370.863 533.302 370.563 532.193 cv
370.563 532.173 370.553 532.152 370.553 532.131 cv
370.263 531.013 369.973 529.884 369.703 528.755 cv
369.642 528.516 369.579 528.267 369.527 528.019 cv
369.237 526.828 368.958 525.626 368.698 524.425 cv
368.688 524.404 368.678 524.373 368.678 524.332 cv
368.388 523.048 368.118 521.763 367.859 520.469 cv
365.094 506.796 363.654 492.647 363.654 478.167 cv
363.654 413.006 392.895 354.682 438.977 315.592 cv
453.611 303.162 469.957 292.69 487.596 284.559 cv
514.732 272.026 544.947 265.046 576.786 265.046 cv
694.492 265.046 789.919 360.451 789.919 478.167 cv
cp
.604822 .202914 0 0 cmyk
f
821.342 642.793 mo
698.947 669.02 li
698.947 483.682 li
789.841 496.209 li
835.711 617.378 li
839.508 628.444 832.781 640.342 821.342 642.793 cv
cp
f
713.332 874.595 mo
460.2 874.595 li
460.2 652.317 li
713.332 652.317 li
713.332 874.595 li
cp
1 .98233 .233127 .159335 cmyk
f
789.908 478.167 mo
789.908 731.197 li
789.908 743.481 786.584 755.527 780.275 766.072 cv
772.808 778.553 758.39 785.12 744.064 782.552 cv
721.889 778.574 li
637.763 763.482 li
630.098 762.105 li
599.242 756.563 576.786 729.716 576.786 698.363 cv
576.786 478.167 li
789.908 478.167 li
cp
.604822 .202914 0 0 cmyk
f
789.908 478.167 mo
789.908 731.197 li
789.908 743.481 786.584 755.527 780.275 766.072 cv
772.808 778.553 758.39 785.12 744.064 782.552 cv
721.889 778.574 li
637.763 763.482 li
630.098 762.105 li
599.242 756.563 576.786 729.716 576.786 698.363 cv
576.786 478.167 li
789.908 478.167 li
cp
f
804.67 535.38 mo
765.445 572.679 li
762.966 575.036 759.676 576.351 756.254 576.351 cv
692.231 576.351 li
675.362 576.351 661.688 562.677 661.688 545.807 cv
661.688 508.708 li
661.688 491.839 675.362 478.164 692.231 478.164 cv
789.911 478.164 li
789.841 496.209 li
804.67 535.38 li
cp
1 .98233 .233127 .159335 cmyk
f
637.763 550.63 mo
637.763 763.482 li
630.098 762.105 li
599.242 756.563 576.786 729.716 576.786 698.363 cv
576.786 550.63 li
637.763 550.63 li
cp
.321508 0 .0585641 0 cmyk
f
637.74 551.723 mo
637.763 552.93 637.769 554.132 637.759 555.332 cv
636.996 653.602 522.377 706.529 445.132 645.776 cv
406.085 615.065 378.034 571.002 367.857 520.467 cv
383.09 460.317 438.111 416.026 503.271 417.215 cv
576.608 418.554 636.422 478.386 637.74 551.723 cv
cp
1 .98233 .233127 .159335 cmyk
f
597.911 525.05 mo
597.911 490.499 569.901 462.49 535.351 462.49 cv
500.8 462.49 472.791 490.499 472.791 525.05 cv
472.791 559.6 500.8 587.61 535.351 587.61 cv
569.901 587.61 597.911 559.6 597.911 525.05 cv
cp
0 .806668 .525017 0 cmyk
f
564.682 525.05 mo
564.682 508.85 551.55 495.719 535.351 495.719 cv
519.151 495.719 506.02 508.85 506.02 525.05 cv
506.02 541.249 519.151 554.381 535.351 554.381 cv
551.55 554.381 564.682 541.249 564.682 525.05 cv
cp
0 0 0 0 cmyk
f
546.286 525.05 mo
546.286 519.011 541.391 514.115 535.351 514.115 cv
529.312 514.115 524.416 519.011 524.416 525.05 cv
524.416 531.09 529.312 535.985 535.351 535.985 cv
541.391 535.985 546.286 531.09 546.286 525.05 cv
cp
1 .98233 .233127 .159335 cmyk
f
568.993 777.307 mo
568.993 756.479 552.109 739.597 531.282 739.597 cv
510.455 739.597 493.571 756.479 493.571 777.307 cv
493.571 798.134 510.455 815.017 531.282 815.017 cv
552.109 815.017 568.993 798.134 568.993 777.307 cv
cp
0 .806668 .525017 0 cmyk
f
548.963 777.307 mo
548.963 767.542 541.047 759.626 531.282 759.626 cv
521.518 759.626 513.602 767.542 513.602 777.307 cv
513.602 787.071 521.518 794.987 531.282 794.987 cv
541.047 794.987 548.963 787.071 548.963 777.307 cv
cp
0 0 0 0 cmyk
f
538.985 777.307 mo
538.985 773.053 535.536 769.603 531.282 769.603 cv
527.028 769.603 523.579 773.053 523.579 777.307 cv
523.579 781.56 527.028 785.01 531.282 785.01 cv
535.536 785.01 538.985 781.56 538.985 777.307 cv
cp
1 .98233 .233127 .159335 cmyk
f
487.596 284.559 mo
487.596 320.553 li
438.977 320.553 li
438.977 315.592 li
453.611 303.162 469.957 292.69 487.596 284.559 cv
cp
f
589.821 320.557 mo
487.601 320.557 li
442.934 216.288 li
541.545 216.288 li
589.821 320.557 li
cp
.321508 0 .0585641 0 cmyk
f
524 324.868 mo
506.106 324.868 li
506.106 316.237 li
524 316.237 li
524 324.868 li
cp
0 .806668 .525017 0 cmyk
f
569.056 324.868 mo
551.162 324.868 li
551.162 316.237 li
569.056 316.237 li
569.056 324.868 li
cp
f
569.056 324.868 mo
551.162 324.868 li
551.162 320.553 li
569.056 320.553 li
569.056 324.868 li
cp
1 .98233 .233127 .159335 cmyk
f
524 324.868 mo
506.106 324.868 li
506.106 320.553 li
524 320.553 li
524 324.868 li
cp
f
288.624 205.527 mo
285.247 203.187 li
284.165 202.437 283.444 201.269 283.261 199.966 cv
282.686 195.881 li
282.648 195.617 282.98 195.469 283.152 195.673 cv
286.364 199.482 li
286.698 199.879 287.227 200.055 287.731 199.936 cv
287.731 199.936 li
288.864 199.673 290.054 199.988 290.907 200.778 cv
292.294 202.062 li
288.624 205.527 li
cp
.000946059 .356146 .41947 0 cmyk
f
311.811 232.395 mo
288.624 205.527 li
292.294 202.062 li
316.53 220.727 li
347.357 201.734 li
356.101 209.025 li
322.813 232.331 li
318.79 235.174 314.37 235.243 311.811 232.395 cv
cp
0 .806668 .525017 0 cmyk
f
341.076 299.836 mo
346.884 332.97 li
346.956 333.383 346.983 333.802 346.966 334.221 cv
344.151 400.386 li
349.057 400.386 li
360.052 334.987 li
360.307 333.568 360.467 332.134 360.53 330.693 cv
363.654 300.785 li
341.076 299.836 li
cp
.000946059 .356146 .41947 0 cmyk
f
326.35 334.9 mo
314.053 400.386 li
318.958 400.386 li
339.688 335.182 li
340.214 333.64 340.513 332.029 340.573 330.402 cv
341.832 301.317 li
319.397 300.718 li
326.315 332.52 li
326.485 333.304 326.497 334.113 326.35 334.9 cv
cp
f
373.765 192.509 mo
369.656 191.467 li
367.845 191.007 366.748 189.165 367.208 187.353 cv
370.254 175.346 li
383.504 178.707 li
381.112 188.135 li
380.291 191.372 377.002 193.33 373.765 192.509 cv
cp
f
376.563 187.849 mo
370.003 187.694 li
363.751 198.766 li
374.563 201.509 li
376.563 187.849 li
cp
f
372.021 320.996 mo
377.873 297.926 li
383.904 274.151 387.25 249.775 387.85 225.256 cv
387.85 225.256 388.008 210.24 384.652 206.528 cv
382.689 204.357 380.058 202.902 377.222 202.182 cv
360.9 198.043 li
356.41 196.903 351.646 197.986 348.089 200.954 cv
347.941 201.076 li
345.597 203.03 343.179 208.635 343.179 208.635 cv
329.495 233.321 319.054 259.671 312.113 287.029 cv
307.64 304.664 li
372.021 320.996 li
cp
0 .806668 .525017 0 cmyk
f
379.528 181.94 mo
369.243 179.331 li
376.396 170.803 li
381.993 172.223 li
384.677 172.903 386.3 175.63 385.619 178.313 cv
385.619 178.313 li
384.938 180.997 382.212 182.621 379.528 181.94 cv
cp
1 .98233 .233127 .159335 cmyk
f
344.792 232.903 mo
344.792 232.903 li
350.428 234.333 356.155 230.924 357.584 225.288 cv
368.538 182.11 li
368.538 182.11 li
362.902 180.681 357.175 184.09 355.745 189.725 cv
344.792 232.903 li
cp
f
367.019 186.455 mo
362.309 185.26 li
364.122 178.109 li
365.494 172.702 370.989 169.431 376.396 170.803 cv
376.396 170.803 li
373.388 182.663 li
372.676 185.469 369.824 187.167 367.019 186.455 cv
cp
f
373.193 184.227 mo
372.933 185.255 371.889 185.876 370.862 185.615 cv
369.835 185.354 369.214 184.311 369.475 183.284 cv
369.735 182.258 370.778 181.636 371.806 181.896 cv
372.832 182.157 373.454 183.201 373.193 184.227 cv
cp
.000946059 .356146 .41947 0 cmyk
f
444.727 226.841 mo
410.757 229.742 li
409.838 229.82 408.916 229.655 408.082 229.264 cv
378.672 215.432 li
379.39 202.873 li
411.127 218.317 li
440.958 223.482 li
444.727 226.841 li
cp
0 .806668 .525017 0 cmyk
f
444.727 226.841 mo
448.035 224.405 li
449.095 223.624 449.78 222.435 449.927 221.127 cv
450.385 217.028 li
450.414 216.763 450.079 216.624 449.912 216.833 cv
446.812 220.733 li
446.488 221.14 445.966 221.33 445.457 221.227 cv
445.457 221.227 li
444.317 220.996 443.138 221.345 442.308 222.159 cv
440.958 223.482 li
444.727 226.841 li
cp
.000946059 .356146 .41947 0 cmyk
f
328.265 405.828 mo
323.635 405.828 li
316.894 403.648 li
319.005 400.302 li
328.265 404.756 li
328.265 405.828 li
cp
1 .98233 .233127 .159335 cmyk
f
317.564 405.828 mo
314.053 405.828 li
314.053 400.302 li
319.005 400.302 li
316.894 403.648 li
317.564 405.828 li
cp
f
358.363 405.828 mo
353.733 405.828 li
346.992 403.648 li
349.104 400.302 li
358.363 404.756 li
358.363 405.828 li
cp
f
347.662 405.828 mo
344.151 405.828 li
344.151 400.302 li
349.104 400.302 li
346.992 403.648 li
347.662 405.828 li
cp
f
319.767 190.527 mo
229.646 216.317 li
211.942 154.453 li
302.063 128.663 li
319.767 190.527 li
cp
.604822 .202914 0 0 cmyk
f
234.342 177.488 mo
251.634 164.47 li
252.802 168.552 li
241.809 176.837 li
241.829 176.907 li
255.542 178.124 li
256.71 182.206 li
235.147 180.304 li
234.342 177.488 li
cp
0 0 0 0 cmyk
f
265.134 154.97 mo
269.217 153.802 li
265.378 185.36 li
261.296 186.528 li
265.134 154.97 li
cp
f
277.71 171.779 mo
288.704 163.493 li
288.684 163.423 li
274.971 162.207 li
273.803 158.125 li
295.364 160.025 li
296.17 162.841 li
278.879 175.862 li
277.71 171.779 li
cp
f
433.801 595.949 mo
474.272 594.512 li
474.272 588.523 li
446.114 581.806 li
436.661 550.633 li
417.956 551.87 li
433.801 595.949 li
cp
0 .806668 .525017 0 cmyk
f
473.934 588.815 mo
477.942 587.99 li
479.35 587.7 480.813 588.011 481.98 588.848 cv
485.639 591.468 li
485.875 591.637 485.742 592.011 485.452 591.993 cv
480.026 591.66 li
479.462 591.626 478.926 591.911 478.638 592.398 cv
478.638 592.398 li
477.994 593.491 476.85 594.193 475.584 594.271 cv
473.525 594.4 li
473.934 588.815 li
cp
.000946059 .356146 .41947 0 cmyk
f
421.819 528.471 mo
421.819 528.471 li
421.819 516.034 li
424.028 516.034 li
426.586 516.034 428.658 518.106 428.658 520.663 cv
428.658 521.631 li
428.658 525.408 425.596 528.471 421.819 528.471 cv
cp
.604822 .202914 0 0 cmyk
f
395.422 606.516 mo
401.765 680.78 li
383.775 750.097 li
389.155 750.097 li
414.594 680.779 li
416.982 629.873 li
422.073 629.873 li
432.255 680.78 li
441.231 750.097 li
446.61 750.097 li
445.083 680.78 li
439.48 606.516 li
395.422 606.516 li
cp
1 .98233 .233127 .159335 cmyk
f
399.21 756.097 mo
394.183 756.097 li
389.154 754.475 li
389.154 750.097 li
394.183 752.529 li
399.21 753.715 li
399.21 756.097 li
cp
f
387.591 756.097 mo
383.778 756.097 li
383.778 750.097 li
389.154 750.097 li
389.154 754.475 li
387.591 756.097 li
cp
f
456.665 756.097 mo
451.638 756.097 li
446.61 754.475 li
446.61 750.097 li
451.638 752.529 li
456.665 753.715 li
456.665 756.097 li
cp
f
445.046 756.097 mo
441.233 756.097 li
441.233 750.097 li
446.61 750.097 li
446.61 754.475 li
445.046 756.097 li
cp
f
443.487 602.106 mo
437.087 552.248 li
436.334 547.798 432.479 544.54 427.966 544.54 cv
407.211 544.54 li
402.697 544.54 398.843 547.798 398.09 552.248 cv
391.689 602.106 li
388.979 618.136 446.198 618.136 443.487 602.106 cv
cp
0 .806668 .525017 0 cmyk
f
419.498 529.485 mo
414.353 529.485 li
410.52 544.919 li
423.617 544.919 li
419.498 529.485 li
cp
.000946059 .356146 .41947 0 cmyk
f
420.709 537.843 mo
416.504 537.843 li
414.649 537.843 413.146 536.339 413.146 534.484 cv
413.146 522.195 li
426.707 522.195 li
426.707 531.845 li
426.707 535.157 424.021 537.843 420.709 537.843 cv
cp
f
416.546 550.945 mo
417.592 550.945 li
420.92 550.945 423.617 548.247 423.617 544.919 cv
423.617 544.919 li
410.52 544.919 li
410.52 544.919 li
410.52 548.247 413.218 550.945 416.546 550.945 cv
cp
f
414.321 532.281 mo
413.917 532.281 li
412.985 532.281 412.229 531.526 412.229 530.595 cv
412.229 522.252 li
414.321 522.252 li
414.321 532.281 li
cp
.604822 .202914 0 0 cmyk
f
421.824 522.595 mo
412.229 522.595 li
412.229 518.492 li
412.229 515.854 414.368 513.716 417.006 513.716 cv
421.824 513.716 li
424.276 513.716 426.264 515.703 426.264 518.155 cv
426.264 518.155 li
426.264 520.607 424.276 522.595 421.824 522.595 cv
cp
f
414.125 526.45 mo
414.125 526.45 li
414.125 514.95 li
416.217 514.95 li
416.217 524.358 li
416.217 525.514 415.28 526.45 414.125 526.45 cv
cp
f
412.854 527.057 mo
412.854 527.76 413.423 528.329 414.125 528.329 cv
414.827 528.329 415.396 527.76 415.396 527.057 cv
415.396 526.355 414.827 525.786 414.125 525.786 cv
413.423 525.786 412.854 526.355 412.854 527.057 cv
cp
.000946059 .356146 .41947 0 cmyk
f
461.633 654.138 mo
469.617 645.532 469.161 636.081 464.552 627.79 cv
503.708 583.681 li
512.486 587.281 521.926 586.624 529.529 577.682 cv
534.559 571.768 537.891 563.601 536.167 556.97 cv
532.183 553.432 li
524.634 561.928 li
521.2 565.791 517.699 567.7 514.781 565.107 cv
510.329 561.151 li
507.412 558.56 504.496 555.844 510.359 549.246 cv
517.908 540.748 li
514.069 537.337 li
507.279 536.404 497.689 540.413 492.659 546.254 cv
486.661 553.224 486.331 561.915 488.082 568.926 cv
448.061 614.007 li
440.89 613.095 432.299 614.445 426.085 621.224 cv
420.876 626.906 418.025 636.903 419.751 643.534 cv
423.589 646.943 li
431.139 638.449 li
437.001 631.849 440.043 634.424 442.957 637.015 cv
447.413 640.974 li
450.328 643.564 448.844 647.265 445.411 651.132 cv
437.863 659.627 li
441.848 663.167 li
448.637 664.099 456.354 659.826 461.633 654.138 cv
cp
.604822 .202914 0 0 cmyk
f
465.175 619.382 mo
469.185 620.207 li
470.591 620.497 472.055 620.185 473.223 619.349 cv
476.88 616.729 li
477.116 616.559 476.983 616.186 476.693 616.204 cv
471.268 616.536 li
470.703 616.571 470.167 616.286 469.879 615.799 cv
469.879 615.799 li
469.235 614.706 468.091 614.004 466.825 613.925 cv
464.768 613.797 li
465.175 619.382 li
cp
.000946059 .356146 .41947 0 cmyk
f
411.938 605.209 mo
465.595 620.003 li
465.595 613.431 li
423.238 594.264 li
414.915 550.989 li
397.866 554.368 li
411.938 605.209 li
cp
0 .806668 .525017 0 cmyk
f
690.358 181.325 mo
735.267 197.193 li
742.588 236.546 li
721.306 255.313 li
703.33 259.44 li
691.386 255.221 li
712.67 247.267 li
726.703 230.933 li
718.462 206.729 li
697.44 199.302 li
675.822 212.955 li
676.479 234.479 li
687.803 253.954 li
675.858 249.734 li
664.705 235.313 li
659.938 207.343 li
690.358 181.325 li
cp
1 .98233 .233127 .159335 cmyk
ef
675.356 -.00012207 mo
699.94 -.00012207 li
763.927 76.0985 li
727.66 173.345 li
711.623 167.328 li
744.346 79.5341 li
675.356 -.00012207 li
cp
0 0 0 0 cmyk
f
729.72 102.645 mo
741.193 113.708 759.461 113.373 770.521 101.898 cv
781.583 90.4257 781.248 72.1581 769.774 61.0966 cv
758.301 50.035 740.033 50.37 728.972 61.8436 cv
717.911 73.3182 718.246 91.5848 729.72 102.645 cv
cp
0 .806668 .525017 0 cmyk
f
739.905 92.08 mo
745.544 97.5155 754.521 97.3514 759.955 91.7128 cv
765.391 86.0751 765.227 77.0985 759.588 71.663 cv
753.95 66.2274 744.974 66.3915 739.538 72.0302 cv
734.104 77.6678 734.268 86.6444 739.905 92.08 cv
cp
1 .98233 .233127 .159335 cmyk
f
705.729 208.677 mo
705.729 208.677 li
692.522 203.993 685.613 189.489 690.298 176.282 cv
698.779 152.369 li
746.605 169.333 li
738.123 193.246 li
733.439 206.453 718.936 213.361 705.729 208.677 cv
cp
.604822 .202914 0 0 cmyk
f
706.033 188.454 mo
706.033 190.491 704.381 192.143 702.344 192.143 cv
700.306 192.143 698.653 190.491 698.653 188.454 cv
698.653 186.416 700.306 184.765 702.344 184.765 cv
704.381 184.765 706.033 186.416 706.033 188.454 cv
cp
1 .98233 .233127 .159335 cmyk
f
725.822 195.833 mo
725.822 197.87 724.171 199.522 722.133 199.522 cv
720.096 199.522 718.443 197.87 718.443 195.833 cv
718.443 193.795 720.096 192.143 722.133 192.143 cv
724.171 192.143 725.822 193.795 725.822 195.833 cv
cp
f
713.069 276.696 mo
713.069 293.864 699.152 307.781 681.984 307.781 cv
664.817 307.781 650.9 293.864 650.9 276.696 cv
650.9 259.529 664.817 245.612 681.984 245.612 cv
699.152 245.612 713.069 259.529 713.069 276.696 cv
cp
0 0 0 0 cmyk
f
693.249 276.696 mo
693.249 282.918 688.206 287.961 681.984 287.961 cv
675.764 287.961 670.721 282.918 670.721 276.696 cv
670.721 270.475 675.764 265.432 681.984 265.432 cv
688.206 265.432 693.249 270.475 693.249 276.696 cv
cp
1 .98233 .233127 .159335 cmyk
f
712.065 296.232 mo
714.849 297.482 717.697 298.634 720.604 299.68 cv
722.228 296.973 723.551 294.084 724.558 291.091 cv
721.872 289.562 719.146 288.147 716.388 286.847 cv
717.079 284.502 717.524 282.085 717.727 279.647 cv
710.495 279.051 li
710.2 282.385 709.364 285.641 707.979 288.662 cv
706.58 291.675 704.655 294.447 702.312 296.819 cv
707.465 301.927 li
709.186 300.191 710.737 298.285 712.065 296.232 cv
cp
0 .806668 .525017 0 cmyk
f
692.467 310.992 mo
693.804 313.756 695.251 316.47 696.803 319.12 cv
699.782 318.077 702.648 316.72 705.341 315.082 cv
704.278 312.206 703.087 309.349 701.807 306.573 cv
703.843 305.221 705.742 303.661 707.465 301.927 cv
702.312 296.819 li
697.619 301.563 691.251 304.612 684.627 305.177 cv
685.286 312.402 li
687.72 312.181 690.13 311.707 692.467 310.992 cv
cp
f
667.97 309.708 mo
667.216 312.687 666.584 315.686 666.066 318.72 cv
669.021 319.837 672.093 320.639 675.205 321.111 cv
676.239 318.221 677.16 315.283 677.966 312.322 cv
680.396 312.595 682.853 312.625 685.286 312.402 cv
684.627 305.177 li
682.971 305.326 681.301 305.335 679.631 305.207 cv
677.963 305.059 676.316 304.777 674.708 304.357 cv
671.487 303.53 668.43 302.115 665.7 300.212 cv
661.563 306.172 li
663.57 307.565 665.72 308.753 667.97 309.708 cv
cp
f
650.029 292.974 mo
647.556 294.765 645.136 296.662 642.776 298.661 cv
644.322 301.409 646.157 303.99 648.237 306.355 cv
650.905 304.794 653.475 303.163 656.003 301.408 cv
657.688 303.179 659.555 304.778 661.563 306.172 cv
665.7 300.212 li
662.973 298.31 660.547 295.945 658.633 293.213 cv
656.71 290.489 655.266 287.438 654.38 284.237 cv
647.381 286.15 li
648.021 288.509 648.917 290.798 650.029 292.974 cv
cp
f
647.043 268.625 mo
643.998 268.408 640.926 268.307 637.833 268.323 cv
637.246 271.422 636.987 274.562 637.058 277.716 cv
640.105 278.238 643.152 278.642 646.192 278.928 cv
646.341 281.368 646.739 283.792 647.381 286.15 cv
654.38 284.237 li
653.509 281.03 653.218 277.681 653.475 274.343 cv
653.77 271.009 654.605 267.752 655.99 264.73 cv
649.4 261.696 li
648.38 263.917 647.589 266.243 647.043 268.625 cv
cp
f
660.408 248.058 mo
658.201 245.912 655.935 243.883 653.559 241.904 cv
651.118 243.896 648.886 246.142 646.909 248.599 cv
648.909 250.958 650.985 253.226 653.132 255.398 cv
651.678 257.363 650.419 259.474 649.4 261.696 cv
655.99 264.73 li
657.39 261.718 659.314 258.945 661.658 256.574 cv
663.993 254.192 666.775 252.257 669.777 250.829 cv
666.673 244.271 li
664.464 245.316 662.361 246.588 660.408 248.058 cv
cp
f
683.863 240.893 mo
683.554 237.841 683.127 234.792 682.581 231.771 cv
679.433 231.727 676.271 232.015 673.174 232.632 cv
673.187 235.709 673.318 238.77 673.573 241.834 cv
671.197 242.407 668.882 243.225 666.673 244.271 cv
669.777 250.829 li
672.782 249.398 676.03 248.505 679.343 248.217 cv
680.998 248.066 682.669 248.058 684.339 248.185 cv
686.006 248.334 687.653 248.616 689.262 249.035 cv
691.098 242.016 li
688.733 241.397 686.305 241.023 683.863 240.893 cv
cp
f
706.438 250.475 mo
708.156 247.947 709.8 245.324 711.32 242.661 cv
708.933 240.604 706.328 238.795 703.56 237.277 cv
701.595 239.638 699.722 242.078 697.949 244.584 cv
695.762 243.496 693.462 242.634 691.098 242.016 cv
689.262 249.035 li
695.704 250.679 701.485 254.73 705.336 260.181 cv
711.257 255.986 li
709.843 253.993 708.226 252.143 706.438 250.475 cv
cp
f
717.587 272.326 mo
720.521 271.496 723.442 270.546 726.342 269.479 cv
725.839 266.361 725.008 263.295 723.852 260.358 cv
720.812 260.914 717.813 261.582 714.862 262.358 cv
713.889 260.116 712.671 257.98 711.257 255.986 cv
705.336 260.181 li
707.259 262.904 708.704 265.954 709.589 269.155 cv
710.46 272.363 710.751 275.713 710.495 279.051 cv
717.727 279.647 li
717.927 277.21 717.885 274.753 717.587 272.326 cv
cp
f
721.34 237.176 mo
741.874 237.176 li
721.306 255.313 li
703.33 259.44 li
691.386 255.221 li
712.67 247.266 li
721.34 237.176 li
cp
1 .98233 .233127 .159335 cmyk
ef
468.236 943.573 mo
463.236 943.573 li
463.236 773.004 li
366.104 773.004 li
366.104 943.573 li
361.104 943.573 li
361.104 768.004 li
468.236 768.004 li
468.236 943.573 li
cp
f
481.978 774.395 mo
347.363 774.395 li
345.737 774.395 344.42 773.078 344.42 771.452 cv
344.42 759.041 li
344.42 757.415 345.737 756.097 347.363 756.097 cv
481.978 756.097 li
483.604 756.097 484.922 757.415 484.922 759.041 cv
484.922 771.452 li
484.922 773.078 483.604 774.395 481.978 774.395 cv
cp
.321508 0 .0585641 0 cmyk
f
465.736 830.065 mo
363.604 830.065 li
363.604 825.065 li
465.736 825.065 li
465.736 830.065 li
cp
1 .98233 .233127 .159335 cmyk
f
465.736 888.069 mo
363.604 888.069 li
363.604 883.069 li
465.736 883.069 li
465.736 888.069 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 22.0.1
%%For: ( ) ()
%%Title: (ai0021-14.eps)
%%CreationDate: 3/20/2018 4:18 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",Kf66.Ge*+@Aes^d_B8j[L!LuPu[^!Y/$4t#V@D^6[\bMfqFEL5I+psCE!H1(&&lNkN>[?0#/MBWdFtHdq'dEK=+V-(oZmWXe
%*:;]1<qZY5MWK?cDgD/OFK%.pK2P"$B/giX:uF_B$H;XR];jCbabHD;Ra%d;d2U>l-i.&LGtulk\taT>Zq<dejbZsdC`/L8%f)GZ
%WM1^27TF;NKHPt%Z7i`W<>1Wa'u2iD0"r<+dA<)YC8$*M\cI1=H?sdOD\HCdZ4+uVP(uB%'JJtXLJHGR[qS.tlu+Zgl\TF6XQY;r
%IK[QEZH12hbgIKM_?iqpS8=E&74:UJ:l8ba;A:Vf1^97k$D4ObCGmK^\1%_C,o_O<8<t*+JRM]M&^^p0b:Lh()2<\dcjWWiSRuQ(
%P%^<B_MXMtOp2a)c#L6p(-!U[N"#(ZU<Klu#!l"]."WI.Z`#i9bb;nP(#0R7.kIp+!0&2"deJK].@rGe`&Q/3Ho,]+6;S:@#QhBP
%1Pc[<!KQ5UIp2s]aKj>!%E-76&k=[d;+;7EZ]'RBi\B,&*MY$NKDr*f5iWN<QFTaXcnARUQ=q3d,_k;5X[Rts"39@E5us'b8q`?i
%cqpB33QZ#/6B0C>6XHE^hgbt@/IE]i#1(DYJln0ICS47Mn!"P8:1>%k*/FtF$b1s)Kf_geKE:b(P=<LL'g`.t;!8fg#t8ntlJodY
%<[]h0%CK3aCJVI9E[VJ&8SN=4gd!>$6Gc0<f$I,e9ZsL(8rIACa+?XU/Y@eTIU7d[9jA$f',SYTLB!BC[+)WorX7*BhZE+,K6,&M
%H8s>J1)Y^&(]o4YNEFAsIrnI@X.hK,8SeVMHG-=:b"Xf1#R[B8C;$@M1i0NY7R0X85WgQ*M=/&d(.1QIfJuoHOQ$h)";R[EJqTL7
%TF218bS^R8A#K8VBtm!+"&7$S%E#%lNE3(O#MC_ujs:O4;-X\&<ANuK[OYPAW`EjXX@NS,_Tu.DVc?P:X-Q.B`HKNr/Gs?MUt%q#
%CEZoa=5(I8O9`n1EUTu74]-]E@"K8kOn6.b9C(3>^T;tP,9e3b5r;J.&'Z;8V(#rh(]h*s9W3_YbVl_F(c=Z<:l/>g-j$H5a>0AH
%8qg.p`:0]XTJ:;NmJTL'B3B(>&#;_tMbY8T'JUoBO)07R";!Rs/ZiWJLh9tfV`&HY"]&&dMs4]_R]384+=FJ2aMrLUr6#\J9spAB
%;@s(G!ElE)m2o-bG=u_G]1DB>QA'6CJ8\SFmqC4`b-GtS##]ti\BD2=DBaXiP@B+D@)sGtn-rcW!+:D?8=5[b1;Lsd^rY^M(RJ\5
%P@X`H1\_0YBGA7V;(*?B_OY?S?kNdURn*ed/tPT65U&K$O\V)mP9,iEa^$<0hIftj*"DrQGel=h!F@+]j;oEIhZ*aL_)KBi,R5b,
%Gel?:!i4`nWZoA*<<H.gNH'^e\.!UJX+[@G#64t,_)K.T&oc+V'(.lU1nc3='mu4>"FG_#ks">PBchQUA<dHfrW!@GKQ!fH0Tog=
%mMUt9'*&+S9hlAMOMZMmI)@U&ON7HM)kDaWn-rcU,CC/:&of)5,s?c:9j,9&2^QRV*U+cA4b+.(RC"-i'*N:;8_6MVUi)B5"N:3?
%(dQH4;*Y[/-^^+PJ0TFD(m/sVOjJdrL2VSC"As/;b"YSSj<JLQ8N4WA'H0p<E9E)!&>:eC`8iMD53X/_4_^;q%sQl@N/8Y@5(K'g
%PNk^Cj?EAq3_pHT82fEi+V:UsJcCNS>M;lqT]2jB>'acnbL-J:l)"qmP),$#dU[+,`GLgi(,qm^-96'cM^2nYbq>J;PDVq/'^FU@
%3#\ZW2Z=PJgp2t$O5n<"lU_"OELnPEX<[NS7Io1oP!;M^^Eol.\n(^f$Fs^ga^6;[ITo>5LPj,]jH=X2J+5MoD&p_?ebM#f4R`or
%$%L'8o+sCgNXQ`cpd@G?N;io3p46]5'ou2oHM8/V.h_i)EQ#`Y%^b+*[m"+1K+]7X5$$jEJF=_?%hsptD-`84RWOQ*ja1mU3>0Ja
%W9Ac_M'dG6pN<T6#N&%'-2sal5?[#1h-?=@1W1W?Hsu?i^irl!UPc-@U,!OA))h0Z>G#qWd5afS.k;eiF#"\kIU29g_=nN`3YE/V
%7]+Ne')fDmVr(`%%70Ob,:8,=)9F$?TA03AnD-NQ$-WQ$$9BYDeG:_`$Z\WB!\tp??pMH+or6l]Mbb&J62K<dVqkV1>.8YMCKga2
%`[M4NLO]>YfXM[U&%DOXF!6H]M<>U;_EpFeTYJo[8-UBSgfTP-4rI"a`!\CDZ%%KiVS?Q0ll<6YRCO/9j!:32&E[(7$jGSm>2m9;
%g-AT(nq\D1XMT,Gj"jF7)*iUC+K^aA:`r3C^E(9>mZSIm[>u\\IpjtLe2Sbj.mO9f92:Up"\],2$aH(dTT%)cbWu-p4q;G#80F$_
%9].Qu]SoKIM9!+N*Tl]X_t56aS7`Qt3i%?[(HM9.,8k#)AeSYj+1lYSM?K0Q?'71*<TFET_lS`XGm6^[2L**KYr/(b)4;5De?K'J
%Yl[hA%tl?@[/L*GTl,$Q=Q7;EPjR7i?jMHV;R1m,97Oo?UhOLaMW>1L;W./5Hlr#98N2rqRBf),"7?a`IZtu>_F;Rk;Wc=`g+5#C
%1Sf._Ji,Q-N[,4a)!P?K3)aKT(ghBmr[Ab@;bmar(q:D-_9r0$AS"7D70H7n=<$iG5(d'KOT.5b@7:nU%;buAb_7JaA!i0?7t`T)
%fH[@lN%lWi*lUcRBLE9Q?Xd0.a$E_r//O9q[almrOiP^QN+o@W;<&iT)/prIJX+0&>;g#CEummieYi)=,0$kK;1P%T:!8dJYJXIY
%O9>A"Z2&W$hkdPS"XmcI$_2IHJbI4hM<DEu[2W*p;4PU6(bd%h4Krs=@i8/A962h*N%pjnZtUj@)Jo0H*cj'SC`od2jU.JS0#k68
%>F/0=o\XdT@49@WRL=-mjMBtJH5(Oafmj?oI'B-f?ulds+WDmEo;p:@>*j4@V0cVBJ_4R.dLH&'=?F_1f(Epb!G2Fh&.q&&2hiE]
%b^j/`-mOj>;WcoLh/jLO(<%]Yhl=2Pq+i^]i(\%M@_dXdO1DL5_\peC&JCc+3,Io6DrslM[C7dCMuJF@(amHC+Z@E*./)l!DfMA&
%4A\8KiCo,b@O+E:#"Snsg"!YN2e-')dD%@O*P(rLF(*!lQ<_@S'NX32La[uVAqS%UQ<^*BU&\eW`%Hr38W5,F%]Bt65Rta_MB2@[
%c%TH:4sR4gb,"@!qbBUY!e^kn"K,X=6,!oRKFCBh?H/Bd_r;8n,NtcZb`fgIJlD;;+g;u&1G#,?-1da:0$M[-Tb&@qY]bn@63AYo
%`DUCE8MLMmNA8@2.Lop>4U?tk(a9knZ[r+\j@BKU?*0ml&OhR[,O!uLA.3P<2Tftd2K9u[n;h^*@D^tM54UFcpPOaV!WdG`Z6,2(
%:G<TU,D?54fr;2r(V`H]EUKRY/T;H<X`hn,#L.rO(S<SoKJ3t%7I4U>8A;_3oTKa">o#j`%Nj0;I+Ul:MRc7p-6nWq"&s<skp"1\
%Z@ueE8U!(pDsO82q^ZaH-H^9Z2TSuC7q!bA9`P,Qk$hF<&WP_-M:+7LreSdJQFS]J!6(oc\Km6^s+0=L3g.FR]ldff_#BV0:d3?5
%J7u.k;=JN$7)p[B$gV<5%&7q^'nL&jNfqGKq+i^]7[*pD,N[U>Z%$=;CgpmbaN`9ZDZI[!jfcnIW$l-aYn?")jJ;:tj6OoX5I1s@
%8U)p.Iq:5@L&%+H+B)ubA3l5$B4Y?5M'bI)>WAV1bha2>"=ICQb$;Fc5l5ri!BDYT5LIAB?==K1+65.j897-`N\6tD@uCaPi8csJ
%$J-YP19SiNMRd[Ia[jih,XND6Kh"KKZfcs1/0>EBB<.SSiQ'3^YUIDS`q:.KY/(B^UpZ%MoK+i!fNtGe<MqACTSr_eFHLP?mdfgI
%i5nkDs+_W"f\fW,9+.Ne[LRl.a&\AXE;p1M1$&XE)`,?=')cABbXJ_&#]@ll(7Xa^W>pI<Ktf;X6o=n[>U9.]l&l@PO1F2Ck+%o$
%,6FM:ZI.:I37Afp`aN<@Nb:Ol/dAj!2]=X5;':L2I&+N6i*t8b/3/k>i-)G8R1#P7!R.*)13(lRVMs]4NVS6gRu@:B53gcDTOBlB
%)OKZDKgC8Be%dt!kN3@SSJ2)*5ML0CnfTI#F7q)&E?o+c9]k6V>DbLqCq,O#_AH!Uas0)HrLJRXc@dJcnsbQ#q`#]GS7`I%r(@*#
%HSc(h;'Lkgai@0PnXKa5KHHhr0G6B;\Qerf"mAX^`[D<$CkP/8]ha/T/:hrWIg%1fc&AX>=HO0h,Mb;9O0:Hu;/S_[:"B@*/63Ak
%J4HVo_IAoX64o&89u=,J"0_Dqn,TAi:A;Hi_Ua.N_i?br6>bG(cB*=]KHG<o+u,_k/A^V1,["6L@76N86S>J(_KgtmZ0l?I:SN#<
%GA6B_,b:Ec`*pXt*f;Zh$(*h$V@-1macQ3$X):*e`l/50%2XjhA"Zqc,KA@g".e<kN[d9S@Cnm^mcYj'lF%O.-qi0s>d-!RGS3k/
%TEH_S6o)T_U*p,g"o/Era)$-`\JX3ufZ]'BZhK*cSKK+JLru+JR$lmb?nEFYhg*\")K>mmEh1F$%?h,MFgh+MD?1XFq=,cWN$JTA
%JX(C`a,PukSe339/h>j2@3uPF)&R//Q&Ah3!)&#^=U6f+\)IVu`YC7_DNb:8Ir?k[2ZhSc8`u=kI`2t4EQCIKX"R/<E`"W#'PK;:
%6rCC#n_RA</^T-%'5REI\P1jhXHC-iR&0*^*Xk2TAAN`%bmITDSjb-VM&lJQ-VTrD@A2KoR'@s7##IRlNl7=;LSI#+&Qt4eU!RJ#
%'&"`u82T61VU?G_+@@;k;.9oP<!a4Ak&A5F-^JES)ho8?e!p6CRu\)IMiMIu`*<^3RdqUl3d`kT5`?A*g<DqP;/g'Oa?XR_PaRfp
%1hGZ6k+]W`F_NI5:`ef[3Pp7k(*#%D_ZL.6l?"h9@Xa94Ta;nR+#XoAPOECs/(*O(QbqHB`#+=[9SssRg+uhc]o;=\Mn\$0ag'Kc
%)>Clc8W=Nr,SE8)mk/MX%;WFmA5,AA`OLMo0/K=D-lQ4U#KfK%\Suj/;a`f_/e!GRCG%<<'"CWi<;s\36S\CSRK&BUcE>,i,Kp<O
%3mE?&NJqL&HKE"t`kcOik3B!2`>t9j_J@_A%jWD@BJ.M_d)/8HT?6<]r+HZ[-oU+R$Ub<D]KS+D!W49V!`&e)2]"SlY2s_7/rV.k
%qlM&d(M36Xh%eW4&E3q2dLp,dEg/p-H<*0/GO_+_%^O[!;]hPb//k/5<d'Lh!eIdjhD+pF&l2'<qNoL8^(]^J'F6mn;'ZX0KL'.T
%M?<K*ND'Y_ij*LnJK/sS^7nOC0K\EaJ%%XSB!*"PqW9NR&Z>NI1sn9;`;n>/13!X=9B*uBZ2<g)/9#Ss#T=a)`:e>HESrkS6?#jU
%L<bS]p'%2Qn9!#%-QUSOn]ZO<RF$W_&-rN71<qShMGj<R?[Yfo=>V9ol4DA,T7d3T_!A)u0D+XU1oEI;pl`!:%lOn)//0%JJ#iru
%17f%G19HBI*06oT^fPReU8KID#S2/FC]OSoaBY+,0p]p(I.*E(kVip4Th:.9KYI'HFq#O1/gOmY3XT?Q6?ltr.rr,0+S)2`'u'0b
%"")j>BaeSB!q666FYJ(?9SEoG@K2=F&"@5!+&`S)(Zo4]n9?7i7e0.3nMd>cJH$aMs*6M2GSOOcUd8uI&D)5G"IM/h!ZeJVkpliC
%=nQ4<gad+;4cUJ&@2rhondFO#%C#SO_41W7J*c'X7!B6;,WIoOd,9;EahS!5]/O`9P1(I;&9B!D$sm$h)3[KE)@"/P(7lN5q_8L5
%Q0q<MhTJLL@_=];.<JTM=T!AX+1Mo'*C1gq*FLM@&HotQahY$&HP>R@._S>LF;,f@)T0cf_D\rTkY;`;!(A/jBe"tG."7uLpl.FQ
%7l37M-VU7;fuq3/7ZY+D(M2N;8eh%*Ea^$6"?X_p`,).k]8\T4)Af0e">#u#R#[:S,fC4AYh__KBj5RN&h?U()&'W>0l?20(TsJ?
%BAsjLZ5?oF(F-8lph:c?Pg%0N+u/:A'"?6l54XRceIh9J(-jg7X0C_5&nEI,go_M-)G82)A[*Wa7rps"<Z1MN_bnebmZfA'0ROj&
%R=_&!kW+fR8cL)AY+lC%IBZ!+^^ERMCWpbqgpLI/n<,s0LiG&%+(nZ60e@EF<pZS[F'="]Vj$,KlT9Q32+B#Ks$imQ`>Dp8&a?b<
%Jo(oX`'?;6"S33j_q(MI(-La.<<TrsaFNeGC$,cR5T9-f3l.B'p)Re`qo'EaRMcK)S<@:'S63Z=o(]N,q<fJ#4<>C/%`r"dEuG8I
%^fZfN%kIm3+:@*2"cM"b84Mp9Beg/6JqH6!>;eU976E-6#_t;A_<EYXe)9Qs_Kj'kB$21e=u;#`(c$PaJ3XeZ&YpUoQHOG8k&81f
%[VtTNN$n+"&PF1@1tERf`><r#SV*[WdqMpJ/gS9i[>"pimn/\?G#21E.Po^B(bp^QNr_]>.R7e2Q*!#p#-t/:'hd1l7pm\Q,I/4K
%FZrK4A`Hpe4s?iKPC\_6XiGeW>NTCRPTP?@%*#kf7r0lf%T!^phP0^/!`,U1$mQF_,M$jXpVmhLa&'Z3M;$K@\8F(uJO_g-:@!jM
%0$NKcOB;no[EF7[0QR^a(t]g>YUnFfI>)i@hQg3HE,eDm&VDrc?a'GIfZDV9gqo*PR1G:$RgND+IsiF%e#.FT'@C`$L!f_QbQX@_
%ZG4[-X-;c0q_1qLKofQXc,YCHgr+0Zka%,Z^5ind!K?B4Mlo^$9nkpaIghQeUUWt'JRj?f'\7S@XqqeU*_gb6\'c!UH59874SC]M
%QJdd*CS;SE!$aOH(:_-U,R0?*,&?VX7Do,hN\G:(g5U@p+?"jX7!FaoHoKKUlnHI:^g(u+lF7R'ON8V,A<%9M+8A#qIh'S&$o\uT
%,7JN'J0MeE+ODOn%hp[TP5o-4YX0,DP%`D>8L/Vc_$@@r_NmVQCVo]m:+"?/GuQN%.l7CF$sp#J*O3aH0D.F#mgX__R'DhU#)-?(
%(o]_J>Y!\WrH_9&q^o5tI/ID)S/?@43JN(nH1qR;>8n+hIU_XAO3i>g,OrUCenU"ia%i(I0M(r#i/Tb)#KiO6n=bO*Wqo!Hp7lIs
%$PpS=!<?b>HJX'ldcYZg-^-9!%gWf-TiHKBfT:6/==sfe*Z:=]*-F(Tf6p;f5RMh@A%AiBrgMF8*]^M<+;Z>LPC]ic]#"r?$Z%:?
%?nTH\]#\M7/<UCG7pukST\W]BRHDBRnLG:hL8"Q2XPGu<D0+Z6Cg[uHj9'.4BO%06SG?uWo/[\qs8HGE_Y,^Z0t;@-`rW<S-!k5)
%iFDL=L%^.!r&_#N"t5QZZl`3#+3r.*`][(oopK:Ef=)fh)MO`0li/9FO#fb-7U[\%HKTi[lhT+O5MrG"qRITLjl#7U`bADU_E6?-
%e_K6)h8tCXd0ms"lNb.jdTZ$!<-cR"i!V2N3\!t+_:ueUr9oU"P?sE;2S-HVd+e62>$h7!^GR=8B/IrBQ>PlGdN:((3R>@3+$S$)
%@9"mmSod?EU,pZi%ST\NeU8YlN+mRN;>$%*W%bb#YPls#H<mk['0%p.-7`h*D0YQ0:5('lTBM;mn?f1u5co1pW_T\DX<Y)k/Jt@c
%rZM9M>Afm%<7HX3DuA'H\g`,,WqCH7?W.oG?[AIU%'*@]buR2#>RG6GBVT<9Q*jZ$fNkCpocpk&>O@`B8gLV6Tq8ia79Gm+(%``N
%=":&:ejs?kV2QpHPA7/^M,^icY1[4fq.\4fQqslqWA1EI4qnoM]i`F',)pcPkXk)dV,M`5qjj&>p[Ba_l))kXmqP=qPa^,t1\N=j
%7-.=TU8<;t>FIW":g5NR;*1rnqXe6*!-BHY1g6^!=M=`Y>O.O=f+PYT9<G"qQnnWoE8Kle@pGV.<j5'N,`,"JP]DRpWKp_iS%ltk
%B.PM%>R;:2!QK:29^7t%%+@cs1IBiI=8>`'=W:/:?#")>K'UsuhQGs&WM3SJYkjcL.B?)?"aO1]pC%0oqGit.2cJ?*aP\3]If+,j
%F7'@.?alp\B6m=jkHPY?)ERG#^IR&dHe/1q<bgi1!)Wqt)DM=s_[QaI1`C*f9X\''j;M226SP+V6f\qC2rUh1)pmFASfGHmQ$Q;U
%Tm`NW'WS`FE.\'g.r>BsPT'U$;l^$(o`9S$-A7><"-s4s(A0DVs"bRk4QajfXjh*s5gBBn.4hI[d:a!+glBTCduD4_(F]3Q*""Oa
%#)T'T.MQ)>0JNU+)kC>Dl<Re-^hpUIn[-uf<kFJ39oFbWCffDrec_KWCRNS[eCrIECeO`+\M8\Zi/&>5+N9C2/#,#16pl<>CUL5_
%F4(4V.HG5iW`;@tc=d?M(bT*o\71s1H;_h8Eja:k/ZXk#O-CQ>=/YW(kqtW*f;$4h/NjFo>E=QgINiT"l0Ur@gF!)-(SP6]9dj,5
%S<scPTFD4@Y2NoG$WJ\(8a;9S^'q=@:<"t$f,$ORCZ83Z$[)9>?JodOF9a^6>2BpaR@tTZ+3Mi`Emo]YHmgq%kfeg&1H:V?@G,:4
%.-DfI3$67:hafBW:m(*DcLb"U5*hZbUGj:<c,XkrZ.uFAjW`DSXcb063W7R=R%+O<hdEhO%Z+mAmr70"]]0?is2K;=\:0qPq?Du;
%`Gha.b/L`[,o-::.WDhK:C=:!V*2murT0u"P#9$/g28fAC+V1X]BP?F?&2_1NIT)Fcp>4Y_2Wfa:!c,8;idoe?@"fme655H@>8q'
%*9/r@>4*T#L=P)HMV<mO[:W(6\`$2"ObncZP^<Pns4$_12AUmFO\$]uJT)9g@qPCkh?a'0%N]jU!eoMH2[Ll7DGnQd=Oki92tC]a
%94_+I#W]]`2Z9i+!%g0K&(6eo_4XSn2+7UVoJ`3[IpA)pcNM;]]IPP14ZbsA@tsmY`$AiOUgC(/:>@-=2SQ=5.Dt\H(iEt5K-&Wf
%C[*M@\!mdC1M&AfSA96)g8p9Z`gc(W2@JH[/X-JLNU4jhTSX+p>i=O05KXX=%l\kQPf.S"^eHa0=>r4DP;^&1B9HM:PZl&+eoHDe
%9_l^`6C4\GNKmBLDc&34NdjLqC%JIeA9u9N,a2d&WR`J25foFQG2+V%pZ0A]p0tbYkOVaM7!60UBkZ3B(Fe^M?fL\7G\A>;0@,*E
%d++SQq)YC&'chV7Ni>C(TSo`!)euP*G%3F(^r_To^WWXY>cFI/R;nds;5O`@bfj!PDM2hb:h$.rYMQ2o@=LW\Y%S/t+lCJ%c&L>>
%)R&W%LngFEA*1esh\dYdLUEr8^h.._bdYfVIXgpp9TrHF).!L4M@ELf(iH(K=]#SD.mI\9fmX_WRQoR,?[K52C5p3631_#FT]"6e
%r]F@`CGi5WdOP$'")cQO4[g\DC5Rr!qY9jY(7>kcK@]bKD4]L['.3WZ_LEj?RXrF4)&Ha>1XV^3A7ig8`(J:#7EoT:&t2b,5*IUS
%nsKG>4f>[IF>VnEWLH`0"Is3MS9jM`+q6CcAtc6!l<GluR#QpuP;aDNUlC;LZ_XM:\22t7bnVn/?.IanRQZl3ICRAcb_ujLK?RtD
%rNp:.$RrG[UXSuU`dT1A]&4sTk_=he4r="UE[>u+SK$'>TTd6mVUsUrPg-Y;m3,EI%]!pVP<qpEr)/"TMFj@NVPQ1Ug)0rP`SM`p
%d&V&MNFK+`iDD&S1tBR/!Elgn4k8@>n@!mC$7XhcXQA7("%Ak0L5(U_>^$j;l]]5;El!Wl<cAfP)/td+-1>k#Hlg$reBN%(b(N8#
%C9:HXj[D)AWX%EhA%$nE?\pNQ"17E=>)D5CR9<*gbj\4==)=7M`V<1Y;;CL\2hOb#k&1ZuY=4kBbde[60e9D>^)!OU?fl-$r[n%Q
%$k6fZ/]rPi&=S0X.,"'r(<$_<Zf5i9j]WAp5HkpBPn6^(FdoR'RF[1?^(t9pm$fM39Y7<Sf<m$[n$EkL%5P8aoq+6;1Q-$`>k)hC
%X"d1PcM$CGY#]el3AGkBDTiS8^9e]?m(mo#^G(E:;gFcrL1/eli?i%k.m*]W\';1mHIndG)V4G%R@2g;EU9,J[qdTe0Xkh=]/I-6
%1L\np%<Q/&Y0FklBf9`F#jL-Ec)o]E<c&nZc%EF7<L[4#mpai61I<`.R,=JnP.2XNhbM;=e-+]7NQ,$EENVb`82+,?\JdJ=L8R/H
%Mq*Udkt>(c&oFk:MTCm!8='8&.`mSEqrO$6#+Prcs8!,5B$pUCC,mkQWXXDYV.1fN>uOr^<uW%0?miqn;>N6/Pbp*Ko1`r5#-DgR
%.8@,YgUW84Br3e0U"sN.1'>/!I&!6/)Hp,_BY==R-^;`oQ\Q&,P_\DK2s!>t0KM_E0Y66=RV,kP2Zak0a-UKJNP=#&$NGg2mUXo3
%\pDd!bUhatLX(Bh)?2P"A(m2t?jAo)Wb")c_l!GWCV<p'RqNdjhB$4*rmIB4dL\f@lt4ZQ\4H=Y#A)-GbQ+;mKq0i8E2+]?$0m<c
%4q*krF5Xi.2]i5Ua)^+RcAJ`mHLIdj9!)Q&CUrs\1[$,jO'lSB7t/kJMr2BCcJh71R(StSkr4+?Da+3uAb3[/]HuH_rc_PjmX5"X
%@m9oSTDtJ.s*b*IDtu/Lq>B]/rqFU28!j<hW3FH9E^&YJV&>IG:Me;=I-5Rbo/Y^5!rs/*^Qd'RRp&dpTa7a^7`KaH9J!hrX#MPp
%)hgAH-\^)hX]!PrNCL$J.MQ(m+HV:o79s<Q?!q,=K*tW7DWK2Ycn4.Fi)=OjVVT]>lMZ^4P&$#jq\*Gr3()iN)U?fBI8QK3al[<C
%s)a^rS%SB:SgKrP1`;/6_hEiBe\W_,eAB9=QO8'6B1]:?X`-YNL%U1()`Y#ac_!p@b8hDP9W`nq\]d"c?mfRM,SrG>InJ77CX=R:
%*Br&-S8aoD<l0]L'*nUd\i(j("r\jY/38u(n)bpic+930YuP:mUeu&maa&7-#fcnDUX4*6"K`l3o::MgZ/6^OjGJBWo[1V(0_JhJ
%c[JQW;4T(@k)#FMian^+R3u>5H/`D,Gki03/u2W@il0!Ui;Cb\nM8'.d!=V^SA`V3K"g][c=^l)81A'<1t*><Yss7B5G%hNqb;I1
%-Y]J&iUBhO@CA+aE3hjGZu7k]Att+VAeWXE_mF>?n_N&LnSNK>E5,k$qYap#e4Qa;JTFq7k;^EbD;(Q@HmbfUE/rga-RSS2C@2mN
%@]VFS^2^jhe+_RIBah`$G@-g-^,.8n<=WA675_"CR_PZ\^TpGYpNe=H`SOeiVt-`4,aeDJfj26=1,m;>3#7GM1HEj'K7f)kX^[sf
%<fa5h?@"fme68LS%5$bk,gVq)T48l@Mdq9uE;+\h#,[A9?T8KM4%u''ct7'H2W%!t"!b10?l>X5jjAmpM%_6R-FuR]9qXJ^30@f%
%(J#5tGO+ZXJ.k;*F+_cA;U3f::'5C*a-_I@J2#;Zbg;_hk49G<2ooL=_-rqUR+d\jXQfXFO"nsj9H.X,H&R"i@tsOk/_/C'Uj3a9
%43TKn5C)M:A<:bmFIS\(B\dL+<,5R]ZRtjJWs=XO^lq*B$G+lM-_iT-6pl<>CUL75+[HqBUi<C!WE-!`*L+`ej9>T:?)kEoRfdt7
%aQ4?jP+Ba`??5Y)""?/AZVL0lCG"[14O<@`6Z0!HI%R+HW6P&SqAQ`TiBBW3*.#>m=5CgB(i3*;I*3Oo^<;7&5o9!2C?]V&%XjMK
%qJ5dsRU#DrS8Enm.e/^?2_sb-Eq6Q)'Qb(D:A_hR^?LInr\,#:eo;f&RO:]t$]9!"@Mti*6-md#e"tO%kf_5nS1.h9jT^EQ?gpL4
%Y6A:9d.qT2phCtQpl2TL/s`]b?o"=BBB*V[)rDPkk4sp?r$:=O)'@&4Z[)/igqSiqHo*c(c$`tVkJB7)7s":LgjCq;+3i&#F#,\B
%F0V^]%$'IT?o9%M:#B@HCR8)HLNE(GgjD(?+3sgTLN>DcSguWs2``W7b>#rX/jOo=d@<9DVL:SIJ$8C4.s1b0j14XPAdK8@TD=3M
%P95"\I"6Z8?3<.Xqb#*,a.2TK0n]?q9G"c'A%Y!<K8dntbUR:&8)>=0b#Hl,3U@oUoX^JC[=3m9V*^ZRh\A)<1]qVnEei'?7XF,.
%T35$d":3jXC6;^i9Y8pPG3R84D;[5Cn':a[d6SFaqAT<=[V`J1QfhgF'B?K[;8%_AkNulGcs:*Y!pBCh<2lta.a2lt:C=.079;P_
%</fG"#DW%.4*'-\-AA(M'kPX5,Hk]:[qp,;cNg\(KnepF\B^%?ErTV&DnaVUi*nVkXb)#49Folc-ftJ4(Zn-a;l[939k\Vk-\W'h
%dM(8skGuIt=:*"R-gmkP2SQIAfEdua:@PkbF6:Y8`sCjSMbHg4?.^O2\++t5H;,=d6*&'h[$uhos2!'"X>^`@eRmF^AlRqZd;/qS
%o9eaj4-DAc_+Y)&A%l8tb"_N;9B:T]3p#TB[on&d`4&NcQNt@ZR/oR:&hb';8D/u_PUECRDK$H"2SjqH2r-G%g??\1"$:5GqgI&)
%Wf9oW=OgZiOC>#6V#(;fo_Z[$WKgFU"7n9hk;^EbD;(PU)[ATONmkh"Bm5U*mF9oEcGWh#mMionDk+cTo)*'Odi.k+NKKhRIXGi_
%Al9hef.4@$mO^2PbI,(G45]24bi4.j^+g5fa*_Bk:G<G'b4sTWXE.r0cg[nQGr,P7_:h\ule4k*RmRqlc(aC$Wi.rp)q)rnQ,&IP
%S.7o&]$81f$M_@$(*?o`7,0&1B]f'1#^hD%1'0'Pn>Y:kj6O!E'1(gZ?[<c:P1i.<RnSbQUeSP$ICkbe+46VsQm@6^"@+I8A\2f/
%Mi!T7i6Bc@"PV+IRqFLJ[PQ(FdtG')75H#^Ij`8DZ?D_h)MqAPMip*,3%<'r>YJY7e4`<CG+3u'5Ym9l\.daM`Kb,gZBm@]7Y7@i
%o$#'hG/S3H2T:WH)m`\1ZH,EMLYs<c4D1:(W3p6oc'oEE;!,fVC8O0cqf^YRYodkOM8TY8C9iuo4S@*_4*\l:;Q7l13$4F;q%ClS
%=^q1q4W*c:8B].!9teJ\\^&B[n227>]q">p,cV#d;%kXd8$kU^B#!rtIqNnO:EoOrPrAJ&a7&mk*E$p(7e9"dm:OaeWn,[Of'o1g
%Ei>%oDL0C[W*60b$H-?iTP7]8CngBA[b0d:VU#o43eWT6G3960)pggb?r.A^`]>N&o?\2*5Oa^WMk<2Jq_G^[1g2?\&A2^^6kq^8
%NMnq<<jYn#qsco7Aho"!6'7@"#,)YD7%'?$HpXNBkX;:]NYd]J>\ak:W.nobJJ5+\5.p+Fp(*lbf8UmP94g`tA76>Q]2]HujYk$J
%SpgMWJStW))ODb)A^M*<dgWTXo.nM[k_,*%7YDGDAjlo!3)68of`Un%:n<P[UM8$;;44fP\79V0-r?Fem\"/?7]&2o`?5O'$NtHU
%P+Xb\&e?Qb'WQp(C$76$4.>BEA[]E11f$]Q@T4:"i)YF2:WZG>,]Z#eQ]X:sJJMobJ?CXYY"*Rjd=&2cg7Uh?JcHPV$r>9<7mWP!
%)IY]T&gAjGKAgKC'1+=W/N_@!hD):.BhG+6Jd!Ys,)]6n%Y8jj&m4H&;]M!kj.NS\2`I9$bZ6-LOu]0tb6p-jiK+<`fSBSV@_%^L
%MNn3BFFb&12DV-mFIMW8X6ZA1(.5?i!;03rN(A[8j&s5>&R#1FO:YK,VZbAPN-QQ=&V9@sS[LphjCR*Lbu$$0PX^O"7)<\,6F:8_
%bW)"7Z65$$+"^t`1![5=m[7o`%)k$LKZJ*`edbBi+=kMA-":"I\7)(DGm5cYLo>h=L^1X"'WP&O[cY*I@2EB1$XBDd;5!Fc/Q4bD
%'?OdKA2YYe=P,A.0qDu/a#)Tu)pWe2@iWoo@[B%ik_5s'&ZS`"@p(@D'$&Fd8O+X/=.729,4.R-5ILSd=.@K^*EjY<Uj4M+'I<e)
%BSI9+&\#l'1:C"+f/V@FL![(p=C%'S5d^[^BX6r)#>5t'"Ug.);%0mWN%"1M$8=RJ9i)TRKIO@NLrp]7!=>e@2Pk4+H<p7rZb]KQ
%BHb6EQ>)3D;D_=a"o&`m7b^`f0QaZmFh01M0k)CZGUt`a5u(s9/D2!f:]a)j\I_oZmElcO+@Ds^XIDXYo=tRXU'Y9kNB*&]QS;KD
%*kMPCE2]>DQ48ruF+Lh+UHT`8R>b,f4L5K<AAg/h.=n=?Z=#[@6KdhE+gf-[+iZc)ZJFdi'r,KE>_oJYeHK[-15PT2\d`1\/Fih%
%aIM6bac7ts9>k6jid&,))5]HOd%o%5$s]94=WE;fSrLbDa'f2D/AdVpFV:AK7gHG3l=#%k@0.jh"T5[375YDRcX="CnkHb'cZ-l8
%aC\.O7iM`34&lms'/@onEG$_:%Rn;uOho"I=X<i4Tt24De)4Gd:CnqRX(p]$:t:di7_%E=#K0q7^_W@b((:k[j/'"dEE7^S@6RDe
%m+%'_\n.Xu?unFgI]UIqdL/V:Yi&A8L&<[>AXFg1La!*UN]529C#Crd,)PXN#3#V@2gnF^IH,;(YW(aWb7@$o21Ul&.pD>YUuR0E
%-Re'BNIj5n58%M%@2-GDqH_A0'r^EtfnWX7<sQ-@oJ<@WgJtB,MQ&0qMrg:"o)alDiMRo'J1fJ0$%6\%*g\,0cH,q@WofLK))QkM
%IMnRS=ajLXWAS%3Wf:V8AG-*+_i9d7,G![JSNgbY<&M?I3_+k].XJP)NSMSepV[3jQjNsPV&I"/Gk;).#StNU8o'u+Cg8)t#QIJk
%pj8_DbqUfb\0FEKB&R!/L)Wl`>S+n6$DF*[blY[ULVO"`flj]u=/Wk3IAr$WRVK6:dD1M]4`i?Vs+]C+7P?@n\,5d1<4SFs2$NP6
%".$T&.:p8T)%XenO:qa"FfD@*@=3:>o-pru!=fR4d+FEr7j9k^;(14Zhc#+D7nF>h*VbbA'f@ohDr\!fTMpE8^efVEOo/5%NS`;.
%pV_TP$N,thMWjmj]J=d@72mUX^3/9\'h6Lsj3I94R[V"n>>-f+*mr`MgiPq"aPfi^5H7m[c(U6b'07B<F_;J27c)(Kbh8Wq0mLi?
%>3/TSS8-<Ck>H0*Zps9jT!.ckC/)CimQ<>3r5)?l,3S>o^"jT,LbeI!%VaYGan26fXBkRjW3nrr/SL`O?>nH-FUja/2RK@4po/Pe
%g-7/b4BH9sR8Tm212T-*YS,])_Q5u%epaXD<9]HUon%9J;UMikB\p.VP]Wf)fqUH/)-q+?4P"jp/2I;,/Qb>A<u\B[NMk,OjZH8<
%*J*BVIUI"6)AUU[,/>uS,7Oih4;k2XPXQ>?;ci9g"#X;"=&^QHD3QjPm4$ZZCfs8u.Q$c-Q$[>HB]>D[Q\+$.2X@q'2k0o'qIic^
%'hmoDeQf8hCfP><]<A3!OtGBe%R!FrV0=2a&'f?G8k?hKQA2?5iUhk/C,S,0R?:_m"4Y>cOZfp)h_+&U-]]rrBf3iZ\gd.F:T[KL
%"KG$BdHZL^6j&W)n5IN=:b*EkU>kQBL:38IPj52O0SK?/@9Z![cl=;KLdR_t/\8=rn#U9^A]dWOM2#'OR]26]&#WU6e?7N,^m!#&
%oeQW*:7&2^[lh*`P#H)DHJPa1cC:.3'\RDK@]oZeN_"2ie_?@dV(/!p9h#qlM\g4FCl@IEql*RbO:Z,*V,Yo+buR1bCBLQfjg\5m
%jZmZ+,,")+`aPs*DteJH*S;#gX&aa)%VRpl)V>'bS"-.^+;M8eO=r,>M0>_)P5e^$!'/E^50>5)cr=e_Op=iQD>""s7unE@e@i;_
%GtB.u6?[7oEucl)*B#6AL[%E`90]h4A5lpO7`YOC=UrWsn-BMt*#p&*(R>P$ATjr.SlE<3C=i+5^rt(ekGIBa#`\,olA_="lbd8Z
%k*b(HhB1M8F\L!cdUgBO)i([^MGJTYacp3_2m8(\7g>tUj$C+2$G%99FT'X]lV7fq24kgm9Ntbt#6L_AU@4<h0^9cA$Aa^RV.mO`
%X6Gq8o9="B+;r@B?.!rbiNQ3oirrJ>$o'?;[OWrA`S%WXkY5T@.iPS9An'!2_%$`a-=_lK+;o4'c>[8!4?PkHdson=B(!0.1OTP1
%JK%iFe]o;LQdBNM95s$*`5)g+RY"8tS.SL\E!F+]RMqcT6U`P$%-s*c'%=9c`si'b%Ns)f0".gKRTc_YOtd:YTJYjSif/q6"$/Ea
%3"9[1P<`oRWf;&Q0uP#%2f,XkHL3(7Q:W)+Ndb1l&S':n.C'INU7kYN1B5cAA[#c0OaXtkN>7)\D)+/b5YPt%8i="LY(pFs/)e9W
%GWR2)8&RY9\1QbM1AigmU`6-[&H'P>[G^ggCc^*^\tqlO<FdVF$o/JK";(1*^C"/>*G7Z^,G,R!bn(UVpISb&A'QcN0LW(950u[=
%k-R<8(^qOVbF!6"d5XN]cW2K%dMa3*PtRUBN+BAV;F^"bg/!HI9roBRj$ni;[YVMq%H,Z2$UeHN-/1[NC$S1cN==!cLkL@g=,;$6
%6k?/4(^lI@Xd*_dH/rsMg)'qgYa.`W\_GK@ON%48o`4e0&VU^=V3jST^2uJDOAOG<J1sf-D98&\$fs"g19>%[BEqa3[kd$Q@4VY_
%Q<MJ*=LL;Gn(1;^2)DmO%f7qCMnr[%5:D>ef1/,1LdomS8e.V0pD@<U/4$@:/%b"4!\sL?b?UC@?`*9`(Qm8;TIA%5.VbOpM/kaM
%#%;4Ge+9W=eN?S!-YTbgo0>_1,=tfY/d=c:W(jcnT'AT.FL!>]%gif?@eAJ%jW#$8f%ZcW)I@ZMaD#&>;(L!&;JAEc;1#93b'@g>
%pkB#2go6s$nFs;3W$n]l8iYC'4Va6Hq[L(b`$8e9LhJa+aV*+^_\rk^8qi^6)/7c;&'7Zfoif[G*@`p0m97&TA2Q@!4e"`6[Sa%d
%ZY(Lne%KB<3f`QZ$]_!<%jIgHlY\]Kc"M(><=B=sO^gAPj`MB4Ak^g?QPs>!LZPJeTu3XSVJ@^r1r+sYnOO.fD3OBI;1tlO-ctS8
%B$4e\1*kk;Fp=IHUrQkf4X)7c)e9%m^JX^gQ>gGD=@55cK`6UQ\#Bp#A`*,R0N2^d<R?o#fn*OMXr","?j:.Ecf]ou]D2-ne/5n,
%'&!HFO3u8<O\%9ub>=JJf'A=R0AY8OO\e3<+le50ci!LT)Ps'dB,)F=U8#*L).)HX/CPCK"B^8C/_I;\*f6YEnd'IFek@0eZdg0,
%LJ,>V[9bD$1U;Y,M@Nh^8%dNT"RG_c<R5@o)ZeM25*EPB-X+k/Z2e]_5=di.2E[Xd$4W?fMHb7-orAU,2X3Y_(en!,\9Tb\"D+XN
%;(WI2LUQ'\"nb>.=<'YDJB=QP@o71B)$X,U"?U>3$jm#i`Bg<U'!g&&T1QuhC9olYdt6h`Tuq-77Eb*.LB1GW5]eE*I_&EL#9Wj=
%9;i?`4tWT-ZQ"j9D7C2Y#U["6,\GU:/9ZssaBc2/p\dcXVlku`EaWR]3?6e5j>'OB:Upr;WWp^^1EFGdN?MJ5"3jkrS!$>:+++)f
%n<S;>2&HYpF"$Vu\OP%^T*Fr87d2'RWO80Y/B#Ilq0"?*2:gN+!b=\#c!b/&OBN*jRW:d6i1G>"BhYK'K)(Xk`f6*L6Zn>!EWi)f
%F6ug9fjPIEL1lT\"`hh%cQktE8CJL9!,2Qa17Q1N2(EB%k$e+TNFk(QCCV![!,@KcrKE]8Ptk"8f]o/Z<Rc>6GXu3Er&LQU*.0bX
%b!f"e1sZ%MD8K4I6ZiZe+]Hl?[G4"[]sX?O!Qf6gNEe&gb?_C%OPk0o:pr*#+GXAD[f$D"ed'lgN0WcI#ZsUbYiHW>NXF0(q+`<E
%4g]>4DL$1;JmncTe"1rh(!KZo[amm,?+h7TB>'GZXd'k(Af9o/6mc]7_4[fsm7^$Zf:&''&^OlJ.aYID"IL;p-sQs(B6WQf,MOO`
%KYb08)#p)ART<6n,(2FMek0_<!^r_Obq\kZ6h+cm=]BHG@qb!@-qJ"@,jd;c<[Za@KPuJi[8n)Ohol;1c#3(g#cuE0]^;>)7A,>U
%cu<Uu*))AC-FCh%aJ3rgI`PLgW.B7Z&[;DZ9#Y&Z1b:Y%LE@-,2)L\"eTAGIc>ZSsr2HgW"rcFD*hm&I0H(k2RN6EFlcjILNWq)+
%jK4V!7sYBFAp1=RK+]Q?,o-+g*>iD,Jdr%PH2#00)h>1WUBeZMfTXgjhb\AJbjq^?S1t70FM0%NFTR@I%8mNdam@9k3SGYt)S7_%
%bXH<:Och0A8h,.3..K#;ei=2sj`\sO*rK5$gT+cUG2nBa3=eOO)Z/&oW)3(,-+k14X3m(KCb?#q#B=0,[!/pmF3<m):**J4pDWG#
%R#!PrdPB'eM\O^#]u:<teC%[u3Olf4[8Cl1234/"eBD7o`7lu>N`qR^_8XOQ(8n"'V<sgi//VVDoX&b(]0d$bZ,CZR]\dYHhOYqH
%I:,FAl6f<f0\%ZLGD*qY,/u4j7,BDo2lN-HSiY$dX_gXooA]G^_kWBT#-S9@C530[m;8+%:OAdIYj.9d/@Q:.qmeh(#1G*mqJtGQ
%je$G/87euF)p1[.X_:SEV]?Is?&<.WPP;bmh:3HB&aFHoqHS9rdFlZhlnEYIN<H&d,pa:.XH?95Wjt$&7XeS5BB*.o@P(dE?G]ph
%1:uP,S8Gq8pS+]iM5]!3hmkpS/;CK6[1$[oIlr3Y,Ycb;VCFJr9<Y&;o2.,<=l*En2#NDOjWq8)%LDk'_FI$12'[dXTD"LQG.$Vm
%4q2Ffe]7'?-uLs7XO>02df+9CmSoU6*At#4jht.n]O@dEW"e&e&X2J.mBs`a(9*,3.`(*3A9fhS\@$PphiN-9?Rg6o+=ur:;>o1_
%Fe*jb0q$!.>jkF))54D^X=jWZ*eYKkU'@FIM3NET^_"lYg^-D6/Y9s?eZG*if72\.Ad#X6N,-6PW#7(kE6-u[rggunEOL!'5:5mI
%NVG$'NO`O/OTaQ>rgfVT"r#`CC`=,FCi>#KDeIC`S"1UqqT^=ufaNIi*-Jj^A9EH0gV*e=NPj@mD^>%.aW8j!]:<gn]Od@Mm*-Wq
%D]Z[6<HWF5,%Ri/[LQb"4%d)OD(3T'm&?.[=:bL%I(ENMKlZqXgXk8)LIssZ*Radh[VD!U_8_&JZo^F::W7CBUo7VMkMKDNh[hD+
%c)@'*$gk]hE48>o]gecA`J%'*Fto=/^=3]*#M1p4&RBkRVPY#L46]I;&`uD[W0sl>]=jMd<Tj^2`.u^k5#idAm0FSX0:Zo3.-[L-
%]9eslgpE4#jSj#6$eNg7e)#^'V41HO93FohXjhdHU2YB"cVRj30s/jUTX<d'\C2*XOUaBHp6Csh)U$o:i&(NbHQ7tb^58ju"UJ2+
%e9gjj3Id'Z-DL;\M5$%e\O88U]u-/C%j1Ki'k.!ZWa'5.Cu7_mdYljcSNtGmIV@oLrUR7Kg:Go<A&D4?d#Ho:heoqT3nn?8f,$3J
%ljn/M>r2j0U2W8!C6f!=3Wfma`j^2;@,VjO67Z'3e!E60Z;^esdJ]3\C>fcX1`"nQ5$?c]^#Z1clLcR6=k[1TO:(QZ#D/+&eI-`U
%ksI<?QS*/Q1L#;Xrn*o84hdV^0o6VgFGh!nQK-Zhqhj&.<g8J6bk0&ql3Xb]gT/J.V7pi&]20$".9tuQbMmhE3PJ/::bt"fD?@K;
%V8\_kkfJ1?G.<Y,Puq?qI<N,Rb=(@/k:L.2O9)Lu8@A4df3M;X!2/]J4LX88aK=mrnVqX6)\MZ##-%CbP(.+K@.@MK[BWekQ:_rR
%5gB`[l.GOr5p3EIkC*+X`hotH,OjsH^#_fHL^F3u*\9_pV;9Q\[s+Cr'U&d"QZVBc8mtf696%t\oGj_%UF1D-[Y#irhPRYRBU@RX
%Msbbkm@\']Ka9*@#!X>?+euOmr[FX<Qj^F9NJi!aLr-P*WCkhN,Xag-]4>79lYupX!XfJ,E$a(L.frO[<^if%B[Bo&?DmZ^SJ#?>
%!o6H-52f6:2Q.gRF9XEF3((0*5\[_D`jJsoi&\HK"J+u4.fO,p%B<)^$&T+Ei@[T1f:jSmL>EM/edCAo%M;U+Un),+m+>D[g_n7A
%f?EI<"DXfl)5IhjbGlO,Jk>("a>V&]qMD9<1qdgM!]B"KkY=@Y)p/rEBmeLJMmR6t1aK3,GdrhE!']Z*A][TSj;QYZUt7N@'l/n&
%O_kJA!']jAf.N=Wc#h%:h1]Qu/0SXH]?]h4Xg7_>=0!Zd/-WE&NJ"W#QLJ?k+GS<7A\suj-9GgmLoQ##!n.e6l^$>7:(.jU9Q^mI
%TOk%lSUT-$,M1>jnUqMG`$!c7VZkl!90o;#kP1"?TS'9n>R0lASA2=`,F"I^Eg\R#UO_sGhW6tdo_!2UYt*8SeBIp_rX0nX^F%SW
%QM/;g<oTs@?Jc,h8Zt!J_8To<J8^cB<p.k$Z4hdg#JrdVH!\R`$lEsfQE7;ZXsEX%$%A!1p=fdsFQ>kh/o/171tUB*7*bi'_"-/f
%q#1CA:#So)Tee`16Jh<[gX-G;\9GWt[NG79l+)GcbO'9#h+4B:.`0HJ;^cgrm9Suq`ei[@eYOHRDB*'Qg#'.5d>0(HhM&"In4#o'
%Kp]:i^Du=h;$GXrA;%R'_OZ7uNZb!WD`R"lB0o&WZU8IIE]BfY0+"UT1L3kc),au*aH/@i"5kqls/IU>=)i'hL:B*s27ZPd>(.cF
%J,uS\*M9DT-XsgFYsg%]$^e>M@'Jg;U^+R.Mnu">OWJ871Y<(;nY4chLP&P2O0R`$Y_o6pQbh*G0t[=`=Sb;d*.6B`/@a"XqP&[Q
%]P5Id4`f*&'=k1bo6,IgE$T.Rqpf`?ciZ+dJ.]Vj0o)m3ab.aD22je1g.3YrI#+L?VJuCc>Al$[n0KUD7#\lnr&aeZ!E7Dp]!,"a
%L6#i6[g0P/hSf]2EcuM4gsoISZ/!VMWKZ@9*>u*^1Jkj'e8G%=;Q3qlWOs36Zp^R8LC@BMEY.3`&W5GTC3iTCGmYbP4?P-7pc-X2
%d?46q=&DYpCPYu%c8M>3eUn\;h.u]>X<fIX7+^tb!n)[p[j,6'8A:TEWVtTkMX%YibheUd`a.ES=PA/T?>D>8)Z-Ytac5+cZ]3(c
%#P$^XAP@'W=hBXNVBKU$VtJAR)VeMoF]1&L#cd)CfP*WF4?or$-K;H,/$gd.-*)&XbaoeC/s:S&?/AT-N2-h8iSlD2N<KjM+N#VV
%(G^Q'*^,H^DNTl_"I+$#l7/sN(B"1,p$I<ErqBXopRA@4@dSET"Pc59NoKM)kRMC]C1Br.W]Z^78MPh&'$G5tWh8(fJXu_11M:4$
%c(u=Gg<T8H6T#`)EY+$I2:c,)X0JcSTZ/Z05XWAX+5,Qm3>OW#.8l#C4k<a^A/P^bQH!(L]$M$&=R3!=Y/Z$J92&5nLs$roES6<J
%f7gm!ZNBfdaRe9];QE5SE;MWn*nsAmRmHo/H36F\Lc3(D7um%;PI'Z$"\^E*q)9+u^^<'=&O$f]&H!\Tnt%.TGKH0,L#(fJD*EJb
%hVBTHC&_]@<N*Cbm*/iOZ/9)N%XQSq-6+5/auA\dg]7#fZPU>m83a&O:aST8iRCINZ*JY0Y=0qhWmB6[:A)P84r0"??938Z]R[)0
%3.I#=m"K=8d<IlV=BEG=K$P4J&-jFrXmItIEZ7FiPoB]p`\Zl0ofh3h7$5UuWo`b-(#-LXbK#X(dkmkT![4]&M0]:;?DLYg;MgaZ
%Q"S$.L$rmOW#Z7PjoTn'Za[6bhZ:KFKg[M-,`%Fq?oeDYWGii6gI41>4]kstmKN6b,i)o'M</b4%hWT*KkR/Va=(lJRma&BI\@Q<
%!XE]`#3FpJg-@%f_XHBsp&U:#Ptg]oKH\qq:4D172<-ec35,s_ps?We"Y=04.n_RGiQmfTH+)_#c22f/!C:-@P2@iU,p\cI;#GPk
%*3%]0`f@g-UDpq\nC(AMeJ?MYq&ljaBh:MWD$f'Sn@li<3ruY'8?!;#j0+##"Z`.6@/O/%-"3$G'-o@R"Bk;)fou2#p]aOM#eRt@
%Ie51;9j;&:+gQg`16N)l!Ej)R(Wie((X(tpQp)d,pU1.[3fXBhbL^-?AZ*U3>4j*7h8<"^:Q-9[.4W7uoh#P=S*So$hUYFbL71Ej
%/1ed/Z^H/EIi2[7!U5bJfFqK=c+[(<jUtm,q4THt<".YRl)SR*PH6%ZPflZ]XbcNo8/h%pqesXI:#r[^%O<ff&&A.m8G.@cGDE42
%s#Fk?"em#S1D7[u>KCM*6Y2H]#D'SSj4f`^6\X3aW4e4^pF9(MJp6[32lerB?#;)iVI$KKc4GQ6fJm0#p6Xh*XGmD<a6YR(poqME
%'K;b36BTV4<I*8#8SpDp2X\"3jPo3/4a)4;0->!pE_MhH@./BG<`5(k4-*"6SSfB$S8^d5Ze6?[;L-HN4'\&8<+TuH3L:+OoJH>n
%gsk$cf;euI)k`rFfW[]=*/K,DP>K3E>2@re/uOgIlq5.C_WJ0%p9%_RQ[OR=O+pT`n^bjVf<"^H<mIlY'$@&brM&e:i=)=6ZGq^!
%)2etYo+KaI/M1U4cq(8E98aZG&QPD0M<JhZYUQCd*=90a$S"DBo*"S[U^HZsA+b"11B:E"F$SK:g/T5+>?/Vkb#'^n`)1cAJ(a7d
%f4%nA&"X8>L?Lbn<4Z<#gW\oNP2]gA#Lp$,;GrG#,GfRfrgqb7A=II9(8Th+'Fn+CR_!hNo.-#mM<rLTFbk<+fnpe7V:ieUIR2_>
%AYk7el"8%n:S*Vfi7:`OHA+\GMftc%OmWYEE;$m]L`IPn0#:)R'%=:\(R0jNc"gi+Mi/-.d<s3R))H9?k:3EXCl_6U't/&N35:NM
%fj4DR*jq:&3B7OK?Ej2o(r\5]`dgrH=B)'r^$5lr]Ofhk@E78eAh&]ns/(GhioS][*sWHEWj&o3IdA,e-m[fMf@$n%^]taUR.eP,
%#OoA>BY=4M:??4>G'"dk#K%_\H9uRe&[=d&\u*3R>MkJ_/Ar=A[K+"Q[TkA!.UY3<i*_/Nd&EXc:t"Ui$d2+Oh<2uMdBiU:+]:Ms
%0>Z"`("-l%%XX[K8%hU".al=F'`;eO-;j[T]>!D`<[kCn*t_k*0d?BgXJS!?>3h/`qZaNa3DDkoq,#sU:8I3<8l_4J`]:e:e=L$Z
%eAB'L\`2LIc<$Xt!C>5W/<=i9D.)'W"R>3nNZg<m#O0Fq=fclZ^*41R?A^nc'$AAEhUXtLf[\3bj!+'D&II.+5Rb#8]pC[]*&;O0
%\oLs.>hORbL%O#+m\1FX>$FYXRHU%#X`&_]cC*u/Q="G0]cBSuha2>5h:9&<I8\O3MrV+"[6sV1YN`Z)5lQLd6M;g*[jr]O(Xq$(
%j+cX.R!rc$^iXG6$G<UI[F'FS#s7VAnSV"N0k)1#ANF_HA2T@/-=R3pAp[<YLuC2uW&%4H0pU4sp?PAt!@sWVb2oqn&>QBU,F&8"
%hS6b=Xi9iIXb`7j,TpaGR<IT_WEk0W*NM/8Jh<?U1dQAajV3Sl;Mi=5eP_O[#VI5m(:ZZ+\lr$IR=Z0^33%@<WekD<QaNsW+I:ER
%oNFiVcY[.?m[!7;df;YnO=N&&O\[Uu]q$:iX#H&i23@Y,#"=JnWi8g!B6@EN(Q33BFUMg6A*]u9/.*>V,G93Vj[r+lMs'Dl)@`FT
%aWMfDM5+H9P#]eg%o`gjmXPoYmLp"KNG`#Q`3X[A6Wh%LhdW)F2h\'0Qf??#`@Ee#$/@O[+Mb1tebR*%nIXrK`+)m1(,-<Ef*^j6
%XPi+`V`nHZX;tXBHP>;Tnuj7n?b2:'m\E1&]3te"&L]e\'Tgj]Xpa^=l7UL7D%1cC/\21V:.=L'iCp2_D7T5?MT"i'#u[m?Q$.>^
%;ZV4W/ah_^9<:O"'OAha3L<oPVBC0!U"`,r(i0SAbZKj;gC#<Cggj.X4.<mMOMO*\-]LVRAhNgahRg>fYM^]mc5_*8NO.M#PhN9!
%M1WMj#*e+%G3$nH[b_me^H@8^cOVX^d-Xg;@ACXY!HP29YPTG]L?U[l$4oZ%:^`<b)m2M@n]B<R-=2/ka%uXhdQ[[8d\Sc';"<l^
%$Hp=g/+k4a.fQXt(N(.iD[.6j#+irJ*7W13gTf<g19e(3F,llRDL,c:b=h#ee*]B-;ROek7\V:meh#OUZL+s%Aj),K*^>@dpc<ul
%ITY-,7@u.[@$cPLICAEUXg>P6,7gc>C?8'o(!Pt1c4c@VO76nur_#imn7K+kDnL9G'g8X`4n*WZ!NSUel;-fS?"oSh'i!puA_U?]
%b$-8@9E/Z?`.>SPWK9Q#@OJ_j93-Z!.6hq%Ut=pl\)l[JjMcJTZbsd@cO])U6="JF7oK03`=k.Wk4LWM..7LeE4HcGheU?1`9H;(
%l27\i9W[TQeGoIBj7W7T@p\X#l@RX"Fp)tZi_SRsJ#klaN0i45>TD2UA>oSoduYrWTTeIFoX,h/8+s<<d\E'O!:Y?e:[^JhZFYpC
%`a?'-8+8<nIn!Nh]F-sM$#o`))hO\br)8_1fK)&r>Cal*'IijD7q]PQp^)+nIl40@THEJ"[;`[k>WuZFfu=mDO!AG,hLqN2X#u8X
%"&3kMT^gi+<,9.acR\c.LqiAjYJH'Q^19FE'Jg3rP@,W1^'T2;!^QbRC&8FH@J(g":t.g@/(RaQm)eZV)qbWFQ1TD:\V8*cKBU#B
%'[J=a*af<&EpU<\5%CU$H9u.n3T*sS]gX8kaIY/lV2#WTH;.cGq1J=SYpTfIV1Od=gtac+D]l>gXR>jXStP(^^l/I5?KDV3Y*\V!
%7GHXp#,9E&!mo[$JhKH1FSuK=\pF:5Y*Vd.n3RC_FT-m[**ueh(9u4S/lK:oqfimPpEOnVQc`lWG9mmZ>i]jbeq/VMB7F`q]H(A,
%DqF_.O2>\.*6N-b^#,)!2Mn`>KaAf*Z],*uQ1@"WH%e/6V@LoUiA_2QAIh,K>b9<(M\,jWPJim)0"&$8rbRm]NkPF_<^S^B<'(F)
%bF&\tG`NIm^H4`ceRJG?T8;EYj5t@<c\^0WqPpS\Vo[4,S0Lh:d8l:r(=DX;rQQDja;5@HQGTC`'M_(Hr,TecdcDiQP_G#?eFn`Z
%g`,fGOZ8Q^=6N*R(<U6J0IuY6`Zh=Y45GiQ3;Njfo,mFqNt-CN2mZNQ6LNdVl]'_>89c(NYBT`>"[--F)!5%P>4DC6DVr.n+aG(9
%45hdn0sl/l$%=$FVb>M]i?hCkUStXE_6!\C\Tc$)YjrM!/oJVQ]M"2Jj'<F_(9_PH_b@7X2+6hYf6/YT?=,gkHe4=r6*L;t+l_=f
%I_PL[*oh1q?mah'DAGk!?E0I,nBt$.o<O:V,qn#e'"n.bera%d=FBh"oLm(Pm@COh3Pc_\6W`,WD`E[4.I5er\IlM:4%JJjh<XH[
%GHXL5]ogZfbStt4I.>3X)GApTnpSi2YZu\M*hLt"]uP]4i]U/*?bC$`I\/R0+rkn^1.oZX3]uN:=4HW&pU^=3i4[Z"injR!D+IWP
%+)e>Nn+0!0dJKBp2nYREbEOr0>@6s`F#tc+U9:r;jV@'r>7KE%HhI!g^@sd;oBpI40F&!B6aaV3=HAt)X@*h*(=nAP<t##k0!u7(
%0#'#8VeUI-V,+.jR0ERAFL30]Xfa7/6aasgSQ0fJ@BX\F^(;l&VA9fja5"PjdpZhHjRM/UiB2>,/R2=/C("+Flh&%7KdqCJ.LQV;
%.IYGHVM^hfLC]f,dM8dT\laGcW$eE/BVr1`,qL[E)G>u=ghq,Z=3B;L##`=S,0et9Mu3qJ?^.R*F)gM'S6t'`I(NaESK47S*i,aQ
%ilOo?HSP>@_(DPA[KDG3Mn[`\-b6sqW$^'7U/jfb(Z1V?2q6&\m4qjMCp#1?V1nNsr6jk"['8V@hCgKYiT%BnhKr7.Orn&fQZeDT
%hPFnE?<oU"Q,(hIs+Xmlgh:RYh#p+B995RoaX&gOpoouI4YA@P?^pGZH>>aTlj^F4A^U(kmFfUe^V,M6oeX"a/@6,ko%)L:c>nT\
%Vj@(8(WGLbj)*[o8dt,>h^u3QQ_,eipZ:178Q^FgGtfpCo@`Dd2lC[HX6&-U8oUV1?fAqWn4G*#5HO4:'SoFap4_hmQ.+K.D'cm$
%Z+Y1-Z(G/rW=l[<d.iB]>3mTGdLQ%i<`b_KJ^o:ZH+V4)56Y-+(ZEEbaKa$m*hK9MX3&DQh:8"C>(-(S>s)E;$[;U#lH/#.C9,"V
%$eB9>BA:$6bfdJ2Jh2T+[bmn3>!*D2>rtJ5E\1QiXfOZLWnFf8;>k%-&tsud<oeMA[i3Z"^<NT@kn?ifG'ppJc(K"T4kB6OKB8Wl
%p*b7IHe#gM^=#apRdn'm,^t/%p?l8uXun8<$W"&%p"]_Q]RIXKC$QQc]"3?gCX;=7MYahh/j2A!\+H!l^X#u+nhZI.iX[+^AGi]6
%.doUVLfO@3Vmd,M]$O^U^R[t_Ir"!U-BpI??5=b)9]GPX@k43:CrDg"d`-R@\[ZYRP[l_YYAAT]ROR+s(2E)S+L&N=%u?p0&l?m1
%DZ[tE]H4TF+5+Hqj3;;2*5!g,g4al'k`7ir#)/=9-+I$X6SlR=la<5?ouYc_:d)NR#Zct#Q-G"-G&&mQH(!?MEf9j-[!hGVGog_*
%S+fuSc^RHFq9AZpF,!k&;mn+JC9^J"nnNb;C*a[qlU'rmb$;/5<C75EbD0kp4.tgoh^6%-neLCVPrbbFFHN7QFB#/R#K^anq7WRX
%bkA'/g!SgpjuE3ba5!g&pR.P;&t/KX`DtJ*9@[-qo=_G,rq2.CMNK.W8RC+\hbFLk[r?C`_$]\V<n,H4Di$""d@Gc<]3ScYESB5H
%PA@Hs:#95`Dt3CX\A7Q'UW`Sck.-Q!"pu(E^9K9tlg'[=6)%]sKLB?,-)<1m01)PA<Y=3M]+o>aOV:.9Qc$u`pRdLb`TnPA/ERlI
%]%G5XZT11`OgY`0lI'Z/_FaJ`iA7HT]_<a+T'nBhUE(`DaNAX2^5*T7jB$1)Btgs^&R$jD?%bP$"YVW<]DJ9`X]Q+!db?H+&mdW%
%k[?*TT*WJHX3GTEp2gqmh&NPO>:Od%7BJ04>C4c,dT3Z@4krr38)MmErr.%%Y^72BhHA2#[a3H4G5LBIl$0gh`3VNEqo=\em9&Lb
%kNmHlE9H?^'LZ?,?E13q"p33Cm`ntqC%o8hP2'%N)mS3g?'Y.BchBBm'Tl\W9<BdmpN"f)?1C*CPnd>J-n4]A>sZ"MguOa0<OEZH
%h($0.jGS1=Ea5L\Olsgb@\hl%6Gb#e4BlHn$?NKd9sn.pd<oR+3js.bcGd`nZY&Rf4;a#?h%Z,VrUhu^hd"h``?WgB07NTX<T9kJ
%l<Rllk,k$WD\hHQR9%$oABnE(I;d39^!?qZkP[d*))S]"[%';8J+rgY#F'TU4btC'jb);sI-706?7?k3UlT^0'qas^nEM/94a`If
%)b7V#F*=pc/c(N+l/L/hnQO[-?9<XM*cKq#?QWWiWf2mLWHGKn2==5J?PloBH'2?2ek_1T%r\@0g3\7Z;i3t=doRjXoIU^LT)$>l
%nOsPS%qdj!in7IWlS3Q(4ACLTA'Yj1rijc+3.I!U=-H<T>tc=-5.6Y.Xln8hpF5"6O:qE,`OWXiN1.;uqZYm=g1HMZgh#B]bA1g5
%pTf*gFd1V0<j#?tS!TPmo=;&rp+AK(do(L9/"I*NSYljtI-,0,HbFY=GrQ:>h5Bs!Xr?PDq3lfiVQWdR4/^^+Q2'*n09Uo<eW!JJ
%?esL1b6p7gr(d/j3-]b]4nl.6D[Y[Um%+0!8\BsE?"NGq*Z4.uX-W>NU#O2^I<m-6hcJjPP6X/+>^n_F$dT?okKM5HD`d95N%UIb
%+!3<3SL<l)E!8,j'Kun9Sus\D-Vo'",!L(JYkWV6^!Ap0`:^0ti71j*j`$1p?a@.0s/V2BCqiGTFSYV*Tp8WE%Ps12mb[VrHG>e?
%WU7Ua74*DM9P1GKf?$]r4`d$Vc<B_u6oNSk+0tb5TpcWQ$?*J5/ChgAY9/-1G=:t)Er/%p<MJHq4F?Rhc(EnK[e&VY*a<"ip98M-
%>'VQ]S%?)M?IZj2jC\(r==H0I-19.s/mV_9*_NiH'*q:hKOjfG/bS>2^=<UHgLYZ,Ot0n['X?G@X/hMfpk;\XCXZI0iO6<rh:kP%
%X3XK!W4'8aYL_^6oOBJb8T!c4@^)[N*O%JK0se2dB;kF@H8>0a>1``0,LjrLoX_rTh]/X(%5/[M)LK;ulc.,Z\DQp1k@J:<U1\"P
%92F2peI4<W]\FB-6fR+&M!BgSe6dV^Wp\Y,eR=NPQ_mf63dX?[h/IME<?)F3b,TkJA5Eb!VcojgjZM^o2q1n>m$7"D2V=otA.=bq
%-)JFQ8Y,5Oen@Q'V/N?V5**OST$SI&Sf"';D!@M")0D#\]m5k3O3VNR]3b'>%'PMA]Z^o@X(Lo$Va(/N)fN_RhiS;M_\HbX:O.2p
%G`qmm^U8ld/].rI@+38^)U;e7"T#g+lfp1d$$dKoM!.YgW5M\K>BT/s$bW'4JZmg8n9p=(,YV."n^_E3(%E6UnZ._1Q[m9Kp1;f9
%_66RGn9`.EMgmb4HKR8!i.^Ir%DRqMfc.Nrb<o4";pW>pjiRHd2_T[YO-<]!'4<7!hWi@)*Ye+MaA^hHSX>`\MWNgal2k37"oDPF
%'[6UPhhgaV_O1&B2uiS_#6fL*\![>"m/4Z2,e7H>!UGmVD<QUM2q\5-VZ]9cddmlCR;Wo)N)ro`SJ+S(=J!/,*o;&m_-<F@q<OFl
%do;Ff(`P,SY&q!Z!6Mf*XJr$m#jGG!BkYKb@TL!f;YmAhMJ?E)KauU9Y+ddiRF0lk%Vn:kaiS[*d]"4WK!(acYW7"X7%"6ib]7h"
%:**]f;8#iU)OG3Ae8C"-lr_VHT?R6j\pt<,-.o6\U929R!3HbU^inJdmOl=;IXdVDgBQ%V[M[d"$kDVcIuWk(6(%:tq+rN(!A_n,
%5t2WX6)<%=&%F\7$_!Cd!8cA:YSjVp-7NMdVMFm)p4L"e`Y+p6T]lu\9T<^Q+c:*]%s7&U;JiA_k()2]K@r0_YICe0"FD"s6s8U@
%$h%5eUVKAs1bE`'[[7-#!=YfXr"u_-?peL_!J<t%,5<fp`r:n$9I@f$Cf'%e-kKc3R18^2Z?XG-Eh(4E7V"3&&haJeKbCh;!70%J
%(dWujJg,$F%G(cP7I\AmU?_jqj;:MW^j"C+9I0"^5s#^?/olouN_D7)I9]P*iNa^4.7Ro@1DCkjA<Ad=5ogZ@DGeJXU['I`kepn&
%gp_UXr;+s)s'9(-j13G5pn-JIo6G4lC_VqQie=S/3eR8QTjES?*2Fm6-m:VjADo\>!CdWGKIG(^fJ,ZX_UK.D.Ec`9bn6hY,[kZ.
%,#Y&eSL!BM&k>M_.m-2h#0B^s((p3=\+a_kZ7O[Smt1?Gr?;f).H5f%d"A]fNM3V:CkM[s`iY@SkTbqH7`,2^lhf7jXN7Ecg3osS
%?%$l<L7uq;Z6CORZL/P,:0'U%oQAF7Tut.7CQ9(.TlWQnGWN9f^5M*5#@@O-9s&FqjWlJESQ"]D#r/P;e8YMu<^IR,`p.rcb!(L?
%n=:&=HH'76p6Gp!@2s8o1Z)N%I"tA<)0`6knJ2r+Kl,WarD&Y@\]TgH]e&Pj`OX2JgFi63f6U]=XgO6*YDlEsShDhMl+X?U5@*dr
%h>!D)'c\`!b+usK,^I/+GfX=;Wjn3ED=#jCGHp3p^<YahZJ<>Ms)2Zo7)J@ObrNt&7_P%6hKP.Flt%iM*TuFq4<LRd?\S&%c_$5I
%8lqb"D7h7j[a:9R1JVVdr@jEM&eo[eS>_d%,_l\Hq1=drc/J,%eOq'*9QHpq5E^&R3EoC@R#[tiCGFlfQRW:k3,&iB`Aeb6FNJSK
%!TRDFIOn,uRa^.SrH#&cp7[MuUj-Td2i#/\jF['ppU'A?e+$<BEoC3bW=>R6bIQb]kAlB0e8`9b-a9cZq9/!E1s-kg*9Knfq_]gE
%m>u)-pSQ6Ddc;&'Q`>+,BJbP.buD7ud^g"D]f1?'F`5dq4Qr@J3Ue*cIh6+6n@;%4HbtbG#o.r7+%<Z%5D54[iE.p'Jd$]-H(S[Y
%"<GO\38(-!&OeJ>]q/?,NbE2P>IJ(TrA_e<5)o,%%t@=G0Sjs%3qBrr`9q#Wn8_B464d@`F1V5\?hEi*l(Kns]fIJ=kO1ZXU,u>q
%LdH2O?qmJd<'0,\BRL7!.>u,FWSDT^%O*hj?q'9kN\gH`!C@Ea1S$]L+S)'3HGjV$qYL:PW-uDLkKB6pMhpeL=A<0(Fau4"l.P)u
%9quSW_:,FkmpA:Drr_TE^OtmU%Y,!:)uL5]s)7r6]0H5ZHjlID(0cj'Lrb;5k'PfTXh'<m:Tj0@mNhi/+9-MUief!&a#YB"h%d+d
%^Am?qFn*_+o2")sjQ,,)c!MOIVYKVk:nmN66dPH'qTS_TdcFD5%dP'r)\1d$omnl`h9#?3$+mPcFMd2+ZbY$U5E7a0M;n`if4UN<
%o^)+KVGT:<i+KYc0G8C<^TPmuY0Uq#puD4#,+^lZHFS9Zk9%h?AB'R3;Y;jk2&B\2ao]Z+##B:Ns8Et"jRXP*"QMhmq9WS*8\N"1
%i=q?..an(/1[rg'Xu(cZ(K)Y`4#m'm@MWQ$B-(/<d%Vd%$1(*!>:KegADF8R$LDHV7a6_VaMi\Q0_Ku-LQKNn501ACJs@2jHI6Ma
%q,ZtZ`mbN>c_?FN8u^-Y'EIU9a]/IGZg.^0!AglEKIOKJ!7hk)aQN?iE/_.f7LnpMcp^qtD8l^:K%W+7hr^5UYs]bf,5'T*0fHK$
%q#[8bZerbiMS815m,kMNl7\d$rqOYr[:eZ:b=_J?Cipk/>T4%3lh!a^Zt-FL#5rBEU@ei70K](7:2M]-f4Xpu6BtJILR&eU5uoTU
%/mIm__G6/WUWE#<e3,'%d4R4\.fo@iSs+aXctsJca.G`UP*bp?o*DiCGo=/kjZ54:paAYSIE8cCM[k(^n5sOVam0h\Pn_lcr')`M
%Ilb`s1g&_F2=)3l[aeKR'5gm0\qVj7g,58il^(%UKS/l10@\t@XEuB&@<_-[R)K#NaY'Z:g&LtGJ,&,Lc`^>[jXpkIgKUILTZY"2
%Z^5_?Ir2le3r<P0^XRKeN8`;n(Zbs+KFT*G5qB=pUn1crn(uG..PeXJmPqk8rD4(*"&FfYJ\3t]PJ#C-0.U:pOa86pS0bDXMaU?J
%P;!.CMARD(n/T$F:@KYE"tc%K>I*f,MZb2&T!&lWU^5jS>\#:B7D-EuBR#'"Y&Y5*821T!CZc-[,"DnZ:"eQ`d-R#(@h>`08r3fX
%nmn`>]0u(ddEh.R\?io99WE-9HicOILN@SQR3RQ'`dNL&c';ti&@-Pti)f^D*!Q#b_&2#*3Bj(=GoXa6NT2e-2Q;pgL*'e"3O[u(
%HQbo6H.U@8!`pPRG.nb+IWj=%p0r77cJO!#MuFshKd^pn0XbZb896GW*-ti,#aM>?KJ#.%TEl8KQ,l)?]7`r!DkbY4*a.Ps(1f1'
%Y_DF?.5!2JT?cR\4!_9`485ec(8=nH`#n3kMAg9^6F7Tu)5Mh[c-%hk/^N,)\rHI@oqK2p$kZo+2,V%u,@#cM7YAGqC0>kM:s+rG
%J\>I\7ro4@nLo:_Lpi.]oZ,0=7>_h;U>[1M[iP8(#nGtVK5CW!Hcsq9I?>0UN:2C1#YuT2%kcuG(11Xf1//T<*tkkF<,a7$E7cR+
%k@%J3Na)oh9\Oe(=AiP%=M:knp0)2/>ita%o'NJrfiXGra6'ifA@Xe5XREBp;*\rOOijAUX9b$A#ki>Ydob#`+j2:F&]0dDVmQtY
%JGfKq0AgIi&/eD)*.&pYBe=GCKJ'/haJ!L(N#TBhgP"7VD?MtAfjHU.aNZ8]#UB[n$dlu9/ZZ8fp52tcc<JR`CML#6K;*GQL^8Xc
%\ab6Cc\CuD+25u/060L*rVh370/d0J3=,SL^A-<Yc:@1hp4uGSm/11!P=/"DTt?jG^'Sk6;=Au#(PkQK]*=NR,K9t.L4VrCR[(K$
%iRWV-&an@>91G%4[5b04rlD[W)p'BmJ:kEXUQ[q6aDIX=)"[RpkO6*"p#`hHV<E<'"b+*GZsL<q3YookWSkW=N?,q(P*=iNqkac^
%H-/QA0"Yf_#)3hD)>Lf[Z0o_'(-Yo\+j5-k`jaPRS-lPFP>Z]^_+VC]QSE>AL7@%.:tnV\WQ<,^moeC0NfV&CR+`S^?h;Yf)Ye4(
%kuAq]6jJTt='GG#2CcX#]U"Pk.BMp7j.l)8'$I10;f!H'k!@C19kb0kO;IcYJpDT0EQ0N#9lJ1:VP[0'o'8iq4\R?j,E<$a:jkk+
%[UN@@E^ZOYh)\71_>p;WGuLM,_(tD[Af348r1*5Xg*C-a(0"@5)ntKeFKR!L.m1ek^`q;TF$J-W8A@Mck**e$+Y$u;M*@Php1?6>
%@`Dco=C1N]qfFVQ7(p6,9m[>EGd!;kG0r\TA]O57VWHV,=QD?Pbj>rRWq7M/o%FN\b=O0I^5QQLq3pc9]cbe]LhmhZdZ<P&'DTu1
%`4=;N!@Eod@30=$gsrDP3',YBcUZ:i8l4Xg/F\SX"Jtob=q@#J^Mq82H)Wn.o@s(/IN$Z63d#uTl`O7MrcJDU=l^&;LI;Iu]*XB[
%>%\*hL[[X)rY7Kd8]ge?XDTK1YPfT2//.T4iBFh,Ji4i?Q_>spXtm\@]uBJK)FS?V[(/U)_spXAJ4"?_8TscDKRsQe:P4]%@\AcF
%fa-PuMT)"G6`Mm,_[W<aK+fq4(!9,T"0Bee`RY0'_!kTo6cdThfQ:6Y8q5JuL3l]^5QYuZ%bk@<^C/Ai1O(r)D=XMkJD6kBW1h1q
%E8f&cR"Fg?:g1PJGN"q&M>r#X"X:Q.Z5Mml6sZ]'9t(@'DDfab63*?jbcZl7,1/oc*d*!lMcoD`L(=$?DL0]TO>$-;rr8d6iGcGV
%4AHmXIY+CMe,tm)2/RXaJ)G>0Hg]V;s!ha^H9(7])<oGTMufT[m1DPO1;VagQOqMH-^\$)Re`+W:E(N6B<WCS.n8`8]HY&"/d!c:
%:l+,S_s2)X0uT#,2U-&g:F@5>n7TXmAVS_X8Dk(l;-0r*JMstbbP#(Xqj-DDI!k_e]!4R@C]*uBQ+&e4?o\_/rom."jV:"j:ErgQ
%W?^i!n#p,PHBX8>O_ZVO@Y3Y\QtpVPJr39U^NNb&HFF4G($Fci5C'0diXsRe6cJ.^*S8p(>bYW%3`o(<Il(lG"GC5]1@`Fq(lU_!
%;,,+k6mcUc:4lLW##MUV3AUt>5T`TPYTa*C)8S>9,<J;SoeA3QkQEc-!OG&i.`IL9?ibqT],Z)tm;C%?7/Gcu>s5Y/=P/#dR^\\p
%=ElOkWj*C9lTR);1:=jWD4]b5L)9OC1S;"!*M`Ko68AYNV6*bsR@'=.D=Q44Y8@6"5+*5Ph6iU2l2<U(Pr_Sn]BOqqg^?E;IEsHd
%"n(Ia[G"tiETZZDlbs+n%6o+SpW<bW^7j5>j-S3_JU?3">$gh/@3f"p+<^U;Zu&3u2rbf1^bncV'5b=\;W4)6RP<a\jSaW^mhiZ!
%?:QS%`aK(hF1&e6i(_D[7[h>e-(A^EkOU4In$/-qXe=6_6Q$0kL9Lt!A#DK27TeUQV`DBk,&tCj*["jAN4LhE5t?Gji_9Ph'm<:l
%+iE\YFV%CAD:)Z16@F\*&YTVl**9AA-)[a)(<_$>bh@:`]_fm2;(c+M,Zo2Y7h(BJOT%*Yp5SW4LH!OC"!Z/i\2S@I)4=.CgR!_\
%&)!ZnOWF?"92Br+bdllK4R&#gI""b]G;eRY43'2$(6oCmVC*Z_`k`@hi<,"n]#6F5'EjQ9a-4'@3@PMtO(T1Te"^6+lf"MU@]f?r
%;@a#%r#1#h_2pm0[S4!e+?T'TaPZCA\T`O#lmPjH[AZp(..,4(&NlWCO)'-7q)lqD5*,<K:HC"U(+WjU*)03LV3l6TIj(CkdiPn6
%77nXTAh>86h[(UGMcK4g<grjnY&I&sBP)=9#D8cocamaRhWhG,*eb;nj%_VX*-=MjHjZ=_?'jN\%+QYRMJmpn>F$WsR(`X>]hes0
%H(T4$I05H91]DWV`s#h2Z\KXCH,E#`.SmTPe%$a+_\LSGTQ[B9D#!#s0'mf?X)[k&Bq.+Ue.q+;b;dQrC=WonAbr]5pu<eE(OS*a
%%X]8Xp",p>&P;W&[>C8g$*k/.gfn6frdmA+i:>>#T?#X&Vf?l,HF%qW\=U+>M7ceNhJs-rQ>KgpBAt>e:6*'H!lFr[Pe`N'Y@SVf
%OS&q%#?Nm4[*@@@'.b\0q#/+qD'Ef;OlP2V;]FZDaeoRFR5g-6V9O8UcMj8=[g$ti(jLeUQTUo"p=ZLUN<S$@je'TMJ5S6"AUuo4
%ofr8Wp4aBmEC*RjbGp$k3-ta3/\jRDd[K'foA)$.e!G*RmFDJs=.H'Fr8_,fLYEQUI8eGaGoab;=pJ/mY_Z8E)QWLdHE(gH+QLXY
%,!<1B_Lauc(ZDXIc+`*=I:d1"J2KZc,?VA--_0JDU3LE@l5&n>@]=uGRj09tV`Acd#H(CN$mM2f`/88.jP0D?0lfZChMblNA;+W^
%=84RkU$mu`oPohASg]:kY))XenmVV3l)Dp>TO(\u'X:1p)uoG,K%GqciY3+&fuPElm-2poC43N+q%C$EQJH%D.D36EKUO*G9?d(q
%(pQ%5"0Pg]9PB\DC4LE%AS9]l-`R2>PS)OXg)9=aN*hV*e:AhiN2I?nS#d?m0ROJFl7!'i9g4Ta%7WH74Vt.X(;u1I<JOU7UdT'X
%VB9>3F".[WC53nO2*+m,lW_%$rAUo6$,"qlKk5+)=:*^r@o?Nrglb%Rr_ip]I<LG%UU+[N"iTNSB9>:9_A`$e(sput8%<Zj>-VfL
%)LtG$clS3SqIi;GBA<`[&H_Zfq'IK&XQHtaI6Wc`pps#bWl\852q#;]X_^e-posBeiCK[e^<lh3dP*Q90\3k0.i2sthG:43H;]2\
%9jDj9>ef<"#:!'&.hpK9LJ[JNQ]i>2A7JFmkLg-MGAQdS>^kNpjA@t#Z"Y?8hN`Hi_Q`-kOoBG"EK,V8Ll+FR38n!J")o/MlSF),
%M:fj-<Z#L^m)`@3$n@GNr:(IkP\?!K_?C1rW(7)f/E0n"o;iUS<a.Za6?8pFo[MD-DCkI93686J113]EdRI.lJn?Cn#Uf;KE(PKH
%hY&XrN49q6A1]GDI'TLpU1?H5=Mt7--TDVuJMmZP@DW--Qgh4#2F,/@R=\o.`%9AC*^+u'EQGI$\G%6Ke3dM?^[3:s$dYr<!*V"d
%K%EWsE%aicBI2o+J$(&IgKs.qA8L7#Gbo.\,Ii>>HTK`:+14.EnNo1qAst)^Ks.l!Bq0Q!hE$:lhHSp+.HgKr]cTj)hm9s>fsTW4
%g%&$T%]>r0`m9n6Xl\BnNq<!oa>.Y&^>?E#m#[bUK"5(8dZF.dc;o(!!16f$f.\n>1EG3"H`'6C24mZlBM5B2=c.7.]X4lPe'D:Z
%0<r.UDTDR"n)Vi%6%#t/3u(D0/S8"XBk7J6rUgDeVo?l*JjSl`=Zg@:V&C8(Odc\M^@aU@heWeAZ1H+ili+^1VQJ435q(G7>""^d
%XY?6r\"/TWW:PN;aLb=]hc;0JQ7CBL01-;%Uo987UZKV%*X;8+='HQRqH-26,*GmPH?=ZLPVjkE%&ud:=I/iW=<4YPC=?d1C$TJ\
%2ODJQ\@&N<4Mj-1J,RW1[,Q[B!89c7>`5,I&`ABToe>EeCRg=Er3;uKNO+Ddj8@_u\i2YJ$IGp+=Kn`uG+c1-3M8b+)\3ok`dW.S
%E">i'4@DTL(T%[XVu\`ke-VkP/7%S,ok%K4]FUhB*P#hcK].>MBu);lcg&CdI8`5?1/5#k<u;b]ZE(lrCs%4!7ZJI#*&M7LG_Bq#
%TXIi%<cZ*i1uKl;mj_i&F8X_\<qV[bo`3fmi1]gMkmgnGV@&)MB4OXQi(0!*g2%iY0Tr'"GP:+n&h-,JU>36O3Cl_314-+CY;X">
%'O7h-:PWDFM:`AmAmjmFMXfW"#](*aJ;$^_H1PkI<V>8bF3e8ZBYBP#T]qb$+Yt0#o3X#C4fWLg:ku!0!3\S\1P&':#ijX#[R-/d
%,'#O;Z9h_EW-/V(<(=7rN6VkGan_etmOZCI^*/iJ-^S-QSU&B!hr?RS-g`/q#Y/j8E<\Cg@[@Vm&Bk;,GR>=QJX-'(gnPH$Z:GA_
%[]<`?S7Dd.[1IMRRlWGn*?jT1)]i52Gp"^NJ[b^ANS-RE#-mTE0J(fCD.#a;lgGG4AY%KSpVNBo^_7VVoBUF@bJT14a`jP^HCL<Q
%Q92I-59&H:,mY0(TI@+9W35"3Qndi0#V'^B(=7[(BntG,Df<`dC4U\KE`CN4W5Vo@Roe3(>g8LXS#;!R_>?57\uL)brcj<5TsWDH
%A2VXRIN7NleNs.:H[ENWd=msu[-,U,\=,n#,"EchXJV-Sa?p5[Nh7hH\n]>*^j&)8Y0YqYqt8oCU?nQ&Vocjl:(r+LmM>_bgc>"6
%Z&jlXS3;6@kDS,DOh9A3]Ab^8kU#;MLGQUlb4CVB0%8)<M;(8o$E2cXpo5`'2O]%g`6R;];]=jB,*u4?DAPMIo0qrY8DWZ)*D.,6
%Sc=l>^1a(b]#5)5RY^&;<o2/Yh7ugc*BNVRU^#]+3.(F?S1epW7IG%hma/2?L6j4U#V1pa\)51_W*SZnT6Dg9ISm^!S$oZb&q32@
%DKqdM?:t!mfmr[fb+[:k:aG(%2[meSCKblI!?EB759!J`,ZlsH5jrp)miuerX!']NO+1$50AO`F77h)eQb`NTM@SIQ=EaV^HnLlH
%hr)5^Sf'^9=X,u8&Jt'WM'Eg@T$n`-%>jLUdmE,@/0E\G*T\Gs2]VL=[;sD.LW</:QIn15E5^HaVM9P]A4c"e+jhU,iZ8!:6>jh`
%/32C+'EJ`Bn*R&#(A$3A47)%)*f$^Bn?NC^40*FB1N1i1oZ#G:A-(+E'806,+GN'p#9\Vc-.`o[\J<g>^<<YB+kH$lmrhoq_kRX7
%LaK%h2#;tZn#b/A(98g+Ea(1LcYbCKM`]mu7GM,&h9@p/n&I!JpB0$M\([K+G%XmWh6c`K5$`$a-\k=2Z<B@:BXOEap,r8#Pdaur
%.m2"W`C&q`N)5Th"9qT%=*MM_bIG$oHb4:sg3Yj&D[R"PmOMIcf$oKjpP&6U2=aiH#XV-sC;4cp")pP!;Lj2'W-K3Pi)"klY!6+?
%#L+$@BFY[t8/#59IKlE\5=13D`h,s8n=C'H3(U(ofL.KA]M<VP(tr*S&`oW]=Q4&X'<`tu]fbHHHJp5j7<9WRG#+n)>['7NYP$K3
%N"=l'7*Q$Db8FVS2bg/Oj6,H0J+7tYRd?n:Y(CtR1Wiq;7P7m1>juq#h$lXg"o76SB#]4$r.GW@XI(!VB&O/tpRpVP:_qVN(#C(i
%'e9[p4L'>Cn;N[r"@H.6'K'Te^I?LL*e&X`fQshP43o)NN54p3fp'[RC-PtIU`^#$@'GG/!AiU;bojtf*^l+JPHE4]XokHLL0m:H
%3j3RaLboRa_\H+9V6-kY($^7tZIr&ISp,A>q)a6e#rU$(1U/OFXA-X5Y/tC;"PK9E1Z>Wc>r4ZsGG4g50j/jB.dAdt3t"RlLM/s!
%m()rNVSQd.;('_fTHbHHMZ"9lB/Qd;JaPj2cXD>b_D:$/ZdX[M8)7:$HdB?>RPa`obUZY`=?#[&cFe12d"t3hnX3JB\qVO2Icf1+
%ZL)9u^Y7g%+)q&=HR%^QHFs*g$O>&>e:BiUio/fg45)KVEVAn^3+',f?^%T4gjQZUeAp7r>:bR-1/#5urgT3CE61`4r`k3O].Ap1
%HID[C6Se!M;)A'B*jucA^eT,7TWBiPY2RnB9LQfO.dgD=jTSW*VLiBN4A4Eo=V!Q%2M(Dq$$XIm>7I%&%-2.)#!U]V/@.K']_^D<
%lM2@R]531sJ[CsSIaZqfpULsjlC7qR+PA4[?1P2#p8d%cg!@*?-7qZm?)(O/4XLQ>[d/gXY*FG"$l==Ta)['TU(u'2:;DgqX(\pe
%T3.p)B#6GuNeCGq/ZEbllg==m)q4cu<i90h!^>Hgdmp/a?S793g1p79r]H!CA+n#rPJF$MLIrIPN@,jEl/3ASG2S'S]8&Tb<QSs,
%gr3jDX4<kGiQ,jC/<#M*<mOIoj7KdonZ0sf[Lc_4LTe2REq;alqSbm9ZW:nW[lS$(W9rY76$f1dH10F%#h(d?V:^b/r!6^L9e55k
%npH=HZNZp5hlbh#il@KAbk.R0QmHJ4N'EdN3@*0m>k!Ob"&<X%PY+GL>D&am>k)DlhnYj[nVkaQ0Z-\i/+Lu-,UYh%D1EU/=EnHf
%Z3;:c9,Q%@n^Vh"$CBj_F"s9[m5(BX%eE^BJfN*BK(S**0t6S8G4BW<WcE@m>qa@D.[Q&/]%a4VrIrF##/T.\'%\R;/n1<N]3-pO
%odX>HPFpPaiue9kT,7/$<Kt.o[btU`#lmF8/3`BrbE)WgG!^X%3Yf5?S2-=8]!*W)OKu1%H"8;8-$BNds%oL3/_H#f.4"`Q+YGR=
%_'e86<pG#oMB4CHCJg*Hk)>;o5?YafJ]FnsBoccTJ4+in=0GuHiTmk]:(L,BFW>L5"n(2Sdu`e^qY)R"QQBD$Cu>PW(Wuinen!fJ
%B!U["=H>oN<$iQrb1DS!@8eaZ/-9t.M\?SGXmdl3&X05$OBQV\f9a=XV\'eW5nM57.$:3?Br3U4E5%8e0)CCi$n[o;9aJ9@AUcRi
%!GWREj(sbe:Z$:7G%2-PrAp\"<8P/ICBNjU#J[G%qlf&,^VDOA&AsFOT[dbh3a*e3Q@\6:d;+hAP7;]@GQJXhcs"!%Tk4]ITo(&j
%>&+Q.Y+#7mp<2<c#W5=mD5+U$Ybd)')a,%Elm6$B6qgd,3r+n*)ndsmZJn1@&uU/\ctG)<MBGj73n:m#lHGPYQ4YNVF-(m6D-(`j
%%Oj0EW$4N(lVA8f`/`m$eD+/!6'%2',KRV*'iEtA37r&h(4q;Y`ZV*'W1`^7O%i1aMC3CS;>9(;"3P&kC*Vd)>-Y8#RnSeMCKdiD
%(+$q'25JA'dTFRAR\1*$1n"d[T2>a3Aqln.H'BW@WDQ,M<sl!"L0!9$6""=es)"!WRq(M'atgQ(.2++q?*.BPW1(AOU(ch61bM+X
%'r*Xu$%YO;9jeF,Vc`Et$)"ud)B^_,bL%#t%(U.M=j2$d5,5N`#/\of:Efp?G41nhdNN4\'5K!oeoV$T+ZeA2?-kG;\Z"Qnl!\B0
%6M*`!ZB"ETMjR-ik[Fj$LWI$6g>=I(lu[<Y$eG4Q\#d_P'89&#50J8D].=43K8#'`2)FG)&utkLi#'N3ReF]S[fUkPlZM58#P,P6
%C!Qq2VQK\QGAUuB@J-ku.1V@)K<]*N^5*3.CTr@4$\m4D\TJnCUFf9>fiu0R`+BtTlaT-a>LA+>U_Q<n9K$,+Qa*1(_J!3Hi4quG
%K)?M6_>]q/q%e"T6]se\6^CLUXk@tJ9kAKiS(1pf]/Yf_WpG0&p(al9eep-kON48mNo/uflX$+MOm[ojE+1];'U"g0i+qNYXGJ&\
%kDiJq;JP)?R+?!GA`+I3.c8uJ?Ab:"I$q'6$Wd!4nT;a15H9B^XYgTtYNK2$Ks,1Q1_kali_Um^H)Qg6^N\n+&p4fATpB;Y?ECBF
%kW-2cCh%/Sejb-Y[$R>TSF&,`d"XM1mqAY]m\@`L1.BV>?H[<C^med>CN?=^eAuHnl1ufU^oDtC/<&>+%3Uq*QBQq1XT]E\m'\UR
%:5Iq"+Lpa^BRk.n7o_!:7YMR1i,li2K]1Pe`f3X/2-uRMHl3rW^R9(;1t+?(7NG*(0=\ucF)W?3%dq>olV<sed%`VA;JcfpDQ5A,
%S#F"2fYb7ENPB:I=l+n;J8aT:$E]Aj1L+P.A5q`HO=^mfClon*)6Z>cT\jR8>W7,$&FaR?+^j1n(J*1^+W"u)mMjt-H!;_cb4,5P
%n!t&4%9*6TRVos[Q5#:PWH/r"<I3(iIGqco5e/Y;5Xk(o4@VTJ:]1XJ#$Ou<Rh<g$pooCLTJ=Q/XWq;X!TpP/8iV#!iQr0=^f(C;
%iG5[9nk][Kap-G^],n\f/ZKpKaJBk(21XiT#WUD'.jiHBD5<98SfQ/1`gRF)nED!n9/qmESLF6d&3A(Gfc!>3?hV-#4OpIQA>K"m
%EId/bi'OKi;K[QLFcQ=;fqHDrYUcBTn1'A\bH877.u,$#g,aeaLV.085U7MEd28SBpI/pJ=q`@l[ti5Ahr.W"b7W7/N\%fB"Vu@e
%K'b:K-t:%N)cO(+d?uP3%B+jV>['L=bWEgu'(f@oLLV993a;"-JAJP:2HbUUOO78`/Bcs.4b>PSOXJF_S!CC@ZH'4nh&_G;ntG7h
%2eIS@ar1WfO'Sd^F/SDmC#<q'@<8uoNL6N*m281lh?j=^TWS%R@P9m(lG:bEc>cBR)G.k63K7%4;2/(U&8p,?`Dq\>Zs&nQU,+Ft
%KEqad.X;(GFO:40LZR,`-9k_%NCX.;Ma#:l5o:7dU03A_2/en;\rD-q3?`'=gZ)s8L6);Pi2HLdYcWQg*b=6Spl>\PM&[LPE32U,
%6cZYZ/.*&7UR+YBV,$(&UTG[9]hr)N)+`g2X`P"&K1YE[UL#atDKmh`X[W-G,!qTP'[>%A3\#.@/>q_KNZXu&(Tbo].ul/Ph+*MA
%3'KH@0"6j[^-.N82\DL$)s$(u@1C=Z2B8eOdPcqc;V#(ba[!g//qAY`Yrf29E@#2-Fb!3Jh;n0X\e.G0:5%t;eT)3qh&JH:8L^Ne
%foc6P"u0Oc*%*c,#g?<#`C4!`3[A]j?IQOe4#A,DgUcKUHXq,9e':b6cLF5<09raCi^B<5[OJg*kHdS=aM<_t(8;M5lA<l=Ci:f%
%ZsBs=*g9'W3lf-?]__KkGc:7lFIQemm\"gDTarG/,o&o`pTActfbA%$!)[X4:cVL&f&ammfe0'-^\g&_%FkT[j[G/M_/)bCjl1Zq
%^Y*@om`qSe*39pJ*0^FP%C9p!3c[^MIB)RHg#43KL8qAe2Q1,gk;2+J==,`Q\#<cZlH%7MD@m>`d3Vi-h:f9-m=ft]X*>niAG3jn
%EJkN/K;E8'q*7tD%2sMVX;.]Ofc1&o0TV?B`!3hgd"#k)Bt7+djou3Kb[!4CoP$1H:mDoV+:@>:WLuPdO`B%RebF\VrdtrAR#*u,
%N.Orc-!6H"NeeN)B,``V7%D+mJ-*8d/;,tHYru<.4^[BAo4Y"WfX.Ao6CT7cg^o[.d`C&:k0-4;6oN]G7&6(X4%m#EZ09/rdDAXg
%J]Mc^WBE_cm+d']BXgT:3X1Il2`(.m-oWlZ;!Zcfp@AB,U"IE?.t'6K<uQ*bb%^'/;%Mr1Bk0imQCD0?U=*UPs7R\6<Uc5P.Yt2$
%$n`'bi`$#9cr5gQc2%i:W5j#`)9?g*]?WsU3molo\^Er[7B9,rc=#;0g$SC(eXT0^`1uJrKH7V7"KUci1:p)RSKeQZ":EP4D;JBX
%CPOoVZe,P-8lIlaVdcYN"&EU*ARnh<b\"E+ZCJlE=BK363H++Qo#\R8o-DII$)S&S\S8K9B_RTX`N5(&k@_\D*E4TmSZPI>j1Mc1
%&Ps1&Xs6l'<m[2]Q[J&KeLDtcXSCVXiOPD:2/,sl-G/#,6@iLD<UbV:TtJ>%L[XgCI^YNbeOk*Q#&q]VG>kmEE9_0R-s<Bi<'0^s
%6#bk_4R_XYo7nTArh-'(f_S$GVtM5i6.i[>lWrJN*$64s_$]R25u$Ug,(Y!Fk7DQ8V'*Y_=0,a8E@ot."10t[gB;RB:DE(G`u!:l
%!I=r6B?44%C%;%Qkc6u:Q'(&7,u[(i&lSYR0TEscR"T]:aU/N$1M[&`^n9*h?bjF<7Zi@'$E[ajGlbrNs7-k4P%\/hLN-u%H_?2s
%$egYdfMdXKc#3eU,c[buD?m-X-9"GQfuqd\Aah%><HK1?%dkYYnCS7TDQTiF..aH*k5[5%81;GU_YW5A\m?-Q!07>u.R5P%H)RIS
%m^,g*VrcTr>hT3#OskBJX&R[^,(sP88P%q+@9D0NV!8kC&[Zu3@hCc)OFU"Vf2-(4XUE_rTsu5ar'=ha.p?n4J:OGWdLGpso3!nJ
%F:,>;;?N<%[5EoF6V@qJ!ic?IK4QeYcN\62X/Ul:%H9N$6MM.QSP])L#B7RbKZojME"kIHOa@HCKU<G[[_Z",bTb8.GLEfbK=9us
%j+tCK!=!DeJ/juK'Wc757fuD(2@#9fXQ:Zl%R$-Z;YS8HThsS\<.bR_#Z9n,#=&L*dq<)A6CUVu,$-=XIis+?auX]/[hYJ[3st1r
%h5eOF$7k>1!.*ZV@>;YUnU!bLGXOU4@b1X*#o4PBG-A%4_pMKhZ3Moh"J)m'a96.@/HQW4("!TXfPpLGbQkuD.Ug94)$_"AbnW\S
%c0,r`WhLTFLI+@i*[6,@AS2#g$7&"A!sETa!Ge\s/<XL/.2r;-AaG<eBU#iT^9BC]JIPF.UQ%MX'OM*CSC8)2BK$8K!4>U_LE5"$
%#[luL02t]3ka6YRYk\q?j)*Ak=hk5=>XsLehU^)jEikm@TdYHm&;,:=TP$V47g$/*5#b8g-.<%u-eDV-9EUp-_b^r1>f)eqFkEMX
%<IbS=i0ZiarlufWX0j8^+s9"Ig?hs03e!AG<n*+^"pkC5r`ka9(&`F*F.&O(,L+;%K(L2(?U0joi3t%PD(S7D3,2H\U+L6OW/slO
%_kQVHr(SkI&e:?s3U8L'g^6dW(UD2Md2CXHPf"=Q'I"D(FO7pI"OSQRI4[VKfJ6Pd[AHEEjU>s'^beY;M_kY(XLAdPEKd8Q5h:ZJ
%-m/pkHCSKmHR]r+Lk9s!KrL?'`Y:hG/UA2Km#"O=7N\HV,%A_j?m!3:;]hZnefr*_:"GH%Q?GlV`Xl%c9o&50q%<,YB3g8UPm).1
%_*cdi,b"S>'bq3hNIaQT%%>EP<9an`;R8Fo<38N<7J=cS.$(+P4cm`c"18jY5i7O:!07oobXOtX-*A"8S.6)o`FtoX=#qn2]6/LE
%+SC'I!rO,HlW'V_l$<MR@0>Ubkc:r/D(It@jq5p;5bI\)I0;u?q#t/bq@V@bVt5L*APJ+PF,,g,31K,N'k!\2[cLq_lBjnh?U4o^
%Eum=22urj\>'#R,J'^Q<T[WU*!(lDYXRJUAP8)&R+&Et\X&B`<fo56!E'fhj,Hd0RaW,F!5T)]%\^]XV!BpXh06!0E_8ELJEQp90
%e#HJ#a#YpN%Wqa^iCF2+._6#OE:t^cG'Gm8=0SY'3Hl5r[p*.:R2HFp<1aWbM%hO<$V1kOC)I0lTkA<EB`4s?Ai(?Gg^+!iE[3(-
%#d'-n3\<c&d)!;f,JZOFDf`-Ri%/F&C?/S!4X=!Y=kQ&pE??8d"oqXKNob,*(eg?,6)N2I-O&&;PsOMt4.T6T;^H0%7pT0sFaA;"
%1?u84-6s?I9lHG;Me)koIFQ>g41"u$&=&W@NXE'Z@YOLVa]/GVLl4.m<&tcNi<dunLrepXg6clnco+M3J0I.(=4MUL3WQZCO)D,!
%B!:(lM`S%f/s+Rd="kHEG;>2e:bN/LVg..1aY[4'")HM">_Crr@t[Ye8#&-eIOH/#VPfA.?]_W$<fIR4&9nDScVF@C.I7GA&3ORi
%g<[k7THm&^ka'%Q=\;gd#gmTB<5r'3BWbBY$?0R>pEgkb?#c0L;SS:P)@/\Mb.3+hJf)<('jq5%jDT/A&s(:V35h#?i(Z^pFp=($
%5aZf.Wbc^/cuG.SOl6/f_j;chnDT%^$;M!t*fPFL%R!f^=R_OdcD1"o%Oi`Jk4PZThmJ)A`:cVEd2nfSM*Q_;)J6261BYZPh[&'@
%pD]""*JDf/8Jo6K0ccp^!$"d%FB(apOW#u3^IAbMTX`G4#"EHkiFcSRB2)U+'j2cg;V]^NT4jeBaEUR+L&NF&M7s6E;)a-,ThEj]
%3WpMUG_YfFoQjKa'*SPQh@3=Y^nJeMY>TO53).sNCa)%ae0,:#?:C@-N'Me,7@;FGE-$Wk$a(JFQm1aAUb,*cDRD2;o\&/-RGc+C
%XGVJT:S(&/_l$p,=(^"/>2eV?H+AL7KY!M`oT>\ri7$@T4^A4=#;h'lre@D_abp]4%HDn8F$Fk7q2nULq+fOX'>$$NSsk#./n9GY
%/00_X",DjfFP9nKR]C03+XFC1#$>s&+]PUjj)-<P&Zj!$_V>ZI+JJD6L6s-)PC9H0K'c@Q>6KEOY#R',8Vhhhe^QS\>dG]l4Ef<E
%LiYB#%#q-ndG7o:V]A#h,FokVF7:NX%'7Fb'iptu#L9A7H,c2iHe_b'AHlN-rF=I6h^7;JFpG^'C!(rYinu0H2N%D^/$>m,o^&<3
%N>!j@B!B]k$P<[Ygtu*`.aZPIhXVdoWNjdB$AC1/q&.2f&W3!&hN)/7KP-]VLKImd<NeY57HA9fLEha#%>="/TAY8$luGFi\*65s
%95pESJit[q,G/WHOt=/OUq2D8m"offTop:bU957E4qqS)6bLh0$k#>@kd#J?jE9-=d@`eul7<8`:MrYZEca_KjeGWDR)n=5"<VP.
%(OKcF<&5$&WhkKk*/5V&e4:Q2JuWiJ-Ai9eX.kK]lI#Mi_EarKRqUFq&fqOeX4K+99frK9kS!G`O"h+l65p]pX*UgS<3Dh$C=lJ7
%n)4i07_:#_8i7;[ThM?5;ZD8&LcT)N8hh#EY6QjtPUJ*PNBU'#R>'E2ZgqLVMFM!O9]rd4i--KL*=fQVMjW&G1="%pX$\tQA]`,e
%#qu=Z^Z[K*QFe;aM[C6,o$Zq'c8\i]dGkJfePW#764H$sFt"P:7THf!<&YqYE4rFrp1T&Xmel+L1H=O4&LJKKZO*)c1b=T]Yj/=P
%Y^j=IbCldKVb^NOh-,T34&:]d8(4+&F5"or]_LP;.5I3h/,@*+arqmibPiBC,0sJl-b8?V^V@Kc':r%_ON3F0Jnh/N>VM]ue#?Y=
%Sn\KkXleL%@Gb0;]rd$[_:?f!E-S;2T0EdCAtCCP\!k273JV=ca+pQg3tAm-%ekFY?udf,4$Rq3YqA37Fg'YOYHBOR"Q\IJim4dh
%KYrq&Co[[p%<<#)WB+RW\@rRXjHW!J'GFE+&#7(;p>q`tS\Y&)Y&L195bOO#76V=-_5fR)O<[F45!D)YnhTRO3o'V?6uiD-G2KJ(
%E8eX:CO$Y<G<H6HSu%RX*AlL9QSf84aMUq&CaU::di;?j74"s%a>gI"oDtudKZ`QU@F*.Xb>K@u:>dl4N\KFS:'Un/*J\KN[_WtJ
%cX?j>:G*<P*hGQ@)0Td9meoJh]`_@.],1%dK-qHjl8nq6$eZ+gJOTU7(\19!$lq&CkP&`.7=k.@!!;%s8[Bq8UDVTqH3':*"c^Kn
%+8-_CAUZf/%'K$KKHkRQ%3XeA)cG@OZ*_)D"!!9F-9OFRIG/\nNHMc*HPKuVH,6o"nD)Wt\kD;:1CVa)?-3Itm9gQuj_Zpl5k&cA
%)[<6"P&]gRB,u4uO401(1>g(dNlXZSElT=*9VVl:SmO]IQ$eX6SK=@dFW#>^qsXJ=,0V(^qL'm;Ka5Aqj86%?S@G;Zr6<$F?VYS6
%Kl\#f0o,&\i>0<%q!J]bDmRjbMGAp,a%'NrQ[XWc&^6q.#+@2)^EUb%7g?C.D3-ug3[;F.F(-ur)W)B]3)Hb+pnJg,V\(DQ<?TGY
%r*mYpn#2X,pu;[@TY+l#]6To0HlD/uOQP./8Ai"B0<7hF,K"1M3M(S;FlJ-Ls-lI)Li=mj-g]AJredFq,=A2TalPCZqSfPr?;&GB
%8D&m)8C]QB*r\UF^.?mP9Ysn2Wo$a9NaDqr]7Gk:*h#'Fj=?\/K7D:e?R\];'ummV:-Ogfp-[&@Y;PP\:&J#<`:muC1T?g#diJ@E
%KRJueT9t:[Br3g4@HTLsrj],ds2OV-2!9!nJA@c>k?^)boXZK&60BCGTtmZ?(1a]!!XUq<$8t"N_*"oX!eF>Y[+lT-LG:qVT^8Ui
%M*KL./'M$)-qBr%%kXs9Z4>e'3G:7](#<@BIphB*<4!9FD[(L5,2:2$V(Wom$uQJX;-S=Yc(k'Vo;MQ<D:gDCA(A9@O@%e4X:AfB
%!ELf6aX:;uNbf[0ZS_i"RTL"]U25QaaG]*;&m8N]27d&#eOa1k+@5LE[jfp]QC$=ZO69/9VZP#CUmi'hH:<%m5HZM8?-h^S]?![j
%1I*F_;?9Cbs0B=5O.2&"'G\&$b>JK(0d'O%I,2UXOR%-P2I@/ZO:PIZ,p91s>0t#O_&0;$):7CY8`8C2h@]P,8ZF3\gWjisN4:.3
%,u$<^kE8%=<Q,O=*8<u#n;B7(q?0Fa-_R_)r>H9eX.n`(\:E/Lb^t^kTm4h<!Sk#Ua:iepUr@.H@N#<aU7NH5ib!K.#eJ;T:Iu.h
%8n,$R5Qs':i@+>m"WLo^8;!d)"-7=.+!<*I9;SX6MSp%$cN)0mL,g$6ZLFc;lk'@&3<kO+X)U]<`S#8/k8oGsm1'H&95,\rCdU[7
%.8kt^qGW=tRCA0B[Bj93H8jdgDlbT0H&%mV-45KQh$n0J.anuoPEK`D93o=Oa*,&Da17?pY8JtF:XhC%@Np`WCGIjbm1#iJUGWm.
%\36iq4<'kqcA)(PRM*EI*@lfIZGOJuJp`X!I-`l(./hrdfUu-U<b;[e'ngmLUb.E!e)G0L\b/.3]@@A$R>Rcd#E,@5336[JKi+M[
%H.RG>i)h3OT[AS>gra`CjtRtO%L"o\i3C/!E\^U*bN;G_V&\rLCbSV$+mDCVmFbLD$;:g5=sq<M#!V$^=GD:r'42ioE@&$crYpWf
%WnaN&?;^M/jkT:*EO^g(6Hic9]gb]u]p\R4cuiJZa#h^UirPF)Dr3MoS1a1H#2ZQ'I_;3IK9uj8@#&2J3IuVY@^Ot%kRD01Rn".R
%C,R@tTguccpl&s.W^oD,aS,DKnDBH!5$U2%jP8A<"'HGa"ZHM!$Hba#au@h7Vq;bf$eiNWp9>iDN=OY[lU4)0c`5Tj->eQ>!3[]7
%+Uj(dp.PmM%cLNo+";33Oeii@lF!:.?j^sM&-'Y)fpRp`QWQ,JC'ctgCH#`p7U8Wgg_P:EX`&4/!DBX03&O=L@.kJ#FgL`)E6,=k
%1.5Z`dlnh4/<tqgg9"pB1DK"h>_iJc?OSpJ\>cuBcnQctgfW#u5SOB5TiUBj%!hc#GhAcN/k&ZOXhCs9RWFCh"0*s\HAbT%f-=j+
%Oa9[.Wo+mlZF&V&9U6am\?i71IGiE]q=Pc6-p*fKb)*(j;9L/Nb*d#l-hc9b68YE;H3JefUrTX'#=TIE-+>hF(E(uE/On@*m&\uP
%eEWmH>Mgq3d49cb0]]adVH`EX(-Y4UZ0D1jQWb=`U,ITeN08mr;gA:mpMC$.&Y"dnfKBY\:sQu,E<[pr5c"TaCC=t/m6KLK8Q6X;
%57CR5"Q=&GmS2s^7rdA7;-n<[6HunVa#_7@rK44*e9ID)Lu)tg>Y$"%!_R%1A:S1E*U9W&I##Rl:YT7Il!.n?<CK"X2r;oDk$OsB
%]_4.Y3P@s"af*B&p8%$cdmXoG:-rfIOY1Zgb>tXaCZ_p9,,i&5RdBdDLqM`+^<`/>o4]C-i"i:4S8W/$6;U6-Bpd-f<![%!k_6&"
%K+DD[m$`]SM5"!RF;<4h<;SXQ$^rhq`tI]=7X-Lr4RL<53K7LP@/A9_U2S6=bGX&'rHUhig:!*_QS_fJ2a?d&)6SEZ^]i/^rQDA2
%IG1g'p-O$2YBUMQI:q%u6sgFGV0aAhn>I.M6bAW8`d0:I(U$!+iC0AYQ/IQRbLOX9Y0d/@og(G,X@'hF82Ucti>>U5?/*2J:1l75
%/#s`(JS;6k'H_8I9FeRR>.'t#+hPFhk@TrBBeNb2KcYYJ7]>#P"<'e^h@/(QNHGClUPT*EdcNbn*0[cE5aff/Wem[cg7(CB2e>^W
%6SHU#Se2p"E:;J];4Cg>5IGn=\Q(74Mt"]1bmGs"A\"mYQ%eLOT.63#^?EHd9WRNoV<u8(q?Ofl8CE#(i43O.91I<21Egma6]Zu"
%_Q23Jg(`',Yd7Y!:)fK'Qt-*S#t5L.2%%0=?EG4flpBnT54#+Zo1E9R^@9j.>RaIhH?jZ#EYd#_*%u`qq4NXH7J&nQ.AV<MZ+1`R
%f\:]o\oM)a)@>A&)kTVKN-;YIMMK>\E<=^g!H+=MA>4Z='MVR[6HcJ@Lh@N@)Z^`6>\mq(?_cBWh*0IA!h_>%OAUPaG8o4j!@GH^
%41Lu"[U4X!:o*:-n778nbbS6S6mq.G);&Zn"IL_[/>F`#FW&uOT5F7q=+s,Gf0MLJZ$*"(N,B,!k`/i').c6VF)C"0'E#ML0@,t[
%0Z#rB9^J?ae.'o6LB_G!2^SZ,eQeA;\YS1c'E2ZbIp2+U<NcLNI6Ccp%6ZP`d@6n838cp3dtU\3pi6'j%]Hr:?HCipa](=WM\1-_
%cM-=SY8;V.1NrJ0o<n>+(Z,U<]"p6iM>+kP[.Q;5B^3P,an+5#5\-d8BRNZ#HV9$u/XseQn&`RrmsAu%Lgu2d8'a+]UJ9eEAfU@6
%U@2p<hWA[fpV&Rr^*oaqp+?+\KAtBY7O4V0a[4-IT&8>gR;MPs?b2&ced:&Sg.3dG*,X"Y&_<;EB$N]i:<3BVY-+sEZ-.;`CcL-[
%h-7H-_LU`Wlro'DC3G[-g$T_<Y@+k._qC@)jdH=e_K7M0<S@mVQ9'I#0;[18h>[>59.&=pkt.Rr))5pOgd=78=Up!P;+$XHCtr)"
%ToWk<UX-iWMB8_7iPBMG[=d1rdLk+)gq[thb1\)oJVW3LWnn#^B'u$H01SAmq@?Q5raj$_gIjIPYN5E's+c&Ilt@KBhr2!#B$g"A
%SW\h;^+hdhL.k,NWl"o'S2MW)>a3U<*$R*5X"DYiNdj(nFSGDCNK]HO2R8^M2BMSU3g,_]BQfRd\,^/'@H-LS=fH._]iqj&B^r1K
%GWd[e,qR#AO]Xm;)Hmdi7)p`_%pj=@Hq0gb2TCMP<)(-]+kAjHD"boqS([La38bOr<Bb+]HL3GW]*7X"N7+TWShEuT;e+/W1VCt4
%1D2FPs$<.=VJJg^keUS_?eVfQAD<Sb(88Q7[VW:pWEb[mco`2ojJt\MJ,dbTjkJOXO6"qj1q'R.&3"_^&9A[XH]K@kR@6!@i(H3P
%:'N2@7oEV4&(=\>&\ch$+!Z!qK7MU\fX*^rp<V`lJ@DOq[TOt@E=@#sN<[P@MP][o^d],@9YuK=SrKoKA]C]_QV%[f*FmIl2!"1G
%eeuB();Ah1m3"r7;j;A$H)slPmaL+I3XD2'C7f;C>G;i`(\IXj#'SZV)`ck0NMbD^Bs-[^Y'e97'SNE\f:C(9T"Z]_nK+7CI+'\_
%$#O;)T='A;T&=;\1K$A!+rgZZ()NL!kRa/Lo8F(0EK"#%+2)R-]@L@UCod!L%--EUAcj,p`WpQi#35Q*d[OV7df_r^VDZ+DK1G@N
%DJbXhBG>@oRsT-'KLedV2^[nO</M%_C#@1Y=fW5QGN&L?F0M5@ONLA":qS(WicaE2hIuS-Th'2s_j[$7.LIY=o=2_Nn<V#G!\tkN
%1rA:8g6Z'fWdP\!bD2N;)5:RmAEYOG6tX[43/X-T3jQmWD&9R'++?iNU58*gSo07/ZneE&bJm+#Jd/SXoI$hrA6LhQ@gs7Lf$\OP
%)a-/?_:lO+qGHEkEruO&X,b&V:BPnu\um&E4;Q3t-Ybj?d20Xgj0g=`hB>.iS`-VJEZCr"n@b4.G'\"X"[&#*I!Y/bD8:pD$L;N?
%I'tK:MRB'nb(QBmd>^<Bftr`Xrd8K7:F""ET!#c)?)P-[[@\no]UF0]Bc:Tt&G']#$aDR[T5[_\jdMfZ$G""$g3MD:,Q8<.Z+#GM
%DnX3!^NO^_/\.grXf?(@8PPL5.QWi2j657OqM7T1oaiA8P+m/qX#&6f@H+80[/nCd2Du.daG*[5D1L?Q[N0sDH,cJ5,I=_Z`c)ZM
%^,=XcDZf3,0D![QE(+\W[@iI3iP<M9X(l4e//Eff=YPt[7_[+)q-%%I^:U5dlIPYXLV207H8V^SNVYr^=4P_Q$iXfOD`QJ<A3#,d
%etK!0:$;<IkVp"LpTTTC0HA@3\KWW]NFf2HXOc\@J%"Gj8It:*"\`SObg+<YLt50[!?M#%>I*1?dj,^QR-WhO\f*3["XS0*@`0-<
%CAKV7>:i%m2KbGDegGo1A'9o^Q'0O1I^c&lrOZr1:1rDS8Uacf@RX:jn)X[IV,D>R2tYl\!Wpmbn&Ncf;6+Uo,Ni-ED>ADd5Y@[4
%C4KA:,H18Oo8D_5]l")SC`K3cNIV1>o?iBP^@JMM>b<W&h/*pUN]sYonN&@ii9TYq2S\[<q!ZeU$Me8"n:qYVQfb/PSH$XWrkshG
%0;e[XQ%<gCqi`EMAN,/$,A@*-Nnq<\5F%d&n%oeV^mgRf%sG?Y>705VE8@o'01fm0i0aTrd>ao2jFE)@d)VoqU9X:s7($a0=#@`)
%nbYieRV&g[g\WTP@<WT*q-uti-]YY-,1I`am,#fAqDA$b<YPj,[Jc"GUMm!_#^"45<E%stJW"o5o)(_r5C/e!)*&A+QOQq=#2,U3
%X5T,;3)\DQL9eZ.''Lc6UUE1f`1.?1d3q;]6#m'T)Ncs:Ob#`$jA!u:Y/`h9YmD_:\&I]0Yc)Q%:M/EC`Lfrr!mbY.=M8R!p?!9A
%5/I9D+Z9XRr#-(9MP&[:L^e)f[[0G8r4lbdeQ_\6MkpB+RcQ3.r4Fc$`hW.Gj_191f,A'7`lhK%Y9V<sTu>?fo%DY$.)"57f3BH8
%B^#@@rcj$-GK@J;-"\M!OtYe81`rQgB%S2Q@GTCm<HMYukN50])B/T9"lQ*XqAHX?&O5\;3YL6alK+ml5>DH6G.m2Xp^3(p?h+.3
%7f/#.WG[qt#es_'J-D!hjD%Z339t!'-u[<W[+2r>,P!FbEIN5DN*:c'YS1\kck0<gA%@tP<%jtXCaW.8E-R2*q&UVaIBecX^'aU@
%o-ke4Y&6G;,'4Wm>M"6hIMs!lH8V>MbA'5W6Gb&K>W&-kAZ!/'Wh5ZUa[k=?%s8TVa\5-6mSZE1Zjr@&5Y=rV<e%%K"hB'(LJ1KH
%_9GE[ei+#a6ql3IU'4gN_oS[:/!ZPL98,_D86qBS5uLZ<0N9^B=^Y647Y2<rAHYY363:fN,aa1B68*s;enNT&H+A,5h86B;R>NI"
%p:s^9h`*kh/?Zu_+[OP&;`chlA#rpi;\/"E`<3]^ElJU=![Xn/q,f[f5)NRMd=gB+k&k8G.6dSphpH:;o7Vd?a]_lMWR_P-j$PrN
%9:3;CjoQJ$,!SFF-N1W*!@ODaV)-f7mEhC.&Kt;`O4mV_QVu=c>*02ZlLMYc(Yg1#/ID)?<*6Fl>QNgT(!1R[K10\Zb=a<YE)[\N
%Y[a[Q,2R/#fn0?OB8,HZ\>'Q5WA.ruLQZ3OSrh/QVA;;:#',i)6g@t.Ydr*q6mH[I"(7gBNT'\e"dMR"PRO2oc:UBk0T5oRs#&/q
%:b"OLcteTBd?s[^E>!A*QmOVd8dgIT*V&k)q/tKAR\1kW)LFA:im<W&.]hOgd?]iK^,i(H2QbldF3QV"JjP:)'MY'C!&'*?7WKr)
%;ee9u71V@]S!_U$)1OETN`2^\V7_7K6_1;rMi>iP7P$P'ZK3Mfd@bLq'Q9q:4)1H4c&h[qTGo'8"U<c%XFrkD&Lj!3rJXobY.frt
%B0n`G/$dG"GS>qR.C!AS%5%VfNJ"#8C*s/-)r>N`BaoaCZKhR)A<<S%YXdT-C^3cXNjLr]\\FFaJJ?7EAk%$7.YBWP%Yn.Z>7rp/
%0>[-CGm=k(:#%A"QjHCp_:&"@!6fnN/3hU8a;D`<a)aqbb(kt=IH0[e#+%&b[jaD_/K'pF_6S.Wg#*E_ZF_M4K?'ZQ.666sQ?3d'
%U'9WaBF"UP`.<V><,H+N4JcSsgl5$R^3$;/!W`2$;GM-F7uTcff&EDL)&c3mJ$I>GIJJ7n>W%8[30q*-af'7.1iQbWHMu69d_-""
%%@PKd_k_l$'ID(GZ'Ki))tUW$r;>OLkNDL<DA?:R5Q=4(,??L$D;!rHe^)*sKU!Rn;BE3':9u\`8JDH;+(=C>+mU?(W)#F1\.G4^
%H'%^e`L`.-\YK!fd.52uTi#'D*8C%3.jg:pcAlKf=[@p`+oR7;WRaQTakbh.o,[)L/@:L0C9!7HCaN;'+JDK.g%\sH<n:P9DK47_
%-Y??.f(UAi(3LINUXbKmM$QHE$VGXpj(*#_dST2WgGl_2Noq#7FNBH!6T/dkT"XeOch$hEGTK^76rq"9oK8_s/oe>kaLogR@2Bg=
%WC[i'3SP3YPm-=\Unlt/^D5UaF9nq9-&W2*Bsbnml-NH:Z=dPp+9gSiK:O,!+3?PRd_j)ID9V2&8dLb8h?EX_"7\6AC'[*d<)7rd
%Eg"LZdI'`eV;TtA7@0.<cB<+"LQT4o^bhOrAV8SH&5?5*Ue?g0<).'1$9E;A%#G-u+UL&s0H%^#8gnlj!d6=f+%=GK$>H5lLmSPN
%1-nHh;*c'8"Z^+"aFW7h?p7?A$A1g(fUa;#k%imtOW"E[2io?u:d98I*NkhMEW,HKM+,$tZ1"Wb7b]tgetLd7a,'(XO_kb9T[SFO
%go]F;ec"j'r/)(q0h!7Z#`bopOGRa<AT*)Ik0*?;d-%=k#XU\em:Z(FP[.TCQV?/9WFuf\/oF@dHD]aMM=?;&PHW&I)51#F)O,3=
%[-/MEM<Oar!TiV;!(,0$_*;b=_c=26RTd=nD00793]dX1-"S<&`7p58PHYCh$Ha4H5-SipMJU5MKO?W?ngON4&feK+TCiKKm[B7P
%71H6=&thQPD`U]]^6mCGm37h"P8&"6pdOMr_4d3"U63MRDupQu08c.Kb9RTH+(Eha\YEBdq"Ymc5:/4FIBp_-kg'.=AjF#X/Y+\9
%mQQPF^)-TW/q1YPHnuY9e*m%_p]03qCQ@5_4>a!<)YX)8f5]8q9Ibqma"cT+W\CcP[Gd8[7N[Sb:H6M8.;blF9h^ohbS,TE"rZG0
%P&d=OZ?!D<i<iRj/+XcOSO&a^T`#6N//O:Yf>BY_-L3Z/W,jrDp\=+I@E26k=5i#L/L%IL^?qUr;6C;QXh65G-=+P#kcg1laZl-$
%jjd+,&NHcbo'iAn5]\:FcFA[(0TINI[H\j<XCVnG7&@saA!Ao@9Q`M%E7N*p2/BWd=-u_?Bk[!j#Q0FClZq"A##@%BDu2ZOl.P*0
%9r";`_,#:*(od?D2m!<jnR))d4#,[hSI2[0NlIZP2T-rgU)V+J7YDYF_jaMFPBIg>X[=Mu+jgZ8Mtsn1nB%b.9iD(jLEkPbkOkbe
%BJ\QH7i5i"eg["W%DiH>7W\!3$4HW>AgEr8o^)+[VGY[ki83p56#ER/h3D\s.5*io^6N@>h9pIS_G.4FWf_)rWG^hb7+.N3B5=C]
%Ee_t9"*.W1LYujdN$uQ#^A"Z93P[!uDUoFr*er,N(!l#>B5G/?'C69uK)7Zil.?ZLY9u"h%PZ0$q!doYbGaSSE:;CU7-P*ep\j$B
%$P.\la*1n2iN=qjG;WSdHpUSd@"BsgS6]]i)-mTkj^><(#IVVa(&D.0BGI5?2!AY3,`(O%=r9!pM)&cB>XW/+i*au&8;'H)J5=aP
%YT*q:3O:>1'^`/_hI%Q2R1RW%0k=B:?s,q[pJf.LYKWc&]qWKLJcS#f3<84-eB/U1Ib'^36k4O$d8F:WWF-0WO@7`BHg3Kj!bPCe
%n-L1$>\P5k4NY[&ka8#'h4_JAh^8B626*J^Q&p*"kfTU:U25$pqIMGT&?9L(-/1blZ.Vs)[>c#(0pQ4?L-VAoFEJ1!A-!R8K5]87
%Yo=/?=O+?E?/Wd.Rp:a?Sc;/oF<Y;DghSF3cr\HVm=:W_>lm"C?(`>@),>9k7)TX%U(IrC'tQo08B<!CAGZRQC88NtU**Fn<h^q+
%*B_8!'L^KhGT.=6`$,V"@;KmM/.,H0Yr4gX\HMWE'nBMj(P;/Dff+Qd]P09SHijc)_hm#<b@W3S$N?1ET)Pt)h"pp>m27P)U=GFs
%4:Q0"bK=\hp,7ShJZ6_n#FcU#:YQII&ouG7M>kt<3&M(YhtK=K=]aGF%94t=&8gggcLrT0U%FWr<2-\6>i<H]Ai#8,BU1?$DGg/P
%C[4`I6BA]pE!0b32^$$gke(q*!sWdX'FY6Sg,G2P#+*#S2&cjX/?mm(*>.$KKXt^j^%$guSUnI&':.nTdd75TO"e"O?P*pSHU/@K
%SihN\QilAj`H?k**R^KDX>+"3oK_#A1.$)#S1$p)!8X?eA`F^rIIuhZk;Yr0%Rm>cajJj"7'=sBOl?/>`B]3TdLi/I)3O;1ocn.3
%f.lo;=HR3_E!E=@M?CG?\24[<[iqf55:3QK^=B,6KY#ej'12,tC`#P\G51Mt]e(2DBBPq]Ipt*P/GB5V=roNrQ^i+U_O"5&U)gL`
%]3,`rYS&C6e[9s2bDg!5e$0f5nAR$OP>Q6n%g8D%O\6om-Ud'(8OKeu/LjmuA'L4XM39fnb&g<;jg$_MFCKK;!SX#Z!/*JgI@"RK
%j\7]Y[@rEEA0uQ8i49N`)l+F(;\fW&cFe$90(!26>H>d-2sOOtLTE&!L@-?[VKGK+Bo##WjD,p*=Bof`c"DoI8)+:ZPi6*#Et6N3
%[rrEe9<2;%f&h%Y"n$iujm^2QCi90r&ReH:?!]oF<NGP<(Nf<p!d>h@i*Gh#lE3.K%6?(n*B.1-J9@rGa5pr%@RRjV:2GL^d$r>3
%ZTN-S&O`'h2'F.WfLCtSGrm:'2dJ7hH)N&4"Epm/am46m4[N0?(]h`=Ae:mHS?docm'c1eb7C(8Y+'^N7GJ51Wkqk_8pjKk28S3T
%(uGp?>n47pY\[<`7S(mbYB4^J9#5Z2l\\m^3-NG?&T'q,DM8?YLa(:[d!Lgp$P:A>QnHE)<f9l@#cu8HJTAW@WD'E]38E6c4dP2l
%d@h.=%-b7r)RQ$`kR:Q_Z>s&@=R0US.MK%_Z%-aq(&?>5;3-fAZoKWX9hA-&CMGJe0e8uV\7scA2:k*m.n0b_r,j4c6KXdj,74jJ
%]`p4:8S?tV2C%WrCS?b+PcF[c+eX*^Fb&P6[[j)BV=XB2&^L.6d7Dc#B8l$$DO)OtqP:;f-ncX+7$XkQPn%6EU>/b=;JU;_4-6,J
%^XfJZc@5#F0V`9f7?8ueW^@n"Lo(I&f!kP-QH64.e@gnS.<O&bjV%ikK:qG0P0``jh`2o-Tg_'[XWmUPE1;Hmf69MKC5i9\6;QbV
%=pDm48dVp7Lr]4;87m*3#=bA4jah#BNU^g6Lp2UbjD32he;TU#FTgR.P;P_WaK6REq52V5fPUe4<O7'AhdE&l[dPfLU4QQg$4-r;
%4&7"dZVh^u=RdQ'SaMS/MP2f++0g#BOiV+DdG-_K6FMIQ2)/8+*^m?AaBQ>n4)Skrk>i?f*r=p"23iQ!eB<RI?s1ni^gbJ(Tf5aZ
%$B]9^N!lQO4kZi3CpF@!WcWd6`7qP3AX&jCSYg/#3H1=0<3_-0ANM5m!VT`1BBPN$R84aFO*+uaA+d0OeF;r#&QtAZ;9ioX;M\gh
%4]P:?DL<P\"u5Y;%FCmH;cK_GlHbEtR0en?VYX'=r!,WLG/Qu<!6@1IX'J.g;UkuoP>[s/YU%YIMY9RZA;D/oE?)7k)jh^;`sZBV
%'36T3S@ehK[CP3V_V+oNNe*`^J>(U!'$1>L<lo/*fc#0De>&]$G]nC!QE17u:f!c)IaNVHGVLF8'A89@'uE;2C3R+LVu*p/_lsra
%7<"@7D!'M_N8_Q8>cb;N+AU>:-pr4s?Rmp3M@B&]L5!S"P5p@lg4T7LS.W9V^/[ISD;'\$oV-J&^=aJqPB"E[nReV3er^qtl[_eu
%=Zm<B*EB8/d4umAc+9#^eOZkYie4@=GPi=^HIuKnD\aR@\j_ZlTEohU0\c+dJ%<Ou.YkIuV%?L3E;^""H83)IeYF0O`8%S-R!let
%6jKTE9d@n:s-t!M*_-@12M6c&[UkmEY\IbWn8@GJ)gd'`9(r7u\d9CnmhT-QR..K<H?i.c@UtscP7)i1)"J8aHl>ADO5lkVkM!3@
%-aEQ?W;p047/dBRKH1@o8:8iZLieA9Y49LCCQ"C"86Ar*Y_TF%EJuojLs('-N\eq$&"go<]8LBmU)Cb0$HoXB;^>T*cXNbYOYS^'
%TH&<h064#(O<$>]U0JrBZd';niRf9pBddha7b\hp+be@bJj0p(Od7cfK!S=]Le-'^:0GaI'TUq[eVufQ[=^1jX6qh)f$8Mhh9mf]
%T%a<1XZg<IT*`\FPiWn*n03C)jbCgbX[&AE%_U`CV`^U2j1D5@*EQoaQ%,A*<:m8P0<;;j?iQ>e/FN_"6f5"*GD5lgDi-mKBQ2XK
%9/`?,G7s')p1eDLTtF<uaSj!0Y&>o\oSSk)L7d78Z&ka@nG9;8A.hr'@m^3q+%99Fkaq@YJNoacmYJ'dfu&m2m-qo^jmgUekV,/H
%D3R/4c[qd:VeFdSHlco2T>oR[c942ZnZQK(s7/D9s8CRLppZ=!qgZB\_f(#T^n:VXhu3NBs8*mepCG+KIe+q:s"D.a\)0FJmN;H@
%_U\,T=oQmfhuD[0s73AnoS;<gr6,-=Vger'+"]_Pdm*fss7.7\o-aP[V#Ps/~>
%AI9_PrivateDataEnd
